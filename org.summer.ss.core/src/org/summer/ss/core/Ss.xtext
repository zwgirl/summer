/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.summer.ss.core.Ss with org.summer.dsl.xbase.Xbase

import "http://www.summer.org/dsl/model/xbase" as xbase
import "http://www.summer.org/dsl/model/xtype" as xtype
import "http://www.summer.org/dsl/model/types" as types
import "http://www.summer.org/dsl/model/xaml" as xaml

JvmModule returns types::JvmModule : 
	('package' package=QualifiedName)?
	'module' simpleName=ID '{'
	importSection=XImportSection? 
	root=XObjectElement
	(contents+=(Type | DelegateType) 
	| (contents+= XStatment )  )*
	
	exportSection=XExportSection? 
	'}'
;

XImportSection returns xtype::XImportSection:
	(importDeclarations+=XImportDeclaration ';'?)+;

XImportDeclaration returns xtype::XImportDeclaration: 
	{xtype::XImportDeclaration}
	'import' 
		'{'
			((importItems += XImportItem (',' importItems += XImportItem)*)
			| wildcard ?= '*'
			)
		'}'
		'from' importedNamespace=QualifiedName
		'as' alias=ValidID
;

XImportItem returns xtype::XImportItem:
	{xtype::XImportItem}
	importedId = [types::JvmIdentifiableElement|ID] ('as' alias=ID)?
;

XExportSection returns xtype::XExportSection:
	(exportDeclarations+=XExportDeclaration ';'?)+;

XExportDeclaration returns xtype::XExportDeclaration: 
	'export' 
	(
		(
			('{'
				exportItems +=XExportItem (',' exportItems +=XExportItem)*
			'}'('from' importURI=STRING)?
			)
//			|
//			(exportItems +=XExportItem)
//			|
//			wildcard?='*'
		)
		|
		( 'from' importURI=STRING 'as' alias=ID)
	)
;

XExportItem returns xtype::XExportItem:
	exportedId =[types::JvmIdentifiableElement|ID] ('as' alias=ID)?
;

Type returns types::JvmDeclaredType :
	{types::JvmDeclaredType} annotations+=JvmAnnotation*   
	(
		{types::JvmGenericType.annotationInfo = current}
		(exported?='export')? modifiers+=ClassModofier*
	  	'class' simpleName=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	("extends" extends=JvmParameterizedTypeReference)? 
	   	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
		{types::JvmInterfaceType.annotationInfo = current}
		(exported?='export')? //modifiers+=CommonModifier*
	  	'interface' simpleName=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	('extends' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
		{types::JvmRemoteType.annotationInfo = current}
		(exported?='export')? //modifiers+=CommonModifier*
	  	'remote' simpleName=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	('extends' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
		{types::JvmBeanType.annotationInfo = current}
		(exported?='export')? //modifiers+=CommonModifier*
	  	'bean' simpleName=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	('extends' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
 		{types::JvmStructType.annotationInfo = current}
		(exported?='export')? //modifiers+=CommonModifier*
	  	'struct' simpleName=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
	   	'{'
		   (members+=Member)*
	   	'}'
	 |
		{types::JvmEnumerationType.annotationInfo = current}
		(exported?='export')? //modifiers+=CommonModifier*
	  	'enum' simpleName=ValidID '{'   
		   (members+=JvmEnumerationLiteral (',' members+=JvmEnumerationLiteral)*)? 
	   	'}'
	 |
	 	{types::JvmAnnotationType.annotationInfo = current}
	 	(exported?='export')? //modifiers+=CommonModifier*
		'annotation' simpleName=ValidID '{'
		   (members+=AnnotationField)*
	   	'}'
	)
;

DelegateType returns types::JvmDelegateType:
// 	{types::JvmDelegateType} annotations+=XAnnotation*  
	(exported ?= 'export')? 'delegate' 
	   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	   	 returnType=JvmTypeReference
	   	 simpleName=ValidID
	    '('(parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')' 
	 ';'
;

AnnotationField returns types::JvmField :
	annotations+=JvmAnnotation* //modifiers+=CommonModifier* 
	( 
		type=JvmTypeReference simpleName=ValidID
	)
	('=' defaultValue=XLiteral)? ';'
;

Member returns types::JvmMember:
	{types::JvmMember} annotations+=JvmAnnotation*
	(
		(	
			{types::JvmField.annotationInfo = current} modifiers+=FieldModifier*
			(
				type=JvmTypeReference simpleName=ValidID
			)
			(
				(('=' defaultValue=XExpression)? ';')
				|
				(
				property ?= '{'
					'get' (get=XBlockStatment)? 
					('set' (set=XBlockStatment)?)?
				'}'
				)
			)
		) 
		|
	 	(
			{types::JvmOperation.annotationInfo = current} modifiers+=MethodModifier*
			'function' 
				('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
				returnType=JvmTypeReference
				 simpleName=FunctionID
				'('(parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
					
					('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
				(body=XBlockStatment 
					| ';'
				) 
		)
	 	| 
	 	(
			{types::JvmConstructor.annotationInfo = current} //modifiers+=CommonModifier*
			'constructor' 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			'(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
			body=XBlockStatment
		)
		| (
			{types::JvmEvent.annotationInfo = current} //modifiers+=EventModifier*
			'event' type=JvmTypeReference simpleName=ValidID 
			(
				'{'
					'add' add=XBlockStatment 
					('remove' remove=XBlockStatment)?
				'}'
			)?
		)
	)
;

//XClosure returns xbase::XExpression:
//	{xbase::XClosure}
//	(exported?='export')? 'function' 
//		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
//		 (name=ValidID | (operator?='operator' name= (OpAdd | OpMulti| BinaryBitwiseOp| ShiftOp)))?
//		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
//			(':' returnType=JvmTypeReference)?
//		
//		(expression=XBlockExpression 
//			| ';'
//		) 
//	;

//XClosure returns xbase::XExpression:
//	{xbase::XClosure}
//	(exported?='export')? 'function' 
//		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
//		 (name=FunctionID)?
//		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
//			(':' returnType=JvmTypeReference)?
//		
//		(expression=XBlockExpression 
//			| ';'
//		) 
//	;

//XFunction returns xbase::XFunction:
//	{xbase::XFunction}
//	(exported?='export')? 
//	'function' 
//		=>('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
//		(returnType=JvmTypeReference)?
//		 name=FunctionID
//		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
////		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
//		
//	expression=XBlockExpression 
//	;
	
//XExecute returns xbase::XExecute:
//	'function' 
//		=>('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
//		(returnType=JvmTypeReference)?
//		 name=FunctionID
//;
	
//XExecute returns xbase::XExecute:
//	'function' 
//		=>('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
//		(returnType=JvmTypeReference)?
//		 name=FunctionID
//		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
//		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
//		(expression=XBlockExpression 
//			| ';'
//		) 
//;
	
FunctionID:
	ValidID | Operators
;

Operators:
	  OpMultiAssign
	| OpOr
	| OpAnd
	| OpEquality
	| OpCompare
	| ShiftOp
	| BinaryBitwiseOp
	| OpMulti
	| OpUnary
//	| PrefixOp
//	| IndexOp
//	| OpPostfix
;

JvmEnumerationLiteral returns types::JvmEnumerationLiteral: 
	simpleName=ValidID ('=' defaultValue = XNumberLiteral)?
;


ClassModofier:
	'abstract'|
	'native'
;

//CommonModifier:
////		'public' 
////		|
////		 'private' |
////		| 'protected' 
////		| 'package' 
////		| 'abstract' 
//		 'static' 
////		| 'export'
////		| 'dispatch' 
//		| 'const'
//		| 'native'
//		| 'override'
//		| 'virtaul'
//;

FieldModifier:
		'static' | 
		'const' |
		'virtaul' |
		'override' |
		'transient' 
;

//EventModifier:
//		'static' | 
//		'const' |
//		'virtaul' |
//		'override' 
//;

MethodModifier:
		'override' | 'virtaul' |'static' | 'native' |'overload' | 'abstract'
; 

//MethodModifier:
//		'def' | 
//		'override' 
//; 

//CreateExtensionInfo:
//	'create' (name=ValidID ':')? createExpression=XExpression
//;

ValidID:
	ID 
//	| 'create' 
//	| 'annotation'
;

FeatureCallID:
	ID 
//	| 'abstract' 
//	| 'annotation' 
//	| 'class' 
//	| 'create' 
//	| 'def' 
//	| 'dispatch' 
//	| 'enum'
// 	| 'extends' 
// 	| 'extension' 
//   	| 'final'
//	| 'implements' 
//    | 'import' 
//    | 'interface' 
//    | 'override' 
//    | 'package' 
//    | 'public'
//	| 'private' 
//   	| 'protected'
//	| 'static' 
//    | 'throws'
;

XElement returns xaml::XElement:
	XObjectElement
	|XAttributeElement
	;

XObjectElement returns xaml::XObjectElement:
	{xaml::XObjectElement}
	"<" type=[types::JvmType|QualifiedName]  
				properties+=XAbstractAttribute * =>  ((">" 
		(contents+=XElement	)*
	"</"  closeType=[types::JvmType|QualifiedName] ">") | "/>")
	;
XAttributeElement returns xaml::XElement:
	{xaml::XAttributeElement}
	"<" "(" type=[types::JvmType|QualifiedName ] ")""." field=[types::JvmField|ID]  => ((">"
		(contents+=XElement	)*
	"</" "(" closeType=[types::JvmType|QualifiedName ] ")""." closeField=[types::JvmField|ID] )  ">" |  "/>")
	;

XAbstractAttribute returns xaml::XAbstractAttribute:
	XGeneralAttribute
	|XAttachAttribute
	;

XAttachAttribute returns xaml::XAttachAttribute:
	"("type=[types::JvmType|QualifiedName] ")" '.' field=[types::JvmField|ID]  "=" value=XPropertyExpression
	;
XGeneralAttribute returns xaml::XGeneralAttribute:
	field=[types::JvmField|ID] "=" value=XPropertyExpression
	;

XMarkupExtenson returns xbase::XExpression:
	{xaml::XMarkupExtenson}
	"{"
		type=[types::JvmType|QualifiedName]
		properties+=XAbstractAttribute* 
	"}"
	;

XPropertyExpression returns xbase::XExpression:
	XStringLiteral 
	|XMarkupExtenson
	;	

