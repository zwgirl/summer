grammar org.summer.xaml.core.XAML with org.summer.ss.core.Ss

generate xAML "http://www.summer.org/markup/xaml/XAML"

import "http://www.summer.org/dsl/model/types" as types
import "http://www.summer.org/dsl/model/xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Document returns Document : 
	importSection=XImportSection1?
	root=ObjectElement
	
		(contents+=Type 
	| contents+= XExpressionInsideBlock ';'?)*
	
	;

ElementContent hidden(WS):
	ObjectElement
	|AttributeElement
	;

ObjectElement:
	"<" type=JvmTypeReference  
				properties+=AbstractProperty * =>  ((">" 
		(contents+=ElementContent	)*
	"</"  close=JvmTypeReference ">") | "/>")
	;
AttributeElement:
	"<" "(" type=[types::JvmType|ID ] "." attribute=[types::JvmField|ID] ")" => ((">"
		(contents+=ElementContent	)*
	"</" "(" close=[types::JvmType|ID ] "." closeAttribute=[types::JvmField|ID] ) ")" ">" |  "/>")
	;

AbstractProperty:
	GeneralProperty
	|AttachProperty
	;

AttachProperty returns Property:
	"("type=[types::JvmType|ID] '.' property=[types::JvmField|ID] ")" "=" value=XPrimaryExpression
	;


MarkupExtenson returns xbase::XExpression:
	{MarkupExtenson}
	"{"
		type=JvmTypeReference
		properties+=AbstractProperty* 
	"}"
	;

GeneralProperty returns Property:
	property=[types::JvmField|ID] "=" value=XPrimaryExpression
	;

XPrimaryExpression returns xbase::XExpression:
	XStringLiteral 
	|MarkupExtenson
	;	

XStringLiteral returns xbase::XExpression:
	{xbase::XStringLiteral} value=STRING
	;

//PDData returns PCData:
//	"#" text=PCDATA
//	;
//
//terminal PCDATA: 
//	!('<') ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* !('>') 
//	;	
