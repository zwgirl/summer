/*
* generated by Xtext
*/
package org.summer.xaml.core.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.summer.ss.core.services.SsGrammarAccess;
import org.summer.dsl.xannotation.services.XbaseWithAnnotationsGrammarAccess;
import org.summer.dsl.xbase.services.XbaseGrammarAccess;
import org.summer.dsl.xtype.services.XtypeGrammarAccess;

@Singleton
public class XAMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSection1ParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootObjectElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cContentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cContentsTypeParserRuleCall_2_0_0 = (RuleCall)cContentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cContentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cContentsXExpressionInsideBlockParserRuleCall_2_1_0_0 = (RuleCall)cContentsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//Document:
		//	importSection=XImportSection1? root=ObjectElement (contents+=Type | contents+=XExpressionInsideBlock ";"?)*;
		public ParserRule getRule() { return rule; }

		//importSection=XImportSection1? root=ObjectElement (contents+=Type | contents+=XExpressionInsideBlock ";"?)*
		public Group getGroup() { return cGroup; }

		//importSection=XImportSection1?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }

		//XImportSection1
		public RuleCall getImportSectionXImportSection1ParserRuleCall_0_0() { return cImportSectionXImportSection1ParserRuleCall_0_0; }

		//root=ObjectElement
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//ObjectElement
		public RuleCall getRootObjectElementParserRuleCall_1_0() { return cRootObjectElementParserRuleCall_1_0; }

		//(contents+=Type | contents+=XExpressionInsideBlock ";"?)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//contents+=Type
		public Assignment getContentsAssignment_2_0() { return cContentsAssignment_2_0; }

		//Type
		public RuleCall getContentsTypeParserRuleCall_2_0_0() { return cContentsTypeParserRuleCall_2_0_0; }

		//contents+=XExpressionInsideBlock ";"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//contents+=XExpressionInsideBlock
		public Assignment getContentsAssignment_2_1_0() { return cContentsAssignment_2_1_0; }

		//XExpressionInsideBlock
		public RuleCall getContentsXExpressionInsideBlockParserRuleCall_2_1_0_0() { return cContentsXExpressionInsideBlockParserRuleCall_2_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }
	}

	public class ElementContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementContent hidden(WS):
		//	ObjectElement | AttributeElement;
		public ParserRule getRule() { return rule; }

		//ObjectElement | AttributeElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectElement
		public RuleCall getObjectElementParserRuleCall_0() { return cObjectElementParserRuleCall_0; }

		//AttributeElement
		public RuleCall getAttributeElementParserRuleCall_1() { return cAttributeElementParserRuleCall_1; }
	}

	public class ObjectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesAbstractPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0_0 = (Keyword)cGroup_3_0_0.eContents().get(0);
		private final Assignment cContentsAssignment_3_0_0_1 = (Assignment)cGroup_3_0_0.eContents().get(1);
		private final RuleCall cContentsElementContentParserRuleCall_3_0_0_1_0 = (RuleCall)cContentsAssignment_3_0_0_1.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_3_0_0_2 = (Keyword)cGroup_3_0_0.eContents().get(2);
		private final Assignment cCloseAssignment_3_0_0_3 = (Assignment)cGroup_3_0_0.eContents().get(3);
		private final RuleCall cCloseJvmTypeReferenceParserRuleCall_3_0_0_3_0 = (RuleCall)cCloseAssignment_3_0_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0_4 = (Keyword)cGroup_3_0_0.eContents().get(4);
		private final Keyword cSolidusGreaterThanSignKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		
		//ObjectElement:
		//	"<" type=JvmTypeReference properties+=AbstractProperty* => (">" contents+=ElementContent* "</" close=JvmTypeReference
		//	">" | "/>");
		public ParserRule getRule() { return rule; }

		//"<" type=JvmTypeReference properties+=AbstractProperty* => (">" contents+=ElementContent* "</" close=JvmTypeReference
		//">" | "/>")
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//properties+=AbstractProperty*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//AbstractProperty
		public RuleCall getPropertiesAbstractPropertyParserRuleCall_2_0() { return cPropertiesAbstractPropertyParserRuleCall_2_0; }

		//=> (">" contents+=ElementContent* "</" close=JvmTypeReference ">" | "/>")
		public Group getGroup_3() { return cGroup_3; }

		//">" contents+=ElementContent* "</" close=JvmTypeReference ">" | "/>"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//">" contents+=ElementContent* "</" close=JvmTypeReference ">"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0_0_0() { return cGreaterThanSignKeyword_3_0_0_0; }

		//contents+=ElementContent*
		public Assignment getContentsAssignment_3_0_0_1() { return cContentsAssignment_3_0_0_1; }

		//ElementContent
		public RuleCall getContentsElementContentParserRuleCall_3_0_0_1_0() { return cContentsElementContentParserRuleCall_3_0_0_1_0; }

		//"</"
		public Keyword getLessThanSignSolidusKeyword_3_0_0_2() { return cLessThanSignSolidusKeyword_3_0_0_2; }

		//close=JvmTypeReference
		public Assignment getCloseAssignment_3_0_0_3() { return cCloseAssignment_3_0_0_3; }

		//JvmTypeReference
		public RuleCall getCloseJvmTypeReferenceParserRuleCall_3_0_0_3_0() { return cCloseJvmTypeReferenceParserRuleCall_3_0_0_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0_0_4() { return cGreaterThanSignKeyword_3_0_0_4; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3_0_1() { return cSolidusGreaterThanSignKeyword_3_0_1; }
	}

	public class AttributeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeJvmTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeJvmTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeJvmTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAttributeJvmFieldCrossReference_4_0 = (CrossReference)cAttributeAssignment_4.eContents().get(0);
		private final RuleCall cAttributeJvmFieldIDTerminalRuleCall_4_0_1 = (RuleCall)cAttributeJvmFieldCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cAlternatives_6_0.eContents().get(0);
		private final Group cGroup_6_0_0_0 = (Group)cGroup_6_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_0_0_0_0 = (Keyword)cGroup_6_0_0_0.eContents().get(0);
		private final Assignment cContentsAssignment_6_0_0_0_1 = (Assignment)cGroup_6_0_0_0.eContents().get(1);
		private final RuleCall cContentsElementContentParserRuleCall_6_0_0_0_1_0 = (RuleCall)cContentsAssignment_6_0_0_0_1.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6_0_0_0_2 = (Keyword)cGroup_6_0_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_6_0_0_0_3 = (Keyword)cGroup_6_0_0_0.eContents().get(3);
		private final Assignment cCloseAssignment_6_0_0_0_4 = (Assignment)cGroup_6_0_0_0.eContents().get(4);
		private final CrossReference cCloseJvmTypeCrossReference_6_0_0_0_4_0 = (CrossReference)cCloseAssignment_6_0_0_0_4.eContents().get(0);
		private final RuleCall cCloseJvmTypeIDTerminalRuleCall_6_0_0_0_4_0_1 = (RuleCall)cCloseJvmTypeCrossReference_6_0_0_0_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6_0_0_0_5 = (Keyword)cGroup_6_0_0_0.eContents().get(5);
		private final Assignment cCloseAttributeAssignment_6_0_0_0_6 = (Assignment)cGroup_6_0_0_0.eContents().get(6);
		private final CrossReference cCloseAttributeJvmFieldCrossReference_6_0_0_0_6_0 = (CrossReference)cCloseAttributeAssignment_6_0_0_0_6.eContents().get(0);
		private final RuleCall cCloseAttributeJvmFieldIDTerminalRuleCall_6_0_0_0_6_0_1 = (RuleCall)cCloseAttributeJvmFieldCrossReference_6_0_0_0_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_0_0_1 = (Keyword)cGroup_6_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_6_0_0_2 = (Keyword)cGroup_6_0_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		
		//AttributeElement:
		//	"<" "(" type=[types::JvmType] "." attribute=[types::JvmField] ")" => ((">" contents+=ElementContent* "</" "("
		//	close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">" | "/>");
		public ParserRule getRule() { return rule; }

		//"<" "(" type=[types::JvmType] "." attribute=[types::JvmField] ")" => ((">" contents+=ElementContent* "</" "("
		//close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">" | "/>")
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=[types::JvmType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[types::JvmType]
		public CrossReference getTypeJvmTypeCrossReference_2_0() { return cTypeJvmTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeJvmTypeIDTerminalRuleCall_2_0_1() { return cTypeJvmTypeIDTerminalRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//attribute=[types::JvmField]
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }

		//[types::JvmField]
		public CrossReference getAttributeJvmFieldCrossReference_4_0() { return cAttributeJvmFieldCrossReference_4_0; }

		//ID
		public RuleCall getAttributeJvmFieldIDTerminalRuleCall_4_0_1() { return cAttributeJvmFieldIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//=> ((">" contents+=ElementContent* "</" "(" close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">" | "/>")
		public Group getGroup_6() { return cGroup_6; }

		//(">" contents+=ElementContent* "</" "(" close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">" | "/>"
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }

		//(">" contents+=ElementContent* "</" "(" close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">"
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }

		//">" contents+=ElementContent* "</" "(" close=[types::JvmType] "." closeAttribute=[types::JvmField]
		public Group getGroup_6_0_0_0() { return cGroup_6_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0_0_0_0() { return cGreaterThanSignKeyword_6_0_0_0_0; }

		//contents+=ElementContent*
		public Assignment getContentsAssignment_6_0_0_0_1() { return cContentsAssignment_6_0_0_0_1; }

		//ElementContent
		public RuleCall getContentsElementContentParserRuleCall_6_0_0_0_1_0() { return cContentsElementContentParserRuleCall_6_0_0_0_1_0; }

		//"</"
		public Keyword getLessThanSignSolidusKeyword_6_0_0_0_2() { return cLessThanSignSolidusKeyword_6_0_0_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0_0_0_3() { return cLeftParenthesisKeyword_6_0_0_0_3; }

		//close=[types::JvmType]
		public Assignment getCloseAssignment_6_0_0_0_4() { return cCloseAssignment_6_0_0_0_4; }

		//[types::JvmType]
		public CrossReference getCloseJvmTypeCrossReference_6_0_0_0_4_0() { return cCloseJvmTypeCrossReference_6_0_0_0_4_0; }

		//ID
		public RuleCall getCloseJvmTypeIDTerminalRuleCall_6_0_0_0_4_0_1() { return cCloseJvmTypeIDTerminalRuleCall_6_0_0_0_4_0_1; }

		//"."
		public Keyword getFullStopKeyword_6_0_0_0_5() { return cFullStopKeyword_6_0_0_0_5; }

		//closeAttribute=[types::JvmField]
		public Assignment getCloseAttributeAssignment_6_0_0_0_6() { return cCloseAttributeAssignment_6_0_0_0_6; }

		//[types::JvmField]
		public CrossReference getCloseAttributeJvmFieldCrossReference_6_0_0_0_6_0() { return cCloseAttributeJvmFieldCrossReference_6_0_0_0_6_0; }

		//ID
		public RuleCall getCloseAttributeJvmFieldIDTerminalRuleCall_6_0_0_0_6_0_1() { return cCloseAttributeJvmFieldIDTerminalRuleCall_6_0_0_0_6_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_0_0_1() { return cRightParenthesisKeyword_6_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0_0_2() { return cGreaterThanSignKeyword_6_0_0_2; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_6_0_1() { return cSolidusGreaterThanSignKeyword_6_0_1; }
	}

	public class AbstractPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttachPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractProperty:
		//	GeneralProperty | AttachProperty;
		public ParserRule getRule() { return rule; }

		//GeneralProperty | AttachProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//GeneralProperty
		public RuleCall getGeneralPropertyParserRuleCall_0() { return cGeneralPropertyParserRuleCall_0; }

		//AttachProperty
		public RuleCall getAttachPropertyParserRuleCall_1() { return cAttachPropertyParserRuleCall_1; }
	}

	public class AttachPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttachProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPropertyJvmFieldCrossReference_3_0 = (CrossReference)cPropertyAssignment_3.eContents().get(0);
		private final RuleCall cPropertyJvmFieldIDTerminalRuleCall_3_0_1 = (RuleCall)cPropertyJvmFieldCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueXPrimaryExpressionParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//AttachProperty returns Property:
		//	"(" type=[types::JvmType] "." property=[types::JvmField] ")" "=" value=XPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//"(" type=[types::JvmType] "." property=[types::JvmField] ")" "=" value=XPrimaryExpression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=[types::JvmType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::JvmType]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeJvmTypeIDTerminalRuleCall_1_0_1() { return cTypeJvmTypeIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//property=[types::JvmField]
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//[types::JvmField]
		public CrossReference getPropertyJvmFieldCrossReference_3_0() { return cPropertyJvmFieldCrossReference_3_0; }

		//ID
		public RuleCall getPropertyJvmFieldIDTerminalRuleCall_3_0_1() { return cPropertyJvmFieldIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//value=XPrimaryExpression
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//XPrimaryExpression
		public RuleCall getValueXPrimaryExpressionParserRuleCall_6_0() { return cValueXPrimaryExpressionParserRuleCall_6_0; }
	}

	public class MarkupExtensonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupExtenson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkupExtensonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesAbstractPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MarkupExtenson returns xbase::XExpression:
		//	{MarkupExtenson} "{" type=JvmTypeReference properties+=AbstractProperty* "}";
		public ParserRule getRule() { return rule; }

		//{MarkupExtenson} "{" type=JvmTypeReference properties+=AbstractProperty* "}"
		public Group getGroup() { return cGroup; }

		//{MarkupExtenson}
		public Action getMarkupExtensonAction_0() { return cMarkupExtensonAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }

		//properties+=AbstractProperty*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//AbstractProperty
		public RuleCall getPropertiesAbstractPropertyParserRuleCall_3_0() { return cPropertiesAbstractPropertyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GeneralPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneralProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyJvmFieldCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyJvmFieldIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyJvmFieldCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//GeneralProperty returns Property:
		//	property=[types::JvmField] "=" value=XPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//property=[types::JvmField] "=" value=XPrimaryExpression
		public Group getGroup() { return cGroup; }

		//property=[types::JvmField]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[types::JvmField]
		public CrossReference getPropertyJvmFieldCrossReference_0_0() { return cPropertyJvmFieldCrossReference_0_0; }

		//ID
		public RuleCall getPropertyJvmFieldIDTerminalRuleCall_0_0_1() { return cPropertyJvmFieldIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=XPrimaryExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//XPrimaryExpression
		public RuleCall getValueXPrimaryExpressionParserRuleCall_2_0() { return cValueXPrimaryExpressionParserRuleCall_2_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkupExtensonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XStringLiteral | MarkupExtenson;
		public ParserRule getRule() { return rule; }

		//XStringLiteral | MarkupExtenson
		public Alternatives getAlternatives() { return cAlternatives; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_0() { return cXStringLiteralParserRuleCall_0; }

		//MarkupExtenson
		public RuleCall getMarkupExtensonParserRuleCall_1() { return cMarkupExtensonParserRuleCall_1; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////PDData returns PCData:
		////	"#" text=PCDATA
		////	;
		////
		////terminal PCDATA: 
		////	!('<') ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* !('>') 
		////	;	
		//XStringLiteral returns xbase::XExpression:
		//	{xbase::XStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{xbase::XStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{xbase::XStringLiteral}
		public Action getXStringLiteralAction_0() { return cXStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private DocumentElements pDocument;
	private ElementContentElements pElementContent;
	private ObjectElementElements pObjectElement;
	private AttributeElementElements pAttributeElement;
	private AbstractPropertyElements pAbstractProperty;
	private AttachPropertyElements pAttachProperty;
	private MarkupExtensonElements pMarkupExtenson;
	private GeneralPropertyElements pGeneralProperty;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XStringLiteralElements pXStringLiteral;
	
	private final Grammar grammar;

	private SsGrammarAccess gaSs;

	@Inject
	public XAMLGrammarAccess(GrammarProvider grammarProvider,
		SsGrammarAccess gaSs) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSs = gaSs;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.summer.xaml.core.XAML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SsGrammarAccess getSsGrammarAccess() {
		return gaSs;
	}

	
	//Document:
	//	importSection=XImportSection1? root=ObjectElement (contents+=Type | contents+=XExpressionInsideBlock ";"?)*;
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//ElementContent hidden(WS):
	//	ObjectElement | AttributeElement;
	public ElementContentElements getElementContentAccess() {
		return (pElementContent != null) ? pElementContent : (pElementContent = new ElementContentElements());
	}
	
	public ParserRule getElementContentRule() {
		return getElementContentAccess().getRule();
	}

	//ObjectElement:
	//	"<" type=JvmTypeReference properties+=AbstractProperty* => (">" contents+=ElementContent* "</" close=JvmTypeReference
	//	">" | "/>");
	public ObjectElementElements getObjectElementAccess() {
		return (pObjectElement != null) ? pObjectElement : (pObjectElement = new ObjectElementElements());
	}
	
	public ParserRule getObjectElementRule() {
		return getObjectElementAccess().getRule();
	}

	//AttributeElement:
	//	"<" "(" type=[types::JvmType] "." attribute=[types::JvmField] ")" => ((">" contents+=ElementContent* "</" "("
	//	close=[types::JvmType] "." closeAttribute=[types::JvmField]) ")" ">" | "/>");
	public AttributeElementElements getAttributeElementAccess() {
		return (pAttributeElement != null) ? pAttributeElement : (pAttributeElement = new AttributeElementElements());
	}
	
	public ParserRule getAttributeElementRule() {
		return getAttributeElementAccess().getRule();
	}

	//AbstractProperty:
	//	GeneralProperty | AttachProperty;
	public AbstractPropertyElements getAbstractPropertyAccess() {
		return (pAbstractProperty != null) ? pAbstractProperty : (pAbstractProperty = new AbstractPropertyElements());
	}
	
	public ParserRule getAbstractPropertyRule() {
		return getAbstractPropertyAccess().getRule();
	}

	//AttachProperty returns Property:
	//	"(" type=[types::JvmType] "." property=[types::JvmField] ")" "=" value=XPrimaryExpression;
	public AttachPropertyElements getAttachPropertyAccess() {
		return (pAttachProperty != null) ? pAttachProperty : (pAttachProperty = new AttachPropertyElements());
	}
	
	public ParserRule getAttachPropertyRule() {
		return getAttachPropertyAccess().getRule();
	}

	//MarkupExtenson returns xbase::XExpression:
	//	{MarkupExtenson} "{" type=JvmTypeReference properties+=AbstractProperty* "}";
	public MarkupExtensonElements getMarkupExtensonAccess() {
		return (pMarkupExtenson != null) ? pMarkupExtenson : (pMarkupExtenson = new MarkupExtensonElements());
	}
	
	public ParserRule getMarkupExtensonRule() {
		return getMarkupExtensonAccess().getRule();
	}

	//GeneralProperty returns Property:
	//	property=[types::JvmField] "=" value=XPrimaryExpression;
	public GeneralPropertyElements getGeneralPropertyAccess() {
		return (pGeneralProperty != null) ? pGeneralProperty : (pGeneralProperty = new GeneralPropertyElements());
	}
	
	public ParserRule getGeneralPropertyRule() {
		return getGeneralPropertyAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XStringLiteral | MarkupExtenson;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	////PDData returns PCData:
	////	"#" text=PCDATA
	////	;
	////
	////terminal PCDATA: 
	////	!('<') ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* !('>') 
	////	;	
	//XStringLiteral returns xbase::XExpression:
	//	{xbase::XStringLiteral} value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return (pXStringLiteral != null) ? pXStringLiteral : (pXStringLiteral = new XStringLiteralElements());
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//File returns XtendFile: //	contents+=(
	// //	JvmModule
	// //	|
	// //	JvmNoModule)
	// importSection=XImportSection1?
	//	(contents+=Type //	(xtendTypes+=Type)*
	// | contents+=XExpressionInsideBlock ";"?)* exportSection=XExportSection?;
	public SsGrammarAccess.FileElements getFileAccess() {
		return gaSs.getFileAccess();
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	////JvmModule returns types::JvmModule:
	// //	    ('module' simpleName=QualifiedName '{'
	//
	////	importSection=XImportSection1? 
	// ////	(xtendTypes+=Type)*
	// //	(contents+=Type 
	//
	////	| contents+= XExpressionInsideBlock ';'?)*
	// //	
	// //	exportSection=XExportSection? 
	// //	'}')
	// //;
	// //
	//
	////JvmNoModule returns types::JvmNoModule:
	// ////	{types::JvmNoModule}
	// //	importSection=XImportSection1? 
	//
	////	(contents+=Type 
	// //	| contents+= XExpressionInsideBlock ';'?)+
	// //;
	// //Type returns XtendTypeDeclaration :
	//
	////	{XtendTypeDeclaration} annotations+=XAnnotation*   
	// //	(
	// //		{XtendClass.annotationInfo = current}
	//
	////		modifiers+=CommonModifier*
	//
	////	  	'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	//
	////	   	("extends" extends=JvmParameterizedTypeReference)? 
	//
	////	   	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
	//
	////		   (members+=Member)*
	// //	   	'}'
	// //	 |
	// //		{XtendInterface.annotationInfo = current}
	//
	////		modifiers+=CommonModifier*
	//
	////	  	'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	//
	////	   	('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?'{'
	//
	////		   (members+=Member)*
	// //	   	'}'
	// //	 |
	// //		{XtendEnum.annotationInfo = current}
	//
	////		modifiers+=CommonModifier*
	// //	  	'enum' name=ValidID '{'   
	//
	////		   (members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
	// //	   	'}'
	// //	 |
	//
	////	 	{XtendAnnotationType.annotationInfo = current}
	// //	 	modifiers+=CommonModifier*
	//
	////		'annotation' name=ValidID '{'
	// //		   (members+=AnnotationField)*
	// //	   	'}'
	// //   	 |
	//
	////	 	{XtendDelegate.annotationInfo = current}
	// ////	 	modifiers+=CommonModifier*
	// //		'delegate' 
	//
	//////		modifiers+=CommonModifier*
	// ////			modifiers+=MethodModifier 
	//
	//////(modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //
	// //			( 
	//
	////			   =>(returnType=JvmTypeReference name=ValidID
	//
	////			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	'('
	// //			   )
	//
	//////			  | name=ValidID '('
	// //			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	////			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	// //			 ';'
	// //	)
	// //;
	// Type returns
	//types::JvmDeclaredType:
	//	{types::JvmDeclaredType} annotations+=XAnnotation* ({types::JvmGenericType.annotationInfo=current}
	//	exported?="export"? modifiers+=CommonModifier* "class" simpleName=ValidID ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? ("extends" extends=JvmParameterizedTypeReference)? ("implements"
	//	implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}"
	//	//	 |
	// //		{XtendEnum.annotationInfo = current}
	// //		modifiers+=CommonModifier*
	// //	  	'enum' name=ValidID '{'   
	//
	//	//		   (members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
	// //	   	'}'
	// //   	 |
	//
	//	//	 	{XtendDelegate.annotationInfo = current}
	// ////	 	modifiers+=CommonModifier*
	// //		'delegate' 
	//
	//	////		modifiers+=CommonModifier*
	// ////			modifiers+=MethodModifier 
	//
	//	////(modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //
	// //			( 
	//
	//	//			   =>(returnType=JvmTypeReference name=ValidID
	//
	//	//			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	'('
	//
	//	//			   )
	// ////			  | name=ValidID '('
	// //			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	//	//			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	// //			 ';'
	// |
	//	{types::JvmGenericType.annotationInfo=current} exported?="export"? modifiers+=CommonModifier* interface?="interface"
	//	simpleName=ValidID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
	//	implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}"
	//	| {types::JvmAnnotationType.annotationInfo=current} exported?="export"? modifiers+=CommonModifier* "annotation"
	//	simpleName=ValidID "{" members+=AnnotationField* "}");
	public SsGrammarAccess.TypeElements getTypeAccess() {
		return gaSs.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//AnnotationField returns types::JvmField:
	//	annotations+=XAnnotation* modifiers+=CommonModifier* //			modifiers+=FieldModifier modifiers+=CommonModifier*
	//
	//	//			type=JvmTypeReference? simpleName=ValidID
	// //		|
	// (type=JvmTypeReference simpleName=ValidID) ("="
	//	defaultValue=XLiteral)? ";"?;
	public SsGrammarAccess.AnnotationFieldElements getAnnotationFieldAccess() {
		return gaSs.getAnnotationFieldAccess();
	}
	
	public ParserRule getAnnotationFieldRule() {
		return getAnnotationFieldAccess().getRule();
	}

	//Member returns types::JvmMember:
	//	{types::JvmMember} annotations+=XAnnotation* ({types::JvmField.annotationInfo=current} modifiers+=CommonModifier*
	//	//				modifiers+=FieldModifier modifiers+=CommonModifier* 
	// //				type=JvmTypeReference? simpleName=ValidID 
	//
	//	//			|  
	// //				modifiers+=FieldModifier?
	// (type=JvmTypeReference simpleName=ValidID) (("="
	//	defaultValue=XExpression)? ";"? | "{" "get" get=XBlockExpression ("set" set=XBlockExpression)? "}") //		|
	// //	 	(
	//
	//	//			(
	// //			{types::JvmOperation.annotationInfo = current} modifiers+=CommonModifier*
	//
	//	//			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //			( 
	//
	//	//			   (returnType=JvmTypeReference =>(simpleName=ValidID | ('operator' simpleName= OpMulti))
	//
	//	//			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	)
	//
	//	//			   	 '(')
	// //			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	//	//			(expression=XBlockExpression 
	// //				 | ';'
	// //			)?
	// //		)
	// //		| (
	//
	//	//			{XtendEvent.annotationInfo = current} modifiers+=CommonModifier*
	//
	//	//			'event' type=JvmTypeReference name=ValidID ';'
	// //		)
	// | {types::JvmOperation.annotationInfo=current}
	//	modifiers+=CommonModifier*
	//	//			modifiers+=MethodModifier? (modifiers+=CommonModifier / * | modifiers+=MethodModifier * /)* 
	// function=XClosure |
	//	{types::JvmConstructor.annotationInfo=current} modifiers+=CommonModifier* "constructor" ("<"
	//	typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? "(" (parameters+=Parameter (","
	//	parameters+=Parameter)*)? ")" expression=XBlockExpression);
	public SsGrammarAccess.MemberElements getMemberAccess() {
		return gaSs.getMemberAccess();
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	////XFunctionDeclaration:XFunctionDeclaration
	// //		'function' 
	//
	////		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	//
	////		 (name=ValidID | (operator?='operator' name= OpMulti))?
	//
	////		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
	//
	////			(':' returnType=JvmTypeReference)?
	// //;
	// //XClosure returns xbase::XExpression:
	// //	{xbase::XClosure}
	//
	////	(exported?='export')? 'function' 
	//
	////		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	//
	////		 (name=ValidID | (operator?='operator' name= (OpAdd | OpMulti| BinaryBitwiseOp| ShiftOp)))?
	//
	////		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')'
	//
	////			(':' returnType=JvmTypeReference)?
	// //		
	// //		(expression=XBlockExpression 
	// //			| ';'
	// //		) 
	// //	;
	// XClosure
	//returns xbase::XExpression:
	//	{xbase::XClosure} exported?="export"? "function" ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? name=FunctionID? "(" (declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? ")" (":" returnType=JvmTypeReference)? (expression=XBlockExpression
	//	| ";");
	public SsGrammarAccess.XClosureElements getXClosureAccess() {
		return gaSs.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//FunctionID:
	//	ValidID | Operators;
	public SsGrammarAccess.FunctionIDElements getFunctionIDAccess() {
		return gaSs.getFunctionIDAccess();
	}
	
	public ParserRule getFunctionIDRule() {
		return getFunctionIDAccess().getRule();
	}

	////	| OpPostfix
	// Operators:
	//	OpMultiAssign //	| PrefixOp
	// | OpOr | OpAnd | OpEquality | OpCompare | ShiftOp | BinaryBitwiseOp | OpMulti | OpUnary
	//	| IndexOp;
	public SsGrammarAccess.OperatorsElements getOperatorsAccess() {
		return gaSs.getOperatorsAccess();
	}
	
	public ParserRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}

	//XtendEnumLiteral:
	//	name=ValidID;
	public SsGrammarAccess.XtendEnumLiteralElements getXtendEnumLiteralAccess() {
		return gaSs.getXtendEnumLiteralAccess();
	}
	
	public ParserRule getXtendEnumLiteralRule() {
		return getXtendEnumLiteralAccess().getRule();
	}

	//CommonModifier: //		'public' 
	// //		|
	// "private" //		| 'protected' 
	// //		| 'package' 
	// //		| 'abstract' 
	// //		| 'export'
	//
	//	//		| 'dispatch' 
	// | "static" | "const" | "override";
	public SsGrammarAccess.CommonModifierElements getCommonModifierAccess() {
		return gaSs.getCommonModifierAccess();
	}
	
	public ParserRule getCommonModifierRule() {
		return getCommonModifierAccess().getRule();
	}

	////FieldModifier:
	// //////		'val' | 
	// //		'const'
	// //;
	// //MethodModifier:
	// //		'function' | 'override' 
	// //; 
	//
	////MethodModifier:
	// ////		'def' | 
	// //		'override' 
	// //; 
	// //CreateExtensionInfo:
	//
	////	'create' (name=ValidID ':')? createExpression=XExpression
	// //;
	// //	| 'create' 
	// //	| 'annotation'
	// ValidID:
	//	ID;
	public SsGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaSs.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	////	| 'abstract' 
	// //	| 'annotation' 
	// //	| 'class' 
	// //	| 'create' 
	// //	| 'def' 
	// //	| 'dispatch' 
	// //	| 'enum'
	//
	//// 	| 'extends' 
	// // 	| 'extension' 
	// //   	| 'final'
	// //	| 'implements' 
	// //    | 'import' 
	// //    | 'interface' 
	//
	////    | 'override' 
	// //    | 'package' 
	// //    | 'public'
	// //	| 'private' 
	// //   	| 'protected'
	// //	| 'static' 
	//
	////    | 'throws'
	// FeatureCallID:
	//	ID;
	public SsGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaSs.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	////Parameter returns XtendParameter:
	// //	annotations+=XAnnotation* (extension?='extension' annotations+=XAnnotation*)?  
	//
	////	parameterType=JvmTypeReference varArg?='...'? name=ValidID;
	// Parameter returns types::JvmFormalParameter:
	//	annotations+=XAnnotation* parameterType=JvmTypeReference varArg?="..."? name=ValidID;
	public SsGrammarAccess.ParameterElements getParameterAccess() {
		return gaSs.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	////XVariableDeclaration returns xbase::XExpression:
	// //	=>({XtendVariableDeclaration}
	//
	////	(((writeable?='var'|'val') extension?='extension'?) | (extension?='extension' (writeable?='var'|'val'))))
	//
	////	(=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	//
	////XVariableDeclaration returns xbase::XExpression:
	// //	{xbase::XVariableDeclaration}
	//
	////	(exported?='export')? (writeable?='const')? 'var' (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	//
	//XVariableDeclaration returns xbase::XExpression:
	//	{xbase::XVariableDeclaration} exported?="export"? writeable?="const"? (=> (type=JvmTypeReference name=ValidID) |
	//	name=ValidID) ("=" right=XExpression)?;
	public SsGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaSs.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//SimpleStringLiteral returns xbase::XExpression:
	//	{xbase::XStringLiteral} value=STRING;
	public SsGrammarAccess.SimpleStringLiteralElements getSimpleStringLiteralAccess() {
		return gaSs.getSimpleStringLiteralAccess();
	}
	
	public ParserRule getSimpleStringLiteralRule() {
		return getSimpleStringLiteralAccess().getRule();
	}

	////XClosure returns xbase::XExpression:
	// //	=>({xbase::XClosure} 
	// //	'function' )
	//
	////		=>('('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')' //explicitSyntax?='|'
	//
	////		)? 
	// //		expression=XExpression 
	// //	;
	// //XClosure returns xbase::XExpression:
	// //	=>({xbase::XClosure} 
	//
	//////	'function'? 
	//
	////		'('(declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? ')' explicitSyntax?='==>')
	//
	////		
	// //		expression=XExpression 
	// //	;
	// //RichString returns xbase::XExpression:
	// //	{RichString} ( 
	//
	////	  expressions+=RichStringLiteral |
	// //	  expressions+=RichStringLiteralStart expressions+=RichStringPart? 
	//
	////	  	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* 
	//
	////	  expressions+=RichStringLiteralEnd
	// //	)
	// //;
	// //
	// //RichStringLiteral returns xbase::XExpression :
	//
	////	{RichStringLiteral} value=RICH_TEXT
	// //;
	// //
	// //RichStringLiteralStart returns xbase::XExpression :
	//
	////	{RichStringLiteral} value=RICH_TEXT_START
	// //; 
	// //
	// //RichStringLiteralInbetween returns xbase::XExpression :
	//
	////	{RichStringLiteral} 
	// //	( value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN )
	// //; 
	// //
	//
	////RichStringLiteralEnd returns xbase::XExpression :
	// //	{RichStringLiteral} 
	//
	////	( value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END )
	// //; 
	// //
	// //InternalRichString returns xbase::XExpression:
	//
	////	{RichString} (
	//
	////		expressions+=RichStringLiteralInbetween (expressions+=RichStringPart? expressions+=RichStringLiteralInbetween)*
	//
	////	)
	// //;
	// //
	// //RichStringPart returns xbase::XExpression:
	// //	XExpressionInsideBlock |
	// //	RichStringForLoop |
	//
	////	RichStringIf
	// //;
	// //
	// //RichStringForLoop returns xbase::XExpression:
	// //	{RichStringForLoop}
	//
	////	"FOR" declaredParam=JvmFormalParameter ':' forExpression=XExpression
	// //		("BEFORE" before=XExpression)?
	//
	////		("SEPARATOR" separator=XExpression)?
	// //		("AFTER" after=XExpression)?
	// //		eachExpression=InternalRichString
	//
	////	"ENDFOR"
	// //;
	// //
	// //RichStringIf returns xbase::XExpression :
	// //	{RichStringIf}
	// //	"IF" if=XExpression
	//
	////		then=InternalRichString
	// //		elseIfs+=RichStringElseIf*
	// //	("ELSE" 
	// //		else=InternalRichString)?
	// //	"ENDIF"
	//
	////;
	// //
	// //RichStringElseIf returns RichStringElseIf:
	// //	"ELSEIF" if=XExpression then=InternalRichString
	// //;
	//
	//terminal ID:
	//	"^"? (IDENTIFIER_START | UNICODE_ESCAPE) (IDENTIFIER_PART | UNICODE_ESCAPE)*;
	public TerminalRule getIDRule() {
		return gaSs.getIDRule();
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return gaSs.getHEX_DIGITRule();
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" (HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?)?;
	public TerminalRule getUNICODE_ESCAPERule() {
		return gaSs.getUNICODE_ESCAPERule();
	} 

	////terminal RICH_TEXT : "'''" IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF);
	//
	////terminal RICH_TEXT_START : "'''" IN_RICH_STRING* ("'" "'"?)? '�';
	//
	////terminal RICH_TEXT_END : '�' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF) ;
	//
	////terminal RICH_TEXT_INBETWEEN : '�' IN_RICH_STRING* ("'" "'"?)? '�';
	//
	////terminal COMMENT_RICH_TEXT_INBETWEEN: "��" !('\n'|'\r')* ('\r'? '\n' IN_RICH_STRING* ("'" "'"?)? '�')?; 
	//
	////terminal COMMENT_RICH_TEXT_END: "��" !('\n'|'\r')* (('\r'? '\n' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF)) | EOF); 
	//
	////
	// //terminal fragment IN_RICH_STRING : 
	// //	  "''" !('�'|"'") 
	// //	| "'" !('�'|"'")
	// //	| !('�'|"'");
	// terminal
	//fragment IDENTIFIER_START:
	//	"$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" |
	//	"ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
	//	"Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ" |
	//	"ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" | "ऽ" |
	//	"ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳" |
	//	"ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ" |
	//	"એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" |
	//	"ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" |
	//	"ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
	//	"వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
	//	"എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ" |
	//	"฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ະ" |
	//	"າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" |
	//	"ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ" |
	//	"ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
	//	"ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ" |
	//	"ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ" |
	//	"៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" |
	//	"Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" |
	//	"ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" | "ℇ" |
	//	"ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" |
	//	"々".."〇" | "〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" |
	//	"ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ" |
	//	"שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴" |
	//	"﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" |
	//	"ￚ".."ￜ" | "￠".."￡" | "￥".."￦";
	public TerminalRule getIDENTIFIER_STARTRule() {
		return gaSs.getIDENTIFIER_STARTRule();
	} 

	//terminal fragment IDENTIFIER_PART:
	//	IDENTIFIER_START | IDENTIFIER_PART_IMPL;
	public TerminalRule getIDENTIFIER_PARTRule() {
		return gaSs.getIDENTIFIER_PARTRule();
	} 

	//terminal fragment IDENTIFIER_PART_IMPL:
	//	" ".."\b" | "".."" | "0".."9" | "".."" | "­" | "̀".."͗" | "͝".."ͯ" | "҃".."҆" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" |
	//	"ֿ" | "ׁ".."ׂ" | "ׄ" | "؀".."؃" | "ؐ".."ؕ" | "ً".."٘" | "٠".."٩" | "ٰ" | "ۖ".."۝" | "۟".."ۤ" | "ۧ".."ۨ" | "۪".."ۭ" |
	//	"۰".."۹" | "܏" | "ܑ" | "ܰ".."݊" | "ަ".."ް" | "ँ".."ः" | "़" | "ा".."्" | "॑".."॔" | "ॢ".."ॣ" | "०".."९" | "ঁ".."ঃ" |
	//	"়" | "া".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ৢ".."ৣ" | "০".."৯" | "ਁ".."ਃ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍" |
	//	"੦".."ੱ" | "ઁ".."ઃ" | "઼" | "ા".."ૅ" | "ે".."ૉ" | "ો".."્" | "ૢ".."ૣ" | "૦".."૯" | "ଁ".."ଃ" | "଼" | "ା".."ୃ" |
	//	"େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "୦".."୯" | "ஂ" | "ா".."ூ" | "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "ఁ".."ః" |
	//	"ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "౦".."౯" | "ಂ".."ಃ" | "಼" | "ಾ".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" |
	//	"೦".."೯" | "ം".."ഃ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "൦".."൯" | "ං".."ඃ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" |
	//	"ෲ".."ෳ" | "ั" | "ิ".."ฺ" | "็".."๎" | "๐".."๙" | "ັ" | "ິ".."ູ" | "ົ".."ຼ" | "່".."ໍ" | "໐".."໙" | "༘".."༙" |
	//	"༠".."༩" | "༵" | "༷" | "༹" | "༾".."༿" | "ཱ".."྄" | "྆".."྇" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "ာ".."ဲ" | "ံ".."္" |
	//	"၀".."၉" | "ၖ".."ၙ" | "፩".."፱" | "ᜒ".."᜔" | "ᜲ".."᜴" | "ᝒ".."ᝓ" | "ᝲ".."ᝳ" | "឴".."៓" | "៝" | "០".."៩" | "᠋".."᠍" |
	//	"᠐".."᠙" | "ᢩ" | "ᤠ".."ᤫ" | "ᤰ".."᤻" | "᥆".."᥏" | "‌".."‏" | "‪".."‮" | "⁠".."⁣" | "⁪".."⁯" | "⃐".."⃜" | "⃡" |
	//	"⃥".."⃪" | "〪".."〯" | "゙".."゚" | "ﬞ" | "︀".."️" | "︠".."︣" | "﻿" | "０".."９" | "￹".."￻";
	public TerminalRule getIDENTIFIER_PART_IMPLRule() {
		return gaSs.getIDENTIFIER_PART_IMPLRule();
	} 

	////XAnnotation :
	// //	{XAnnotation}
	// //	'@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
	// //		(
	//
	////			elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* 
	//
	////		|	value=XAnnotationElementValue
	// //		)?
	// //	')')?
	// //;
	// //
	// //XAnnotationElementValuePair :
	//
	////	=>(element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue	
	// //;
	// //
	//
	////XAnnotationElementValue returns xbase::XExpression :
	// //	XAnnotation |
	//
	////	{xbase::XListLiteral} =>('#' '[' elements+=XAnnotation) (',' elements+=XAnnotation )* ']' |
	// //	XExpression
	// //;
	//
	//XAnnotation returns types::JvmAnnotationReference:
	//	{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("("
	//	(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaSs.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//JvmAnnotationValue returns types::JvmAnnotationValue:
	//	=> (operation=[types::JvmOperation|ValidID] "=") value=XLiteral;
	public XbaseWithAnnotationsGrammarAccess.JvmAnnotationValueElements getJvmAnnotationValueAccess() {
		return gaSs.getJvmAnnotationValueAccess();
	}
	
	public ParserRule getJvmAnnotationValueRule() {
		return getJvmAnnotationValueAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaSs.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	////XAssignment returns XExpression :
	//
	////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	//
	////	XOrExpression (
	//
	////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//
	////	)?;
	// XAssignment returns XExpression:
	////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	// XMultiAssignment (=>
	//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaSs.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaSs.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XMultiAssignment returns XExpression:
	//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XOrExpression)*;
	public XbaseGrammarAccess.XMultiAssignmentElements getXMultiAssignmentAccess() {
		return gaSs.getXMultiAssignmentAccess();
	}
	
	public ParserRule getXMultiAssignmentRule() {
		return getXMultiAssignmentAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaSs.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaSs.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaSs.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaSs.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaSs.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaSs.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XBitwiseExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaSs.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpMultiAssign:
	//	"*=" //	| '<' '<='
	// //	| '>' '>='
	// //	| '>' '>' '>='
	// //	| '>' '>'? '>='
	// //	| '<<=' 
	// //	| '>>='
	// //	| '>>>='
	// |
	//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaSs.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//ShiftOp: //	 '>' '>'
	// //	| '>' '>' '>'
	// //	| '<' '<'
	// ">" => (">" ">") | ">" => ">" | "<" => "<";
	public XbaseGrammarAccess.ShiftOpElements getShiftOpAccess() {
		return gaSs.getShiftOpAccess();
	}
	
	public ParserRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaSs.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	////OpMultiAssign:
	// //	'+=' 
	// //	| '-=' 
	// //	| '*=' 
	// //	| '/=' 
	// //	| '%=' 
	// //	|  ('<' '<=')
	// //	|  ('>' '>'? '>=')
	//
	////	| '&='
	// //	| '^='
	// //	| '|='
	// //	| '='
	// //	;
	// //XOtherOperatorExpression returns XExpression:
	//
	////	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	////	rightOperand=XAdditiveExpression)*;
	// //
	// //OpOther:
	// ////	  '->' 
	// ////	| 
	// //	'..<'
	// //	| '>' '..'
	// //	| '..'
	//
	//////	| '=>' 
	// //	| '>' (=>('>' '>') | '>') 
	// //	| '<' (=>('<' '<') | '<')
	// ////	| '<>'
	// //	//| '?:' 
	// //	| '<=>'
	//
	////	;
	// XBitwiseExpression returns XExpression:
	//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
	//	rightOperand=XShiftExpression)*;
	public XbaseGrammarAccess.XBitwiseExpressionElements getXBitwiseExpressionAccess() {
		return gaSs.getXBitwiseExpressionAccess();
	}
	
	public ParserRule getXBitwiseExpressionRule() {
		return getXBitwiseExpressionAccess().getRule();
	}

	//BinaryBitwiseOp:
	//	"&" | "|" | "^";
	public XbaseGrammarAccess.BinaryBitwiseOpElements getBinaryBitwiseOpAccess() {
		return gaSs.getBinaryBitwiseOpAccess();
	}
	
	public ParserRule getBinaryBitwiseOpRule() {
		return getBinaryBitwiseOpAccess().getRule();
	}

	//XShiftExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XShiftExpressionElements getXShiftExpressionAccess() {
		return gaSs.getXShiftExpressionAccess();
	}
	
	public ParserRule getXShiftExpressionRule() {
		return getXShiftExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaSs.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaSs.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	////XKeyValuePair returns XExpression:
	// //	XTernaryOperation (=>({XKeyValuePair.key=current} ':')  value = XExpression)
	//
	////;
	// //XKeyValuePair returns XExpression:
	//
	////	XStringLiteral (=>({XKeyValuePair.key=current} ':')  value = XTernaryOperation)
	// //;
	// //	ternary operator
	//
	//XTernaryOperation returns XExpression:
	//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
	//	falseOperand=XExpression)*;
	public XbaseGrammarAccess.XTernaryOperationElements getXTernaryOperationAccess() {
		return gaSs.getXTernaryOperationAccess();
	}
	
	public ParserRule getXTernaryOperationRule() {
		return getXTernaryOperationAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XPostfixOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaSs.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" //	| '**' 
	// | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaSs.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	////postfix for incessantly
	// XPostfixOperation returns XExpression:
	//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaSs.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//////prefix for incessantly
	// //XPrefixOperation returns XExpression:
	//
	////	{XPrefixOperation} feature=[types::JvmIdentifiableElement|PrefixOp] operand=XPrefixOperation
	// //	|XUnaryOperation
	//
	////	;
	// PrefixOp:
	//	"++" | "--";
	public XbaseGrammarAccess.PrefixOpElements getPrefixOpAccess() {
		return gaSs.getPrefixOpAccess();
	}
	
	public ParserRule getPrefixOpRule() {
		return getPrefixOpAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaSs.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	////OpUnary:
	// //	"!" | "-" | "+";
	// //	|PrefixOp
	// OpUnary:
	//	"!" | "-" | "+" | "~" | "++" | "--";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaSs.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	////DeleteExpression returns XExpression:
	// //	'delete' 
	// //;
	// XCastedExpression returns XExpression:
	//	XIndexOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaSs.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XIndexOperation returns XExpression:
	//	XMemberFeatureCall (=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp])
	//	index=XExpression "]")* //(=>'=' value = XExpression)
	//;
	public XbaseGrammarAccess.XIndexOperationElements getXIndexOperationAccess() {
		return gaSs.getXIndexOperationAccess();
	}
	
	public ParserRule getXIndexOperationRule() {
		return getXIndexOperationAccess().getRule();
	}

	//IndexOp:
	//	"[";
	public XbaseGrammarAccess.IndexOpElements getIndexOpAccess() {
		return gaSs.getIndexOpAccess();
	}
	
	public ParserRule getIndexOpRule() {
		return getIndexOpAccess().getRule();
	}

	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XExpressionCall returns XExpression:
	// //		XMemberFeatureCall
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')')
	// //;
	// //
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	// //		)*;
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')'
	//
	////	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ']'
	//
	////	|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] 
	// //		(
	// //			(
	// //			=>explicitOperationCall?='(' 
	//
	////				(
	// //				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			
	// ////			|
	// //			(
	// //			=>indexedOperation?='[' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			']')?
	// //			
	// //		)
	//
	////		)*;
	// XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")"
	//	//	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
	//
	//	//		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ']'
	//
	//	//	|=>({XAssignment.assignable=current} 't=') value=XAssignment
	// | => ({XAssignment.assignable=current} ("." |
	//	explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? //			(
	//
	//	//			=>indexedOperation?='[' 
	// //				(
	//
	//	//				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			']')?
	//)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaSs.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	////	|
	// //	XKeyValuePair
	// XLiteral returns XExpression: //	XCollectionLiteral |
	// XObjectLiteral | XArrayLiteral | XClosure
	//	| XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaSs.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////		(
	// //			{types::JvmOperation.annotationInfo = current} modifiers+=CommonModifier*
	//
	////			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //			( 
	//
	//////				=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  |
	//
	//////			   =>
	// //			   (returnType=JvmTypeReference =>(simpleName=ValidID | ('operator' simpleName= OpMulti))
	//
	////			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	)
	//
	////			   	 '(')
	// ////			  | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  | name=ValidID '('
	//
	////			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	//////			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	//
	////			(expression=XBlockExpression 
	// ////				| expression=RichString
	// //				 | ';'
	// //			)?
	// //		)
	//
	////	XFunctionDeclaration returns XExpression:
	// //	{XFunctionDeclaration}
	// //	'function' (name=ValidID |
	//
	////	('operator' name= OpMulti))?
	// //			   	 '('
	//
	////			(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
	// //	body = XBlockExpression
	//
	////;
	// //XExpressionInClosure returns XExpression: 
	// //	{XBlockExpression}
	//
	////	(expressions+=XExpressionInsideBlock ';'?)*
	// //;
	// //XShortClosure returns XExpression:
	//
	////	=>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	//
	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaSs.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaSs.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	////XSwitchExpression returns XExpression:
	// //	{XSwitchExpression}
	//
	////	'switch' (=>(localVarName=ValidID ':')? switch=XExpression
	//
	////		| =>('(' localVarName=ValidID ':') switch=XExpression ')') '{'
	// //	(cases+=XCasePart)+
	//
	////	('default' ':' default=XExpression )?
	// //	'}';
	// //
	// //XCasePart:
	//
	////	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
	// //		':' then=XExpression ;
	// XSwitchExpression returns
	//XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaSs.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart: //	typeGuard=JvmTypeReference?
	// "case" case=XExpression ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaSs.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	//
	////	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
	// //		eachExpression=XExpression;
	//
	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' declaredParam=JvmFormalParameter 
	//
	////		((':' forExpression=XExpression )|
	// //		(';' condition+= XExpression ';' loop+=XExpression))
	// //		
	// //	')'
	//
	////		eachExpression=XExpression;
	// //XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' 
	//
	////		((inits +=(XVariableDeclaration | XExpression) (',' inits +=(XVariableDeclaration | XExpression))*)?  
	//
	////		=>('of' forExpression=XExpression )
	// //		|
	// //		=>(';' (condition+= XExpression)? ';' (loop+=XExpression)?))
	//
	////		
	// //	')'
	// //		eachExpression=XExpression
	// //	;
	// XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" (=> (init=XExpressionInsideBlock)? ";") (=> (condition=XExpression)? ";")
	//	loop=XExpression? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaSs.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XForEachLoopExpression returns XExpression:
	//	{XForEachExpression} "foreach" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForEachLoopExpressionElements getXForEachLoopExpressionAccess() {
		return gaSs.getXForEachLoopExpressionAccess();
	}
	
	public ParserRule getXForEachLoopExpressionRule() {
		return getXForEachLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaSs.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaSs.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	////XBlockExpression returns XExpression: 
	// //	{XBlockExpression}
	// //	'{'
	//
	////		(expressions+=XExpressionInsideBlock ';'?)*
	// //	'}';
	// XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* / * | ','* / "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaSs.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	////XExpressionInsideBlock returns XExpression:
	// //	XVariableDeclaration | XExpression
	// //	;
	// XExpressionInsideBlock
	//returns XExpression:
	//	XVariableDeclarationList | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaSs.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID) | name=ValidID))  ('=' right=XExpression)?
	// //		;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (=> array?= '[' size+= XExpression ']' ('[' size+= XExpression ']')*)?) | name=ValidID) ('=' right=XExpression)?
	//
	////		);
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) =>('=' right=XExpression)?;
	//
	////XVariableDeclarationList returns XExpression:
	// //	{XVariableDeclarationList}
	//
	////	(writeable?='var'|'val') declarations += XVariableDeclaration (',' declarations += XVariableDeclaration)*
	// //;
	//
	//XVariableDeclarationList returns XExpression:
	//	{XVariableDeclarationList} "var" declarations+=XVariableDeclaration ("," declarations+=XVariableDeclaration)*;
	public XbaseGrammarAccess.XVariableDeclarationListElements getXVariableDeclarationListAccess() {
		return gaSs.getXVariableDeclarationListAccess();
	}
	
	public ParserRule getXVariableDeclarationListRule() {
		return getXVariableDeclarationListAccess().getRule();
	}

	////XVariableDeclaraPart returns XVariableDeclaraPart:
	//
	////	((type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?
	// //;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID =>(arrayParts += XArrayPart)* ) | name=ValidID)   ('=' right=XExpression)?
	//
	////		;
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (arrayParts += XArrayPart)*) | name=ValidID) ('=' right=XExpression)?
	// //		);
	//
	////XArrayPart returns XArrayPart:
	// //	'[' size= XExpression ']'
	// //;
	//
	////JvmFormalParameter returns types::JvmFormalParameter:
	// //	(parameterType=JvmTypeReference)? name=ValidID;
	//
	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID ("=" defaultValue=XExpression)?;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaSs.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	////FullJvmFormalParameter returns types::JvmFormalParameter:
	// //	parameterType=JvmTypeReference name=ValidID;
	//
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaSs.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	////XFeatureCall returns XExpression:
	// //	{XFeatureCall}
	//
	////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	//
	////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	// //	(=>explicitOperationCall?='(' 
	// //		(
	//
	////		    featureCallArguments+=XShortClosure
	//
	////		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //		)? 
	// //	')')?
	//
	////	featureCallArguments+=XClosure?;
	// XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
	//	("," featureCallArguments+=XExpression)*)? ")")? //		(=>indexedOperation?='[' 
	// //			(
	//
	//	//			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //			)? 
	//
	//	//		']' =>(OpSingleAssign value=XExpression)?)?
	//;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaSs.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaSs.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaSs.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XObjectLiteral returns XExpression:
	//	{XObjectLiteral} "new" "{" properties+=XObjectLiteralPart ("," properties+=XObjectLiteralPart)* "}";
	public XbaseGrammarAccess.XObjectLiteralElements getXObjectLiteralAccess() {
		return gaSs.getXObjectLiteralAccess();
	}
	
	public ParserRule getXObjectLiteralRule() {
		return getXObjectLiteralAccess().getRule();
	}

	//XObjectLiteralPart:
	//	name=ID ":" value=XExpression;
	public XbaseGrammarAccess.XObjectLiteralPartElements getXObjectLiteralPartAccess() {
		return gaSs.getXObjectLiteralPartAccess();
	}
	
	public ParserRule getXObjectLiteralPartRule() {
		return getXObjectLiteralPartAccess().getRule();
	}

	//XArrayLiteral returns XExpression:
	//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
	public XbaseGrammarAccess.XArrayLiteralElements getXArrayLiteralAccess() {
		return gaSs.getXArrayLiteralAccess();
	}
	
	public ParserRule getXArrayLiteralRule() {
		return getXArrayLiteralAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaSs.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaSs.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaSs.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaSs.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaSs.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaSs.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XBreakExpression returns XExpression:
	//	{XBreakExpression} "break";
	public XbaseGrammarAccess.XBreakExpressionElements getXBreakExpressionAccess() {
		return gaSs.getXBreakExpressionAccess();
	}
	
	public ParserRule getXBreakExpressionRule() {
		return getXBreakExpressionAccess().getRule();
	}

	//XContinueExpression returns XExpression:
	//	{XContinueExpression} "continue";
	public XbaseGrammarAccess.XContinueExpressionElements getXContinueExpressionAccess() {
		return gaSs.getXContinueExpressionAccess();
	}
	
	public ParserRule getXContinueExpressionRule() {
		return getXContinueExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaSs.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaSs.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaSs.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaSs.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaSs.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaSs.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaSs.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaSs.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaSs.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaSs.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaSs.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaSs.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaSs.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaSs.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaSs.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaSs.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaSs.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaSs.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaSs.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	////XImportSection:
	// //	importDeclarations+=XImportDeclaration+;
	// //
	// //XImportDeclaration: 
	// //	'import' (
	//
	////		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedName] '.' '*') 
	//
	////		| importedType=[JvmDeclaredType|QualifiedName] 
	// //		| importedNamespace=QualifiedNameWithWildcard) 
	// //		';'
	//
	////;
	// XImportSection1:
	//	(importDeclarations+=XImportDeclaration1 ";"?)+;
	public XtypeGrammarAccess.XImportSection1Elements getXImportSection1Access() {
		return gaSs.getXImportSection1Access();
	}
	
	public ParserRule getXImportSection1Rule() {
		return getXImportSection1Access().getRule();
	}

	//XImportDeclaration1:
	//	"import" (("{" importItems+=XImportItem ("," importItems+=XImportItem)* "}" | importItems+=XImportItem) "from"
	//	importURI=STRING | "from" importURI=STRING "as" alias=ID);
	public XtypeGrammarAccess.XImportDeclaration1Elements getXImportDeclaration1Access() {
		return gaSs.getXImportDeclaration1Access();
	}
	
	public ParserRule getXImportDeclaration1Rule() {
		return getXImportDeclaration1Access().getRule();
	}

	//XImportItem:
	//	{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XImportItemElements getXImportItemAccess() {
		return gaSs.getXImportItemAccess();
	}
	
	public ParserRule getXImportItemRule() {
		return getXImportItemAccess().getRule();
	}

	////'import' {importId += [JvmIdentifiableElement|ID] (as name=ID)? (',' importId += [JvmIdentifiableElement|ID] (as name=ID)?)*  } from module1 
	//
	////import as name=ID from module
	// XExportSection:
	//	(exportDeclarations+=XExportDeclaration ";"?)+;
	public XtypeGrammarAccess.XExportSectionElements getXExportSectionAccess() {
		return gaSs.getXExportSectionAccess();
	}
	
	public ParserRule getXExportSectionRule() {
		return getXExportSectionAccess().getRule();
	}

	//XExportDeclaration:
	//	"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
	//
	//	//			(exportItems +=XExportItem)
	// //			|
	// //			wildcard?='*'
	// | "from" importURI=STRING "as" alias=ID);
	public XtypeGrammarAccess.XExportDeclarationElements getXExportDeclarationAccess() {
		return gaSs.getXExportDeclarationAccess();
	}
	
	public ParserRule getXExportDeclarationRule() {
		return getXExportDeclarationAccess().getRule();
	}

	//XExportItem:
	//	exportedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XExportItemElements getXExportItemAccess() {
		return gaSs.getXExportItemAccess();
	}
	
	public ParserRule getXExportItemRule() {
		return getXExportItemAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSs.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSs.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSs.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSs.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSs.getANY_OTHERRule();
	} 
}
