/*
* generated by Xtext
*/
package org.summer.dsl.xannotation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.summer.dsl.xbase.services.XbaseGrammarAccess;
import org.summer.dsl.xtype.services.XtypeGrammarAccess;

@Singleton
public class XbaseWithAnnotationsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmAnnotationReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnnotationJvmAnnotationTypeCrossReference_2_0 = (CrossReference)cAnnotationAssignment_2.eContents().get(0);
		private final RuleCall cAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAnnotationJvmAnnotationTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0 = (RuleCall)cValuesAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0 = (RuleCall)cValuesAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////XAnnotation :
		// //	{XAnnotation}
		// //	'@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
		// //		(
		//
		////			elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* 
		//
		////		|	value=XAnnotationElementValue
		// //		)?
		// //	')')?
		// //;
		// //
		// //XAnnotationElementValuePair :
		//
		////	=>(element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue	
		// //;
		// //
		//
		////XAnnotationElementValue returns xbase::XExpression :
		// //	XAnnotation |
		//
		////	{xbase::XListLiteral} =>('#' '[' elements+=XAnnotation) (',' elements+=XAnnotation )* ']' |
		// //	XExpression
		// //;
		//
		////XAnnotation returns types::JvmAnnotationReference:
		// //	{types::JvmAnnotationReference}
		//
		////	'@' annotation=[types::JvmAnnotationType | QualifiedName] (=>'('
		// //		(
		//
		////			values+=JvmAnnotationValue (',' values+=JvmAnnotationValue)* 
		// //		|	value=XLiteral
		// //		)?
		// //	')')?
		// //;
		// //
		//
		////JvmAnnotationValue returns types::JvmAnnotationValue:
		//
		////	=>(operation=[types::JvmOperation|ValidID] '=') value=XLiteral	
		// //;
		// XAnnotation returns
		//types::JvmAnnotationReference:
		//	{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("("
		//	(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?;
		public ParserRule getRule() { return rule; }

		//{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("(" (values+=JvmAnnotationValue
		//("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?
		public Group getGroup() { return cGroup; }

		//{types::JvmAnnotationReference}
		public Action getJvmAnnotationReferenceAction_0() { return cJvmAnnotationReferenceAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//annotation=[types::JvmAnnotationType|QualifiedName]
		public Assignment getAnnotationAssignment_2() { return cAnnotationAssignment_2; }

		//[types::JvmAnnotationType|QualifiedName]
		public CrossReference getAnnotationJvmAnnotationTypeCrossReference_2_0() { return cAnnotationJvmAnnotationTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1() { return cAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1; }

		//(=> "(" (values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//values+=JvmAnnotationValue
		public Assignment getValuesAssignment_3_1_0_0() { return cValuesAssignment_3_1_0_0; }

		//JvmAnnotationValue
		public RuleCall getValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0() { return cValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0; }

		//("," values+=JvmAnnotationValue)*
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }

		//","
		public Keyword getCommaKeyword_3_1_0_1_0() { return cCommaKeyword_3_1_0_1_0; }

		//values+=JvmAnnotationValue
		public Assignment getValuesAssignment_3_1_0_1_1() { return cValuesAssignment_3_1_0_1_1; }

		//JvmAnnotationValue
		public RuleCall getValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0() { return cValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0; }

		//value=XLiteral
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_3_1_1_0() { return cValueXLiteralParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class JvmAnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmAnnotationValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cFieldAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cFieldJvmFieldCrossReference_0_0_0_0 = (CrossReference)cFieldAssignment_0_0_0.eContents().get(0);
		private final RuleCall cFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1 = (RuleCall)cFieldJvmFieldCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//JvmAnnotationValue returns types::JvmAnnotationValue:
		//	=> (field=[types::JvmField|ValidID] "=") value=XLiteral;
		public ParserRule getRule() { return rule; }

		//=> (field=[types::JvmField|ValidID] "=") value=XLiteral
		public Group getGroup() { return cGroup; }

		//=> (field=[types::JvmField|ValidID] "=")
		public Group getGroup_0() { return cGroup_0; }

		//field=[types::JvmField|ValidID] "="
		public Group getGroup_0_0() { return cGroup_0_0; }

		//field=[types::JvmField|ValidID]
		public Assignment getFieldAssignment_0_0_0() { return cFieldAssignment_0_0_0; }

		//[types::JvmField|ValidID]
		public CrossReference getFieldJvmFieldCrossReference_0_0_0_0() { return cFieldJvmFieldCrossReference_0_0_0_0; }

		//ValidID
		public RuleCall getFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1() { return cFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }

		//value=XLiteral
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_1_0() { return cValueXLiteralParserRuleCall_1_0; }
	}
	
	
	private XAnnotationElements pXAnnotation;
	private JvmAnnotationValueElements pJvmAnnotationValue;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XbaseWithAnnotationsGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.summer.dsl.xannotation.XbaseWithAnnotations".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	////XAnnotation :
	// //	{XAnnotation}
	// //	'@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
	// //		(
	//
	////			elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* 
	//
	////		|	value=XAnnotationElementValue
	// //		)?
	// //	')')?
	// //;
	// //
	// //XAnnotationElementValuePair :
	//
	////	=>(element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue	
	// //;
	// //
	//
	////XAnnotationElementValue returns xbase::XExpression :
	// //	XAnnotation |
	//
	////	{xbase::XListLiteral} =>('#' '[' elements+=XAnnotation) (',' elements+=XAnnotation )* ']' |
	// //	XExpression
	// //;
	//
	////XAnnotation returns types::JvmAnnotationReference:
	// //	{types::JvmAnnotationReference}
	//
	////	'@' annotation=[types::JvmAnnotationType | QualifiedName] (=>'('
	// //		(
	//
	////			values+=JvmAnnotationValue (',' values+=JvmAnnotationValue)* 
	// //		|	value=XLiteral
	// //		)?
	// //	')')?
	// //;
	// //
	//
	////JvmAnnotationValue returns types::JvmAnnotationValue:
	//
	////	=>(operation=[types::JvmOperation|ValidID] '=') value=XLiteral	
	// //;
	// XAnnotation returns
	//types::JvmAnnotationReference:
	//	{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("("
	//	(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?;
	public XAnnotationElements getXAnnotationAccess() {
		return (pXAnnotation != null) ? pXAnnotation : (pXAnnotation = new XAnnotationElements());
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//JvmAnnotationValue returns types::JvmAnnotationValue:
	//	=> (field=[types::JvmField|ValidID] "=") value=XLiteral;
	public JvmAnnotationValueElements getJvmAnnotationValueAccess() {
		return (pJvmAnnotationValue != null) ? pJvmAnnotationValue : (pJvmAnnotationValue = new JvmAnnotationValueElements());
	}
	
	public ParserRule getJvmAnnotationValueRule() {
		return getJvmAnnotationValueAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	////XAssignment returns XExpression :
	//
	////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	//
	////	XOrExpression (
	//
	////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//
	////	)?;
	// XAssignment returns XExpression:
	////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	// XMultiAssignment (=>
	//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XMultiAssignment returns XExpression:
	//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XOrExpression)*;
	public XbaseGrammarAccess.XMultiAssignmentElements getXMultiAssignmentAccess() {
		return gaXbase.getXMultiAssignmentAccess();
	}
	
	public ParserRule getXMultiAssignmentRule() {
		return getXMultiAssignmentAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XBitwiseExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpMultiAssign:
	//	"*=" //	| '<' '<='
	// //	| '>' '>='
	// //	| '>' '>' '>='
	// //	| '>' '>'? '>='
	// //	| '<<=' 
	// //	| '>>='
	// //	| '>>>='
	// |
	//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//ShiftOp: //	 '>' '>'
	// //	| '>' '>' '>'
	// //	| '<' '<'
	// ">" => (">" ">") | ">" => ">" | "<" => "<";
	public XbaseGrammarAccess.ShiftOpElements getShiftOpAccess() {
		return gaXbase.getShiftOpAccess();
	}
	
	public ParserRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	////OpMultiAssign:
	// //	'+=' 
	// //	| '-=' 
	// //	| '*=' 
	// //	| '/=' 
	// //	| '%=' 
	// //	|  ('<' '<=')
	// //	|  ('>' '>'? '>=')
	//
	////	| '&='
	// //	| '^='
	// //	| '|='
	// //	| '='
	// //	;
	// //XOtherOperatorExpression returns XExpression:
	//
	////	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	////	rightOperand=XAdditiveExpression)*;
	// //
	// //OpOther:
	// ////	  '->' 
	// ////	| 
	// //	'..<'
	// //	| '>' '..'
	// //	| '..'
	//
	//////	| '=>' 
	// //	| '>' (=>('>' '>') | '>') 
	// //	| '<' (=>('<' '<') | '<')
	// ////	| '<>'
	// //	//| '?:' 
	// //	| '<=>'
	//
	////	;
	// XBitwiseExpression returns XExpression:
	//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
	//	rightOperand=XShiftExpression)*;
	public XbaseGrammarAccess.XBitwiseExpressionElements getXBitwiseExpressionAccess() {
		return gaXbase.getXBitwiseExpressionAccess();
	}
	
	public ParserRule getXBitwiseExpressionRule() {
		return getXBitwiseExpressionAccess().getRule();
	}

	//BinaryBitwiseOp:
	//	"&" | "|" | "^";
	public XbaseGrammarAccess.BinaryBitwiseOpElements getBinaryBitwiseOpAccess() {
		return gaXbase.getBinaryBitwiseOpAccess();
	}
	
	public ParserRule getBinaryBitwiseOpRule() {
		return getBinaryBitwiseOpAccess().getRule();
	}

	//XShiftExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XShiftExpressionElements getXShiftExpressionAccess() {
		return gaXbase.getXShiftExpressionAccess();
	}
	
	public ParserRule getXShiftExpressionRule() {
		return getXShiftExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	////XKeyValuePair returns XExpression:
	// //	XTernaryOperation (=>({XKeyValuePair.key=current} ':')  value = XExpression)
	//
	////;
	// //XKeyValuePair returns XExpression:
	//
	////	XStringLiteral (=>({XKeyValuePair.key=current} ':')  value = XTernaryOperation)
	// //;
	// //	ternary operator
	//
	//XTernaryOperation returns XExpression:
	//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
	//	falseOperand=XExpression)*;
	public XbaseGrammarAccess.XTernaryOperationElements getXTernaryOperationAccess() {
		return gaXbase.getXTernaryOperationAccess();
	}
	
	public ParserRule getXTernaryOperationRule() {
		return getXTernaryOperationAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XPostfixOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" //	| '**' 
	// | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	////postfix for incessantly
	// XPostfixOperation returns XExpression:
	//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//////prefix for incessantly
	// //XPrefixOperation returns XExpression:
	//
	////	{XPrefixOperation} feature=[types::JvmIdentifiableElement|PrefixOp] operand=XPrefixOperation
	// //	|XUnaryOperation
	//
	////	;
	// PrefixOp:
	//	"++" | "--";
	public XbaseGrammarAccess.PrefixOpElements getPrefixOpAccess() {
		return gaXbase.getPrefixOpAccess();
	}
	
	public ParserRule getPrefixOpRule() {
		return getPrefixOpAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	////OpUnary:
	// //	"!" | "-" | "+";
	// //	|PrefixOp
	// OpUnary:
	//	"!" | "-" | "+" | "~" | "++" | "--";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	////DeleteExpression returns XExpression:
	// //	'delete' 
	// //;
	// XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	////XIndexOperation returns XExpression:
	//
	//// 	XMemberFeatureCall (=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp]) index=XExpression "]" )* //(=>'=' value = XExpression)
	//
	////;
	// //IndexOp:
	// //	'['
	// //;
	// //XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XExpressionCall returns XExpression:
	// //		XMemberFeatureCall
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')')
	// //;
	// //
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	// //		)*;
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')'
	//
	////	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ']'
	//
	////	|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] 
	// //		(
	// //			(
	// //			=>explicitOperationCall?='(' 
	//
	////				(
	// //				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			
	// ////			|
	// //			(
	// //			=>indexedOperation?='[' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			']')?
	// //			
	// //		)
	//
	////		)*;
	// //XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')'
	//
	////	|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] 
	// //		(
	// //			(
	// //			=>explicitOperationCall?='(' 
	//
	////				(
	// //				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////		)
	// //		)*;
	// XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")"
	//	//	|=>({XAssignment.assignable=current} indexedOperation ?= '[' index = XExpression ']' OpSingleAssign) value=XAssignment
	//
	//	| => ({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?="[") (memberCallArguments+=XExpression (","
	//	memberCallArguments+=XExpression)*)? "]" | => ({XAssignment.assignable=current} "." / *|explicitStatic?="::" * /
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." / *|explicitStatic?="::" * / | nullSafe?="?.")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	////XMemberFeatureCall1 returns XExpression:
	// //	XPrimaryExpression
	// //	(=>({XMemberFeatureCall.memberCallTarget=current}
	//
	////		(=>explicitOperationCall?="(")
	// //	) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')'
	// //		)*
	// //	;
	//
	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XFeatureCall | XLiteral | XBlockExpression | XSwitchExpression | XIfExpression |
	//	XForLoopExpression | XForEachLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression |
	//	XReturnExpression | XTryCatchFinallyExpression | XBreakExpression | XContinueExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	////	|
	// //	XKeyValuePair
	// XLiteral returns XExpression: //	XCollectionLiteral |
	// XObjectLiteral | XStructLiteral |
	//	XArrayLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral |
	//	XTemplateLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////XCollectionLiteral:
	// //	XSetLiteral 
	// //	| 
	// //	XListLiteral
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XListLiteral:
	//
	////	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	// //;
	// //XListLiteral:
	//
	////	{XListLiteral} '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	// //;
	//
	////XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'[') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpressionInClosure 
	// //	']';
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'lambda') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpressionInClosure 
	// //	']'
	// //	;
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	//
	////	'lambda' '{') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpression 
	// //	'}'
	// //	;
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'lambda' '{') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpression 
	// //	'}'
	// //	;
	// XClosure returns XExpression:
	//	{XClosure} "function" (name=ValidID | operator?="operator" name=OpMulti)? => ("("
	//	(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
	//	returnType=JvmTypeReference)?) expression=XExpression;
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	////		(
	// //			{types::JvmOperation.annotationInfo = current} modifiers+=CommonModifier*
	//
	////			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //			( 
	//
	//////				=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  |
	//
	//////			   =>
	// //			   (returnType=JvmTypeReference =>(simpleName=ValidID | ('operator' simpleName= OpMulti))
	//
	////			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	)
	//
	////			   	 '(')
	// ////			  | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  | name=ValidID '('
	//
	////			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	//////			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	//
	////			(expression=XBlockExpression 
	// ////				| expression=RichString
	// //				 | ';'
	// //			)?
	// //		)
	//
	////	XFunctionDeclaration returns XExpression:
	// //	{XFunctionDeclaration}
	// //	'function' (name=ValidID |
	//
	////	('operator' name= OpMulti))?
	// //			   	 '('
	//
	////			(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
	// //	body = XBlockExpression
	//
	////;
	// //XExpressionInClosure returns XExpression: 
	// //	{XBlockExpression}
	//
	////	(expressions+=XExpressionInsideBlock ';'?)*
	// //;
	// //XShortClosure returns XExpression:
	//
	////	=>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	//
	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	////XSwitchExpression returns XExpression:
	// //	{XSwitchExpression}
	//
	////	'switch' (=>(localVarName=ValidID ':')? switch=XExpression
	//
	////		| =>('(' localVarName=ValidID ':') switch=XExpression ')') '{'
	// //	(cases+=XCasePart)+
	//
	////	('default' ':' default=XExpression )?
	// //	'}';
	// //
	// //XCasePart:
	//
	////	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
	// //		':' then=XExpression ;
	// XSwitchExpression returns
	//XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart: //	typeGuard=JvmTypeReference?
	// "case" case=XExpression ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	//
	////	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
	// //		eachExpression=XExpression;
	//
	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' declaredParam=JvmFormalParameter 
	//
	////		((':' forExpression=XExpression )|
	// //		(';' condition+= XExpression ';' loop+=XExpression))
	// //		
	// //	')'
	//
	////		eachExpression=XExpression;
	// //XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' 
	//
	////		((inits +=(XVariableDeclaration | XExpression) (',' inits +=(XVariableDeclaration | XExpression))*)?  
	//
	////		=>('of' forExpression=XExpression )
	// //		|
	// //		=>(';' (condition+= XExpression)? ';' (loop+=XExpression)?))
	//
	////		
	// //	')'
	// //		eachExpression=XExpression
	// //	;
	// XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" (=> (init=XExpressionInsideBlock)? ";") (=> (condition=XExpression)? ";")
	//	loop=XExpression? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XForEachLoopExpression returns XExpression:
	//	{XForEachExpression} "foreach" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForEachLoopExpressionElements getXForEachLoopExpressionAccess() {
		return gaXbase.getXForEachLoopExpressionAccess();
	}
	
	public ParserRule getXForEachLoopExpressionRule() {
		return getXForEachLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	////XBlockExpression returns XExpression: 
	// //	{XBlockExpression}
	// //	'{'
	//
	////		(expressions+=XExpressionInsideBlock ';'?)*
	// //	'}';
	// XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* / * | ','* / "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	////XExpressionInsideBlock returns XExpression:
	// //	XVariableDeclaration | XExpression
	// //	;
	// XExpressionInsideBlock
	//returns XExpression:
	//	XVariableDeclarationList | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID) | name=ValidID))  ('=' right=XExpression)?
	// //		;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (=> array?= '[' size+= XExpression ']' ('[' size+= XExpression ']')*)?) | name=ValidID) ('=' right=XExpression)?
	//
	////		);
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) =>('=' right=XExpression)?;
	//
	////XVariableDeclarationList returns XExpression:
	// //	{XVariableDeclarationList}
	//
	////	(writeable?='var'|'val') declarations += XVariableDeclaration (',' declarations += XVariableDeclaration)*
	// //;
	//
	//XVariableDeclarationList returns XExpression:
	//	{XVariableDeclarationList} exported?="export"? ("var" | writeable?="const") declarations+=XVariableDeclaration (","
	//	declarations+=XVariableDeclaration)*;
	public XbaseGrammarAccess.XVariableDeclarationListElements getXVariableDeclarationListAccess() {
		return gaXbase.getXVariableDeclarationListAccess();
	}
	
	public ParserRule getXVariableDeclarationListRule() {
		return getXVariableDeclarationListAccess().getRule();
	}

	////XVariableDeclaration returns XExpression: 
	// //	{XVariableDeclaration}
	//
	////	type=JvmTypeReference name=ValidID =>('=' right=XExpression)?
	// //;
	// XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	////XVariableDeclaraPart returns XVariableDeclaraPart:
	//
	////	((type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?
	// //;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID =>(arrayParts += XArrayPart)* ) | name=ValidID)   ('=' right=XExpression)?
	//
	////		;
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (arrayParts += XArrayPart)*) | name=ValidID) ('=' right=XExpression)?
	// //		);
	//
	////XArrayPart returns XArrayPart:
	// //	'[' size= XExpression ']'
	// //;
	//
	////JvmFormalParameter returns types::JvmFormalParameter:
	// //	(parameterType=JvmTypeReference)? name=ValidID;
	//
	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID ("=" defaultValue=XExpression)?;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	////FullJvmFormalParameter returns types::JvmFormalParameter:
	// //	parameterType=JvmTypeReference name=ValidID;
	//
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	////XFeatureCall returns XExpression:
	// //	{XFeatureCall}
	//
	////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	//
	////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	// //	(=>explicitOperationCall?='(' 
	// //		(
	//
	////		    featureCallArguments+=XShortClosure
	//
	////		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //		)? 
	// //	')')?
	//
	////	featureCallArguments+=XClosure?;
	// XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
	//	("," featureCallArguments+=XExpression)*)? ")")? //		(=>indexedOperation?='[' 
	// //			(
	//
	//	//			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //			)? 
	//
	//	//		']' =>(OpSingleAssign value=XExpression)?)?
	//;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	////	| 'extends' 
	// //	| 'static' 
	// //	| 'import' 
	// //	| 'extension'
	// FeatureCallID:
	//	ValidID;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	////XObjectLiteral returns XExpression:
	// //	{XObjectLiteral}
	// //	'new' '{'
	//
	////		properties +=XObjectLiteralPart (',' properties +=XObjectLiteralPart)*
	// //	'}'
	// //;
	// //
	//
	////XObjectLiteralPart returns types::JvmMember:
	// //	{XObjectLiteralPart}
	// //	simpleName=ID ':' value=XExpression
	// //;
	//
	//XObjectLiteral returns XExpression:
	//	{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}";
	public XbaseGrammarAccess.XObjectLiteralElements getXObjectLiteralAccess() {
		return gaXbase.getXObjectLiteralAccess();
	}
	
	public ParserRule getXObjectLiteralRule() {
		return getXObjectLiteralAccess().getRule();
	}

	//XObjectLiteralPart returns types::JvmMember:
	//	{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression;
	public XbaseGrammarAccess.XObjectLiteralPartElements getXObjectLiteralPartAccess() {
		return gaXbase.getXObjectLiteralPartAccess();
	}
	
	public ParserRule getXObjectLiteralPartRule() {
		return getXObjectLiteralPartAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XStructLiteral returns XExpression:
	//	{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName]
	//	//	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	// "{"
	//	properties+=XFieldLiteralPart ("," properties+=XFieldLiteralPart)* "}";
	public XbaseGrammarAccess.XStructLiteralElements getXStructLiteralAccess() {
		return gaXbase.getXStructLiteralAccess();
	}
	
	public ParserRule getXStructLiteralRule() {
		return getXStructLiteralAccess().getRule();
	}

	//XFieldLiteralPart:
	//	{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression;
	public XbaseGrammarAccess.XFieldLiteralPartElements getXFieldLiteralPartAccess() {
		return gaXbase.getXFieldLiteralPartAccess();
	}
	
	public ParserRule getXFieldLiteralPartRule() {
		return getXFieldLiteralPartAccess().getRule();
	}

	//XArrayLiteral returns XExpression:
	//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
	public XbaseGrammarAccess.XArrayLiteralElements getXArrayLiteralAccess() {
		return gaXbase.getXArrayLiteralAccess();
	}
	
	public ParserRule getXArrayLiteralRule() {
		return getXArrayLiteralAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	////XTemplateLiteral returns XExpression:
	// //	{XTemplate} ( 
	// //	  expressions+=RichStringLiteral |
	//
	////	  expressions+=RichStringLiteralStart expressions+=XExpression? 
	//
	////	  	(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* 
	// //	  expressions+=RichStringLiteralEnd
	//
	////	)
	// //;
	// //
	// //RichStringLiteral returns XExpression :
	// //	{RichStringLiteral} value=RICH_TEXT
	// //;
	// //
	//
	////RichStringLiteralStart returns XExpression :
	// //	{RichStringLiteral} value=RICH_TEXT_START
	// //; 
	// //
	//
	////RichStringLiteralInbetween returns XExpression :
	// //	{RichStringLiteral} 
	// //	( value=RICH_TEXT_INBETWEEN  )
	// //; 
	//
	////
	// //RichStringLiteralEnd returns XExpression :
	// //	{RichStringLiteral} 
	// //	( value=RICH_TEXT_END  )
	// //; 
	//
	////InternalRichString returns XExpression:
	// //	{RichString} (
	//
	////		expressions+=RichStringLiteralInbetween (expressions+=XExpression? expressions+=RichStringLiteralInbetween)*
	//
	////	)
	// //;
	// XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XBreakExpression returns XExpression:
	//	{XBreakExpression} "break";
	public XbaseGrammarAccess.XBreakExpressionElements getXBreakExpressionAccess() {
		return gaXbase.getXBreakExpressionAccess();
	}
	
	public ParserRule getXBreakExpressionRule() {
		return getXBreakExpressionAccess().getRule();
	}

	//XContinueExpression returns XExpression:
	//	{XContinueExpression} "continue";
	public XbaseGrammarAccess.XContinueExpressionElements getXContinueExpressionAccess() {
		return gaXbase.getXContinueExpressionAccess();
	}
	
	public ParserRule getXContinueExpressionRule() {
		return getXContinueExpressionAccess().getRule();
	}

	////XTryCatchFinallyExpression returns XExpression:
	// //	{XTryCatchFinallyExpression}
	// //	'try' 
	//
	////		expression=XExpression
	// //	(
	// //		catchClauses+=XCatchClause+
	// //		(=>'finally' finallyExpression=XExpression)?
	//
	////	|	'finally' finallyExpression=XExpression
	// //	);
	// //	
	// //XCatchClause :
	//
	////	=>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	// XTryCatchFinallyExpression returns
	//XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClause=XCatchClause ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" identifier=ID ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//terminal ID:
	//	"^"? (IDENTIFIER_START | UNICODE_ESCAPE) (IDENTIFIER_PART | UNICODE_ESCAPE)*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return gaXbase.getHEX_DIGITRule();
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" (HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?)?;
	public TerminalRule getUNICODE_ESCAPERule() {
		return gaXbase.getUNICODE_ESCAPERule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//XTemplateLiteral returns XExpression:
	//	{XTemplate} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=XExpression?
	//	(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* expressions+=RichStringLiteralEnd);
	public XbaseGrammarAccess.XTemplateLiteralElements getXTemplateLiteralAccess() {
		return gaXbase.getXTemplateLiteralAccess();
	}
	
	public ParserRule getXTemplateLiteralRule() {
		return getXTemplateLiteralAccess().getRule();
	}

	//RichStringLiteral returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT;
	public XbaseGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXbase.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START;
	public XbaseGrammarAccess.RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return gaXbase.getRichStringLiteralStartAccess();
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_INBETWEEN;
	public XbaseGrammarAccess.RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return gaXbase.getRichStringLiteralInbetweenAccess();
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_END;
	public XbaseGrammarAccess.RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return gaXbase.getRichStringLiteralEndAccess();
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"`" IN_RICH_STRING* ("`" | EOF);
	public TerminalRule getRICH_TEXTRule() {
		return gaXbase.getRICH_TEXTRule();
	} 

	//terminal RICH_TEXT_START:
	//	"`" IN_RICH_STRING* "<%";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaXbase.getRICH_TEXT_STARTRule();
	} 

	//terminal RICH_TEXT_END:
	//	"%>" IN_RICH_STRING* ("`" | EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaXbase.getRICH_TEXT_ENDRule();
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"%>" IN_RICH_STRING* "<%";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return gaXbase.getRICH_TEXT_INBETWEENRule();
	} 

	//terminal fragment IN_RICH_STRING:
	//	!("`" | "\\" | "<") | "<" !"%";
	public TerminalRule getIN_RICH_STRINGRule() {
		return gaXbase.getIN_RICH_STRINGRule();
	} 

	////terminal RICH_TEXT : "'''" IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF);
	//
	////terminal RICH_TEXT_START : "'''" IN_RICH_STRING* ("'" "'"?)? '«';
	//
	////terminal RICH_TEXT_END : '»' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF) ;
	//
	////terminal RICH_TEXT_INBETWEEN : '»' IN_RICH_STRING* ("'" "'"?)? '«';
	//
	//////terminal COMMENT_RICH_TEXT_INBETWEEN: "««" !('\n'|'\r')* ('\r'? '\n' IN_RICH_STRING* ("'" "'"?)? '«')?; 
	//
	//////terminal COMMENT_RICH_TEXT_END: "««" !('\n'|'\r')* (('\r'? '\n' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF)) | EOF); 
	//
	//////
	// //terminal fragment IN_RICH_STRING : 
	// //	  "''" !('«'|"'") 
	// //	| "'" !('«'|"'")
	// //	| !('«'|"'");
	//
	////Template ::
	// //NoSubstitutionTemplate
	// //TemplateHead
	// //
	// //NoSubstitutionTemplate ::
	// //` TemplateCharacters `
	//
	////
	// //TemplateHead ::
	// //` TemplateCharacters ${
	// //	
	// //TemplateSubstitutionTail ::
	// //TemplateMiddle
	//
	////TemplateTail
	// //
	// //TemplateMiddle ::
	// //} TemplateCharacters ${
	// //	
	// //TemplateTail ::
	//
	////} TemplateCharactersopt `
	// //
	// //TemplateCharacters ::
	// //TemplateCharacter TemplateCharactersopt
	// //
	//
	////TemplateCharacter ::
	// //SourceCharacter but not one of ` or \ or $ or LineTerminatorSequence
	// //$ [lookahead ≠ { ]
	//
	////\ EscapeSequence
	// //LineContinuation
	// //LineTerminatorSequence
	// //XTemplate returns XExpression:
	// //	{XTemplate}
	//
	////	expressions+=RichStringLiteral
	// //	|TemplateHead
	// //;
	// //
	// //RichStringLiteral:
	//
	////	'`' value=TemplateCharacters '`'
	// //;
	// //
	// //TemplateHead:
	// //'`' TemplateCharacters '${'
	// //;
	// //
	//
	////TemplateSubstitutionTail:
	// //	TemplateMiddle
	// //	|TemplateTail
	// //;
	// //
	// //TemplateMiddle:
	//
	////	 TemplateCharacters '${'
	// //;
	// //
	// //	
	// //TemplateTail:
	// //	 TemplateCharacters '`'
	// //;
	// //
	//
	////terminal TemplateCharacters:
	// //	TemplateCharacter*
	// ////	|TemplateCharacters
	// //;
	// //
	//
	////terminal fragment TemplateCharacter:
	// ////	SourceCharacter but not one of ` or \ or $ or LineTerminatorSequence
	//
	////	!('`' |'\\'|'$') 
	// ////	$ [lookahead ≠ { ]
	// ////	\ EscapeSequence
	// ////	LineContinuation
	//
	//////	LineTerminatorSequence
	// //;
	// terminal fragment IDENTIFIER_START:
	//	"$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" |
	//	"ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
	//	"Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ" |
	//	"ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" | "ऽ" |
	//	"ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳" |
	//	"ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ" |
	//	"એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" |
	//	"ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" |
	//	"ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
	//	"వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
	//	"എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ" |
	//	"฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ະ" |
	//	"າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" |
	//	"ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ" |
	//	"ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
	//	"ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ" |
	//	"ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ" |
	//	"៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" |
	//	"Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" |
	//	"ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" | "ℇ" |
	//	"ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" |
	//	"々".."〇" | "〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" |
	//	"ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ" |
	//	"שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴" |
	//	"﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" |
	//	"ￚ".."ￜ" | "￠".."￡" | "￥".."￦";
	public TerminalRule getIDENTIFIER_STARTRule() {
		return gaXbase.getIDENTIFIER_STARTRule();
	} 

	//terminal fragment IDENTIFIER_PART:
	//	IDENTIFIER_START | IDENTIFIER_PART_IMPL;
	public TerminalRule getIDENTIFIER_PARTRule() {
		return gaXbase.getIDENTIFIER_PARTRule();
	} 

	//terminal fragment IDENTIFIER_PART_IMPL:
	//	" ".."\b" | "".."" | "0".."9" | "".."" | "­" | "̀".."͗" | "͝".."ͯ" | "҃".."҆" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" |
	//	"ֿ" | "ׁ".."ׂ" | "ׄ" | "؀".."؃" | "ؐ".."ؕ" | "ً".."٘" | "٠".."٩" | "ٰ" | "ۖ".."۝" | "۟".."ۤ" | "ۧ".."ۨ" | "۪".."ۭ" |
	//	"۰".."۹" | "܏" | "ܑ" | "ܰ".."݊" | "ަ".."ް" | "ँ".."ः" | "़" | "ा".."्" | "॑".."॔" | "ॢ".."ॣ" | "०".."९" | "ঁ".."ঃ" |
	//	"়" | "া".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ৢ".."ৣ" | "০".."৯" | "ਁ".."ਃ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍" |
	//	"੦".."ੱ" | "ઁ".."ઃ" | "઼" | "ા".."ૅ" | "ે".."ૉ" | "ો".."્" | "ૢ".."ૣ" | "૦".."૯" | "ଁ".."ଃ" | "଼" | "ା".."ୃ" |
	//	"େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "୦".."୯" | "ஂ" | "ா".."ூ" | "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "ఁ".."ః" |
	//	"ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "౦".."౯" | "ಂ".."ಃ" | "಼" | "ಾ".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" |
	//	"೦".."೯" | "ം".."ഃ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "൦".."൯" | "ං".."ඃ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" |
	//	"ෲ".."ෳ" | "ั" | "ิ".."ฺ" | "็".."๎" | "๐".."๙" | "ັ" | "ິ".."ູ" | "ົ".."ຼ" | "່".."ໍ" | "໐".."໙" | "༘".."༙" |
	//	"༠".."༩" | "༵" | "༷" | "༹" | "༾".."༿" | "ཱ".."྄" | "྆".."྇" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "ာ".."ဲ" | "ံ".."္" |
	//	"၀".."၉" | "ၖ".."ၙ" | "፩".."፱" | "ᜒ".."᜔" | "ᜲ".."᜴" | "ᝒ".."ᝓ" | "ᝲ".."ᝳ" | "឴".."៓" | "៝" | "០".."៩" | "᠋".."᠍" |
	//	"᠐".."᠙" | "ᢩ" | "ᤠ".."ᤫ" | "ᤰ".."᤻" | "᥆".."᥏" | "‌".."‏" | "‪".."‮" | "⁠".."⁣" | "⁪".."⁯" | "⃐".."⃜" | "⃡" |
	//	"⃥".."⃪" | "〪".."〯" | "゙".."゚" | "ﬞ" | "︀".."️" | "︠".."︣" | "﻿" | "０".."９" | "￹".."￻";
	public TerminalRule getIDENTIFIER_PART_IMPLRule() {
		return gaXbase.getIDENTIFIER_PART_IMPLRule();
	} 

	////  | XFunctionTypeRef
	// JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	////XFunctionTypeRef:
	//
	////  ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	//
	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	////XImportSection:
	// //	importDeclarations+=XImportDeclaration+;
	// //
	// //XImportDeclaration: 
	// //	'import' (
	//
	////		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedName] '.' '*') 
	//
	////		| importedType=[JvmDeclaredType|QualifiedName] 
	// //		| importedNamespace=QualifiedNameWithWildcard) 
	// //		';'
	//
	////;
	// XImportSection1:
	//	(importDeclarations+=XImportDeclaration1 ";"?)+;
	public XtypeGrammarAccess.XImportSection1Elements getXImportSection1Access() {
		return gaXbase.getXImportSection1Access();
	}
	
	public ParserRule getXImportSection1Rule() {
		return getXImportSection1Access().getRule();
	}

	////XImportDeclaration1 returns XImportDeclaration1: 
	// //	'import' (( 
	// //		(('{'
	//
	////		importItems += XImportItem (',' importItems += XImportItem)*  
	// //		'}')
	// //		|
	//
	////		(importItems += XImportItem ))
	// //		
	// //		'from' importURI=STRING )
	// //	 |
	//
	////	('from' importURI=STRING 'as' alias = ID))
	// //		
	// //;
	// XImportDeclaration1:
	//	{XImportDeclaration1} "import" "{" (importItems+=XImportItem ("," importItems+=XImportItem)* | wildcard?="*") "}"
	//	"as" name=ValidID "from" importURI=STRING;
	public XtypeGrammarAccess.XImportDeclaration1Elements getXImportDeclaration1Access() {
		return gaXbase.getXImportDeclaration1Access();
	}
	
	public ParserRule getXImportDeclaration1Rule() {
		return getXImportDeclaration1Access().getRule();
	}

	//XImportItem:
	//	{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XImportItemElements getXImportItemAccess() {
		return gaXbase.getXImportItemAccess();
	}
	
	public ParserRule getXImportItemRule() {
		return getXImportItemAccess().getRule();
	}

	////'import' {importId += [JvmIdentifiableElement|ID] (as name=ID)? (',' importId += [JvmIdentifiableElement|ID] (as name=ID)?)*  } from module1 
	//
	////import as name=ID from module
	// XExportSection:
	//	(exportDeclarations+=XExportDeclaration ";"?)+;
	public XtypeGrammarAccess.XExportSectionElements getXExportSectionAccess() {
		return gaXbase.getXExportSectionAccess();
	}
	
	public ParserRule getXExportSectionRule() {
		return getXExportSectionAccess().getRule();
	}

	//XExportDeclaration:
	//	"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
	//
	//	//			(exportItems +=XExportItem)
	// //			|
	// //			wildcard?='*'
	// | "from" importURI=STRING "as" alias=ID);
	public XtypeGrammarAccess.XExportDeclarationElements getXExportDeclarationAccess() {
		return gaXbase.getXExportDeclarationAccess();
	}
	
	public ParserRule getXExportDeclarationRule() {
		return getXExportDeclarationAccess().getRule();
	}

	//XExportItem:
	//	exportedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XExportItemElements getXExportItemAccess() {
		return gaXbase.getXExportItemAccess();
	}
	
	public ParserRule getXExportItemRule() {
		return getXExportItemAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
