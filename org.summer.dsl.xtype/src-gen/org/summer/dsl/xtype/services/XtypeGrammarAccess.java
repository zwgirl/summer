/*
* generated by Xtext
*/
package org.summer.dsl.xtype.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XtypeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cArrayBracketsParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		
		////  | XFunctionTypeRef
		// JvmTypeReference:
		//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*;
		public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
		public Group getGroup() { return cGroup; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall_0() { return cJvmParameterizedTypeReferenceParserRuleCall_0; }

		//=> ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
		public Group getGroup_1() { return cGroup_1; }

		//{JvmGenericArrayTypeReference.componentType=current} ArrayBrackets
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{JvmGenericArrayTypeReference.componentType=current}
		public Action getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0() { return cJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0; }

		//ArrayBrackets
		public RuleCall getArrayBracketsParserRuleCall_1_0_1() { return cArrayBracketsParserRuleCall_1_0_1; }
	}

	public class ArrayBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArrayBrackets:
		//	"[" "]";
		public ParserRule getRule() { return rule; }

		//"[" "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}

	public class JvmParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////XFunctionTypeRef:
		//
		////  ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
		//
		//JvmParameterizedTypeReference:
		//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
		//	">")?;
		public ParserRule getRule() { return rule; }

		//type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup() { return cGroup; }

		//type=[JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//(=> "<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," arguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class JvmArgumentTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmArgumentTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJvmTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJvmWildcardTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JvmArgumentTypeReference returns JvmTypeReference:
		//	JvmTypeReference | JvmWildcardTypeReference;
		public ParserRule getRule() { return rule; }

		//JvmTypeReference | JvmWildcardTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//JvmTypeReference
		public RuleCall getJvmTypeReferenceParserRuleCall_0() { return cJvmTypeReferenceParserRuleCall_0; }

		//JvmWildcardTypeReference
		public RuleCall getJvmWildcardTypeReferenceParserRuleCall_1() { return cJvmWildcardTypeReferenceParserRuleCall_1; }
	}

	public class JvmWildcardTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmWildcardTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmWildcardTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstraintsJvmUpperBoundParserRuleCall_2_0_0 = (RuleCall)cConstraintsAssignment_2_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstraintsJvmLowerBoundParserRuleCall_2_1_0 = (RuleCall)cConstraintsAssignment_2_1.eContents().get(0);
		
		//JvmWildcardTypeReference:
		//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
		public ParserRule getRule() { return rule; }

		//{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Group getGroup() { return cGroup; }

		//{JvmWildcardTypeReference}
		public Action getJvmWildcardTypeReferenceAction_0() { return cJvmWildcardTypeReferenceAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//(constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//constraints+=JvmUpperBound
		public Assignment getConstraintsAssignment_2_0() { return cConstraintsAssignment_2_0; }

		//JvmUpperBound
		public RuleCall getConstraintsJvmUpperBoundParserRuleCall_2_0_0() { return cConstraintsJvmUpperBoundParserRuleCall_2_0_0; }

		//constraints+=JvmLowerBound
		public Assignment getConstraintsAssignment_2_1() { return cConstraintsAssignment_2_1; }

		//JvmLowerBound
		public RuleCall getConstraintsJvmLowerBoundParserRuleCall_2_1_0() { return cConstraintsJvmLowerBoundParserRuleCall_2_1_0; }
	}

	public class JvmUpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmUpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmUpperBound:
		//	"extends" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"extends" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmUpperBoundAndedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmUpperBoundAnded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmUpperBoundAnded returns JvmUpperBound:
		//	"&" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"&" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmLowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmLowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmLowerBound:
		//	"super" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"super" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"super"
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstraintsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstraintsJvmUpperBoundParserRuleCall_1_0_0 = (RuleCall)cConstraintsAssignment_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		
		//JvmTypeParameter:
		//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//(constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?
		public Group getGroup_1() { return cGroup_1; }

		//constraints+=JvmUpperBound
		public Assignment getConstraintsAssignment_1_0() { return cConstraintsAssignment_1_0; }

		//JvmUpperBound
		public RuleCall getConstraintsJvmUpperBoundParserRuleCall_1_0_0() { return cConstraintsJvmUpperBoundParserRuleCall_1_0_0; }

		//constraints+=JvmUpperBoundAnded*
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }

		//JvmUpperBoundAnded
		public RuleCall getConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0() { return cConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName "." "*";
		public ParserRule getRule() { return rule; }

		//QualifiedName "." "*"
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class XImportSection1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportSection1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportDeclarationsXImportDeclaration1ParserRuleCall_0_0 = (RuleCall)cImportDeclarationsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////XImportSection:
		// //	importDeclarations+=XImportDeclaration+;
		// //
		// //XImportDeclaration: 
		// //	'import' (
		//
		////		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedName] '.' '*') 
		//
		////		| importedType=[JvmDeclaredType|QualifiedName] 
		// //		| importedNamespace=QualifiedNameWithWildcard) 
		// //		';'
		//
		////;
		// XImportSection1:
		//	(importDeclarations+=XImportDeclaration1 ";"?)+;
		public ParserRule getRule() { return rule; }

		//(importDeclarations+=XImportDeclaration1 ";"?)+
		public Group getGroup() { return cGroup; }

		//importDeclarations+=XImportDeclaration1
		public Assignment getImportDeclarationsAssignment_0() { return cImportDeclarationsAssignment_0; }

		//XImportDeclaration1
		public RuleCall getImportDeclarationsXImportDeclaration1ParserRuleCall_0_0() { return cImportDeclarationsXImportDeclaration1ParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class XImportDeclaration1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportDeclaration1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXImportDeclaration1Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cImportItemsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cImportItemsXImportItemParserRuleCall_3_0_0_0 = (RuleCall)cImportItemsAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cImportItemsAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cImportItemsXImportItemParserRuleCall_3_0_1_1_0 = (RuleCall)cImportItemsAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cWildcardAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cWildcardAsteriskKeyword_3_1_0 = (Keyword)cWildcardAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameValidIDParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cFromKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cImportURIAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cImportURISTRINGTerminalRuleCall_8_0 = (RuleCall)cImportURIAssignment_8.eContents().get(0);
		
		////XImportDeclaration1 returns XImportDeclaration1: 
		// //	'import' (( 
		// //		(('{'
		//
		////		importItems += XImportItem (',' importItems += XImportItem)*  
		// //		'}')
		// //		|
		//
		////		(importItems += XImportItem ))
		// //		
		// //		'from' importURI=STRING )
		// //	 |
		//
		////	('from' importURI=STRING 'as' alias = ID))
		// //		
		// //;
		// XImportDeclaration1:
		//	{XImportDeclaration1} "import" "{" (importItems+=XImportItem ("," importItems+=XImportItem)* | wildcard?="*") "}"
		//	"as" name=ValidID "from" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//{XImportDeclaration1} "import" "{" (importItems+=XImportItem ("," importItems+=XImportItem)* | wildcard?="*") "}" "as"
		//name=ValidID "from" importURI=STRING
		public Group getGroup() { return cGroup; }

		//{XImportDeclaration1}
		public Action getXImportDeclaration1Action_0() { return cXImportDeclaration1Action_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//importItems+=XImportItem ("," importItems+=XImportItem)* | wildcard?="*"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//importItems+=XImportItem ("," importItems+=XImportItem)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//importItems+=XImportItem
		public Assignment getImportItemsAssignment_3_0_0() { return cImportItemsAssignment_3_0_0; }

		//XImportItem
		public RuleCall getImportItemsXImportItemParserRuleCall_3_0_0_0() { return cImportItemsXImportItemParserRuleCall_3_0_0_0; }

		//("," importItems+=XImportItem)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//","
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }

		//importItems+=XImportItem
		public Assignment getImportItemsAssignment_3_0_1_1() { return cImportItemsAssignment_3_0_1_1; }

		//XImportItem
		public RuleCall getImportItemsXImportItemParserRuleCall_3_0_1_1_0() { return cImportItemsXImportItemParserRuleCall_3_0_1_1_0; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_3_1() { return cWildcardAssignment_3_1; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_3_1_0() { return cWildcardAsteriskKeyword_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//name=ValidID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_6_0() { return cNameValidIDParserRuleCall_6_0; }

		//"from"
		public Keyword getFromKeyword_7() { return cFromKeyword_7; }

		//importURI=STRING
		public Assignment getImportURIAssignment_8() { return cImportURIAssignment_8; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_8_0() { return cImportURISTRINGTerminalRuleCall_8_0; }
	}

	public class XImportItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXImportItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportedIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedIdJvmIdentifiableElementCrossReference_1_0 = (CrossReference)cImportedIdAssignment_1.eContents().get(0);
		private final RuleCall cImportedIdJvmIdentifiableElementIDTerminalRuleCall_1_0_1 = (RuleCall)cImportedIdJvmIdentifiableElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//XImportItem:
		//	{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?;
		public ParserRule getRule() { return rule; }

		//{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?
		public Group getGroup() { return cGroup; }

		//{XImportItem}
		public Action getXImportItemAction_0() { return cXImportItemAction_0; }

		//importedId=[JvmIdentifiableElement]
		public Assignment getImportedIdAssignment_1() { return cImportedIdAssignment_1; }

		//[JvmIdentifiableElement]
		public CrossReference getImportedIdJvmIdentifiableElementCrossReference_1_0() { return cImportedIdJvmIdentifiableElementCrossReference_1_0; }

		//ID
		public RuleCall getImportedIdJvmIdentifiableElementIDTerminalRuleCall_1_0_1() { return cImportedIdJvmIdentifiableElementIDTerminalRuleCall_1_0_1; }

		//("as" alias=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
	}

	public class XExportSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExportSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExportDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExportDeclarationsXExportDeclarationParserRuleCall_0_0 = (RuleCall)cExportDeclarationsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////'import' {importId += [JvmIdentifiableElement|ID] (as name=ID)? (',' importId += [JvmIdentifiableElement|ID] (as name=ID)?)*  } from module1 
		//
		////import as name=ID from module
		// XExportSection:
		//	(exportDeclarations+=XExportDeclaration ";"?)+;
		public ParserRule getRule() { return rule; }

		//(exportDeclarations+=XExportDeclaration ";"?)+
		public Group getGroup() { return cGroup; }

		//exportDeclarations+=XExportDeclaration
		public Assignment getExportDeclarationsAssignment_0() { return cExportDeclarationsAssignment_0; }

		//XExportDeclaration
		public RuleCall getExportDeclarationsXExportDeclarationParserRuleCall_0_0() { return cExportDeclarationsXExportDeclarationParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class XExportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExportItemsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExportItemsXExportItemParserRuleCall_1_0_1_0 = (RuleCall)cExportItemsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExportItemsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExportItemsXExportItemParserRuleCall_1_0_2_1_0 = (RuleCall)cExportItemsAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cFromKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cImportURIAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0_4_1_0 = (RuleCall)cImportURIAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFromKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cImportURIAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cImportURIAssignment_1_1_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cAliasAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_3_0 = (RuleCall)cAliasAssignment_1_1_3.eContents().get(0);
		
		//XExportDeclaration:
		//	"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
		//
		//	//			(exportItems +=XExportItem)
		// //			|
		// //			wildcard?='*'
		// | "from" importURI=STRING "as" alias=ID);
		public ParserRule getRule() { return rule; }

		//"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
		//
		////			(exportItems +=XExportItem)
		// //			|
		// //			wildcard?='*'
		// | "from" importURI=STRING "as" alias=ID)
		public Group getGroup() { return cGroup; }

		//"export"
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }

		//"{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
		//
		////			(exportItems +=XExportItem)
		// //			|
		// //			wildcard?='*'
		// | "from" importURI=STRING "as" alias=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }

		//exportItems+=XExportItem
		public Assignment getExportItemsAssignment_1_0_1() { return cExportItemsAssignment_1_0_1; }

		//XExportItem
		public RuleCall getExportItemsXExportItemParserRuleCall_1_0_1_0() { return cExportItemsXExportItemParserRuleCall_1_0_1_0; }

		//("," exportItems+=XExportItem)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//exportItems+=XExportItem
		public Assignment getExportItemsAssignment_1_0_2_1() { return cExportItemsAssignment_1_0_2_1; }

		//XExportItem
		public RuleCall getExportItemsXExportItemParserRuleCall_1_0_2_1_0() { return cExportItemsXExportItemParserRuleCall_1_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_3() { return cRightCurlyBracketKeyword_1_0_3; }

		//("from" importURI=STRING)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//"from"
		public Keyword getFromKeyword_1_0_4_0() { return cFromKeyword_1_0_4_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1_0_4_1() { return cImportURIAssignment_1_0_4_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0_4_1_0() { return cImportURISTRINGTerminalRuleCall_1_0_4_1_0; }

		//"from" importURI=STRING "as" alias=ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"from"
		public Keyword getFromKeyword_1_1_0() { return cFromKeyword_1_1_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1_1_1() { return cImportURIAssignment_1_1_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_1_1_0() { return cImportURISTRINGTerminalRuleCall_1_1_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1_2() { return cAsKeyword_1_1_2; }

		//alias=ID
		public Assignment getAliasAssignment_1_1_3() { return cAliasAssignment_1_1_3; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_3_0() { return cAliasIDTerminalRuleCall_1_1_3_0; }
	}

	public class XExportItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExportItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExportedIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExportedIdJvmIdentifiableElementCrossReference_0_0 = (CrossReference)cExportedIdAssignment_0.eContents().get(0);
		private final RuleCall cExportedIdJvmIdentifiableElementIDTerminalRuleCall_0_0_1 = (RuleCall)cExportedIdJvmIdentifiableElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//XExportItem:
		//	exportedId=[JvmIdentifiableElement] ("as" alias=ID)?;
		public ParserRule getRule() { return rule; }

		//exportedId=[JvmIdentifiableElement] ("as" alias=ID)?
		public Group getGroup() { return cGroup; }

		//exportedId=[JvmIdentifiableElement]
		public Assignment getExportedIdAssignment_0() { return cExportedIdAssignment_0; }

		//[JvmIdentifiableElement]
		public CrossReference getExportedIdJvmIdentifiableElementCrossReference_0_0() { return cExportedIdJvmIdentifiableElementCrossReference_0_0; }

		//ID
		public RuleCall getExportedIdJvmIdentifiableElementIDTerminalRuleCall_0_0_1() { return cExportedIdJvmIdentifiableElementIDTerminalRuleCall_0_0_1; }

		//("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
	}
	
	
	private JvmTypeReferenceElements pJvmTypeReference;
	private ArrayBracketsElements pArrayBrackets;
	private JvmParameterizedTypeReferenceElements pJvmParameterizedTypeReference;
	private JvmArgumentTypeReferenceElements pJvmArgumentTypeReference;
	private JvmWildcardTypeReferenceElements pJvmWildcardTypeReference;
	private JvmUpperBoundElements pJvmUpperBound;
	private JvmUpperBoundAndedElements pJvmUpperBoundAnded;
	private JvmLowerBoundElements pJvmLowerBound;
	private JvmTypeParameterElements pJvmTypeParameter;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private ValidIDElements pValidID;
	private XImportSection1Elements pXImportSection1;
	private XImportDeclaration1Elements pXImportDeclaration1;
	private XImportItemElements pXImportItem;
	private XExportSectionElements pXExportSection;
	private XExportDeclarationElements pXExportDeclaration;
	private XExportItemElements pXExportItem;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XtypeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.summer.dsl.xtype.Xtype".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////  | XFunctionTypeRef
	// JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*;
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return (pJvmTypeReference != null) ? pJvmTypeReference : (pJvmTypeReference = new JvmTypeReferenceElements());
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public ArrayBracketsElements getArrayBracketsAccess() {
		return (pArrayBrackets != null) ? pArrayBrackets : (pArrayBrackets = new ArrayBracketsElements());
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	////XFunctionTypeRef:
	//
	////  ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	//
	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return (pJvmParameterizedTypeReference != null) ? pJvmParameterizedTypeReference : (pJvmParameterizedTypeReference = new JvmParameterizedTypeReferenceElements());
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return (pJvmArgumentTypeReference != null) ? pJvmArgumentTypeReference : (pJvmArgumentTypeReference = new JvmArgumentTypeReferenceElements());
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return (pJvmWildcardTypeReference != null) ? pJvmWildcardTypeReference : (pJvmWildcardTypeReference = new JvmWildcardTypeReferenceElements());
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public JvmUpperBoundElements getJvmUpperBoundAccess() {
		return (pJvmUpperBound != null) ? pJvmUpperBound : (pJvmUpperBound = new JvmUpperBoundElements());
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return (pJvmUpperBoundAnded != null) ? pJvmUpperBoundAnded : (pJvmUpperBoundAnded = new JvmUpperBoundAndedElements());
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public JvmLowerBoundElements getJvmLowerBoundAccess() {
		return (pJvmLowerBound != null) ? pJvmLowerBound : (pJvmLowerBound = new JvmLowerBoundElements());
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public JvmTypeParameterElements getJvmTypeParameterAccess() {
		return (pJvmTypeParameter != null) ? pJvmTypeParameter : (pJvmTypeParameter = new JvmTypeParameterElements());
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	////XImportSection:
	// //	importDeclarations+=XImportDeclaration+;
	// //
	// //XImportDeclaration: 
	// //	'import' (
	//
	////		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedName] '.' '*') 
	//
	////		| importedType=[JvmDeclaredType|QualifiedName] 
	// //		| importedNamespace=QualifiedNameWithWildcard) 
	// //		';'
	//
	////;
	// XImportSection1:
	//	(importDeclarations+=XImportDeclaration1 ";"?)+;
	public XImportSection1Elements getXImportSection1Access() {
		return (pXImportSection1 != null) ? pXImportSection1 : (pXImportSection1 = new XImportSection1Elements());
	}
	
	public ParserRule getXImportSection1Rule() {
		return getXImportSection1Access().getRule();
	}

	////XImportDeclaration1 returns XImportDeclaration1: 
	// //	'import' (( 
	// //		(('{'
	//
	////		importItems += XImportItem (',' importItems += XImportItem)*  
	// //		'}')
	// //		|
	//
	////		(importItems += XImportItem ))
	// //		
	// //		'from' importURI=STRING )
	// //	 |
	//
	////	('from' importURI=STRING 'as' alias = ID))
	// //		
	// //;
	// XImportDeclaration1:
	//	{XImportDeclaration1} "import" "{" (importItems+=XImportItem ("," importItems+=XImportItem)* | wildcard?="*") "}"
	//	"as" name=ValidID "from" importURI=STRING;
	public XImportDeclaration1Elements getXImportDeclaration1Access() {
		return (pXImportDeclaration1 != null) ? pXImportDeclaration1 : (pXImportDeclaration1 = new XImportDeclaration1Elements());
	}
	
	public ParserRule getXImportDeclaration1Rule() {
		return getXImportDeclaration1Access().getRule();
	}

	//XImportItem:
	//	{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XImportItemElements getXImportItemAccess() {
		return (pXImportItem != null) ? pXImportItem : (pXImportItem = new XImportItemElements());
	}
	
	public ParserRule getXImportItemRule() {
		return getXImportItemAccess().getRule();
	}

	////'import' {importId += [JvmIdentifiableElement|ID] (as name=ID)? (',' importId += [JvmIdentifiableElement|ID] (as name=ID)?)*  } from module1 
	//
	////import as name=ID from module
	// XExportSection:
	//	(exportDeclarations+=XExportDeclaration ";"?)+;
	public XExportSectionElements getXExportSectionAccess() {
		return (pXExportSection != null) ? pXExportSection : (pXExportSection = new XExportSectionElements());
	}
	
	public ParserRule getXExportSectionRule() {
		return getXExportSectionAccess().getRule();
	}

	//XExportDeclaration:
	//	"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
	//
	//	//			(exportItems +=XExportItem)
	// //			|
	// //			wildcard?='*'
	// | "from" importURI=STRING "as" alias=ID);
	public XExportDeclarationElements getXExportDeclarationAccess() {
		return (pXExportDeclaration != null) ? pXExportDeclaration : (pXExportDeclaration = new XExportDeclarationElements());
	}
	
	public ParserRule getXExportDeclarationRule() {
		return getXExportDeclarationAccess().getRule();
	}

	//XExportItem:
	//	exportedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XExportItemElements getXExportItemAccess() {
		return (pXExportItem != null) ? pXExportItem : (pXExportItem = new XExportItemElements());
	}
	
	public ParserRule getXExportItemRule() {
		return getXExportItemAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
