/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
 
grammar org.summer.dsl.xtype.Xtype hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.summer.org/dsl/model/xtype"
import "http://www.summer.org/dsl/model/types"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JvmTypeReference:
    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* 
//  | XFunctionTypeRef
  ;
  
ArrayBrackets :
	'[' ']'
;

//XFunctionTypeRef:
//  ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;

JvmParameterizedTypeReference:
  type=[JvmType|QualifiedName] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?;

JvmArgumentTypeReference returns JvmTypeReference:
	JvmTypeReference | JvmWildcardTypeReference;

JvmWildcardTypeReference:
  {JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
  
JvmUpperBound : 
 'extends' typeReference=JvmTypeReference;

JvmUpperBoundAnded returns JvmUpperBound: 
 '&' typeReference=JvmTypeReference;

JvmLowerBound :
 'super' typeReference=JvmTypeReference;

JvmTypeParameter :
  name=ValidID 
  (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;

QualifiedName:
  ValidID ('.' ValidID)*;

QualifiedNameWithWildcard :
	QualifiedName  '.' '*';

ValidID:
	ID;

XImportSection returns XImportSection:
	(importDeclarations+=XImportDeclaration ';'?)+;

XImportDeclaration returns XImportDeclaration: 
	{XImportDeclaration}
	'import' 
		'{'
			((importItems += XImportItem (',' importItems += XImportItem)*)
			| wildcard ?= '*'
			)
		'}'
		
		'as' alias=ValidID
		'from' module=[JvmModule|QualifiedName] 
;

XImportItem returns XImportItem:
	{XImportItem}
	importedId = [JvmIdentifiableElement|ID] ('as' alias=ID)?
;

XExportSection returns XExportSection:
	(exportDeclarations+=XExportDeclaration ';'?)+;

XExportDeclaration returns XExportDeclaration: 
	'export' 
	(
		(
			('{'
				exportItems +=XExportItem (',' exportItems +=XExportItem)*
			'}'('from' importURI=STRING)?
			)
//			|
//			(exportItems +=XExportItem)
//			|
//			wildcard?='*'
		)
		|
		( 'from' importURI=STRING 'as' alias=ID)
	)
;

XExportItem returns XExportItem:
	exportedId =[JvmIdentifiableElement|ID] ('as' alias=ID)?
;

terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	
terminal STRING: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
			 
terminal ML_COMMENT: '/*' -> '*/';

terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;