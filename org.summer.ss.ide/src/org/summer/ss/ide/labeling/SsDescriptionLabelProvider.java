/*
* generated by Xtext
*/
package org.summer.ss.ide.labeling;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.jdt.ui.JavaElementImageDescriptor;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider;
import org.summer.dsl.model.types.JvmVisibility;
import org.summer.dsl.model.types.TypesPackage;
import org.summer.dsl.model.xtype.XtypePackage;
import org.summer.ss.core.resource.DescriptionFlags;

import com.google.inject.Inject;

/**
 * Provides labels for a IEObjectDescriptions and IResourceDescriptions.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class SsDescriptionLabelProvider extends DefaultDescriptionLabelProvider {

	@Inject
	private SsImages images;

	@Inject
	private DescriptionFlags descriptionFlags;

	@Override
	public Object image(IEObjectDescription element) {
		EClass eClass = element.getEClass();
		int adornments = (descriptionFlags.isStatic(element)) ? JavaElementImageDescriptor.STATIC : 0;
		if (eClass == TypesPackage.Literals.JVM_MODULE)
			return images.forFile();
		else if (eClass == XtypePackage.Literals.XIMPORT_DECLARATION)
			return images.forImport();
		else if (eClass == TypesPackage.Literals.JVM_DECLARED_TYPE || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)
			return images.forClass(JvmVisibility.PUBLIC, adornments);
		else if (eClass == TypesPackage.Literals.JVM_OPERATION)
			return images.forOperation(JvmVisibility.PUBLIC, adornments);
		else if (eClass == TypesPackage.Literals.JVM_FIELD)
			return images.forField(JvmVisibility.PUBLIC, adornments);
		else if (eClass == TypesPackage.Literals.JVM_OPERATION)
			return (descriptionFlags.isDispatcherOperation(element)) 
				? images.forDispatcherFunction(JvmVisibility.PUBLIC, adornments) 
				: images.forOperation(JvmVisibility.PUBLIC, adornments);
		else
			return super.image(element);
	}

}
