/*
* generated by Xtext
*/
package org.summer.ss.ide.outline;

import static com.google.common.collect.Iterables.filter;
import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;

import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.BackgroundOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import org.eclipse.xtext.ui.editor.outline.impl.OutlineMode;
import org.summer.dsl.model.types.JvmDeclaredType;
import org.summer.dsl.model.types.JvmFeature;
import org.summer.dsl.model.types.JvmGenericType;
import org.summer.dsl.model.types.JvmModule;
import org.summer.dsl.model.types.JvmTypeReference;
import org.summer.dsl.model.types.TypesPackage;
import org.summer.dsl.model.xtype.XtypePackage;
import org.summer.dsl.xbase.jvmmodel.JvmTypeExtensions;
import org.summer.dsl.xbase.ui.labeling.XbaseImageAdornments;
import org.summer.ss.ide.labeling.SsImages;

import com.google.inject.Inject;

/**
 * Customization of the default outline structure.
 * 
 * @author Jan Koehnlein
 */
public class SsOutlineTreeProvider extends BackgroundOutlineTreeProvider implements  
	IOutlineTreeProvider.ModeAware {

	private static final OutlineMode HIDE_INHERITED_MODE = new OutlineMode("hide", "hide inherited members");

	private static final OutlineMode SHOW_INHERITED_MODE = new OutlineMode("show", "show inherited members");

	private static final List<OutlineMode> MODES = newArrayList(HIDE_INHERITED_MODE, SHOW_INHERITED_MODE);

	@Inject
	private SsImages images;

	@Inject
	private XbaseImageAdornments adornments;

	@Inject
	private JvmTypeExtensions typeExtensions;

	@Inject 
	private SsOutlineNodeFactory factory;
	
	@Override
	protected void internalCreateChildren(DocumentRootNode parentNode, EObject modelElement) {
		if(modelElement instanceof JvmModule) {
			JvmModule xModule = (JvmModule) modelElement;
			if (xModule.getSimpleName() != null)
				factory.createEStructuralFeatureNode(parentNode, xModule, TypesPackage.Literals.JVM_MODULE__SIMPLE_NAME,
						images.forPackage(), xModule.getSimpleName(), true);
			if (xModule.getImportSection() != null && !xModule.getImportSection().getImportDeclarations().isEmpty())
				factory.createEStructuralFeatureNode(parentNode, xModule.getImportSection(),
						XtypePackage.Literals.XIMPORT_SECTION__IMPORT_DECLARATIONS, images.forImportContainer(),
						"import declarations", false);
			
			for (EObject obj : xModule.getContents()) {
				if(obj instanceof JvmDeclaredType){
					EObjectNode classNode = createNode(parentNode, obj);
					createFeatureNodes(classNode, (JvmDeclaredType) obj);
				}
			}
		}
	}
	
	protected void createFeatureNodes(IOutlineNode parentNode, JvmDeclaredType type) {
			Set<JvmFeature> processedFeatures = newHashSet();
			createFeatureNodesForType(parentNode, type, type, processedFeatures, 0);
	}
	
	protected void createFeatureNodesForType(IOutlineNode parentNode, 
			JvmDeclaredType type, final JvmDeclaredType baseType, Set<JvmFeature> processedFeatures, int inheritanceDepth) {
		for (JvmFeature feature : filter(type.getMembers(), JvmFeature.class)) {
			if (!processedFeatures.contains(feature)) {
				createNodeForFeature(parentNode, baseType, feature,
						feature, inheritanceDepth);
			}
		}
		if (getCurrentMode() == SHOW_INHERITED_MODE) {
			if (type instanceof JvmGenericType) {
				JvmTypeReference extendedClass = ((JvmGenericType) type).getExtendedClass();
				if (extendedClass != null) 
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedClass);
				for(JvmTypeReference extendedInterface: ((JvmGenericType) type).getExtendedInterfaces()) {
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedInterface);
				}
			}
		}
	}
	
	protected void createInheritedFeatureNodes(IOutlineNode parentNode, JvmDeclaredType baseType,
			Set<JvmFeature> processedFeatures, int inheritanceDepth, JvmTypeReference superType) {
		if(superType.getType() instanceof JvmDeclaredType) {
			JvmDeclaredType superClass = ((JvmGenericType) superType.getType());
			createFeatureNodesForType(parentNode, superClass, baseType, processedFeatures, inheritanceDepth + 1);
		}
	}

	protected SsFeatureNode createNodeForFeature(IOutlineNode parentNode, final JvmDeclaredType inferredType,
			JvmFeature jvmFeature, EObject semanticFeature, int inheritanceDepth) {
		final boolean synthetic = typeExtensions.isSynthetic(jvmFeature);
		Object text = getText(synthetic ? jvmFeature : semanticFeature);
		ImageDescriptor image = getImageDescriptor(synthetic ? jvmFeature : semanticFeature);
		if (jvmFeature.getDeclaringType() != inferredType) {
			if (getCurrentMode() == SHOW_INHERITED_MODE) {
				StyledString label = (text instanceof StyledString) ? (StyledString) text : new StyledString(
						text.toString());
				label.append(new StyledString(" - " + jvmFeature.getDeclaringType().getIdentifier(),
						StyledString.COUNTER_STYLER));
				return factory.createXtendFeatureNode(parentNode, jvmFeature, image, label, true, synthetic, inheritanceDepth);
			}
			return null;
		} else {
			return factory.createXtendFeatureNode(parentNode, semanticFeature, image, text, true, synthetic, inheritanceDepth);
		}
	}

	private int currentModeIndex = 0;

	public List<OutlineMode> getOutlineModes() {
		return MODES;
	}
	
	public OutlineMode getCurrentMode() {
		return getOutlineModes().get(currentModeIndex);
	}
	
	public OutlineMode getNextMode() {
		return getOutlineModes().get((currentModeIndex + 1) % getOutlineModes().size());
	}
	
	public void setCurrentMode(OutlineMode outlineMode) {
		int newIndex = getOutlineModes().indexOf(outlineMode);
		if(newIndex != -1)
			currentModeIndex = newIndex;
	}
}
