/*
* generated by Xtext
*/
package org.summer.dsl.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XExpression:
		//	XAssignment;
		public ParserRule getRule() { return rule; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall() { return cXAssignmentParserRuleCall; }
	}

	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueXMultiAssignmentParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		////XAssignment returns XExpression :
		//
		////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		//
		////	XOrExpression (
		//
		////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//
		////	)?;
		// XAssignment returns XExpression:
		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment (=>
		//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
		public ParserRule getRule() { return rule; }

		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment (=>
		//({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?
		public Group getGroup() { return cGroup; }

		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment
		public RuleCall getXMultiAssignmentParserRuleCall_0() { return cXMultiAssignmentParserRuleCall_0; }

		//(=> ({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XAssignment.assignable=current} OpSingleAssign)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XAssignment.assignable=current} OpSingleAssign
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_1() { return cOpSingleAssignParserRuleCall_1_0_0_1; }

		//value=XMultiAssignment
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//XMultiAssignment
		public RuleCall getValueXMultiAssignmentParserRuleCall_1_1_0() { return cValueXMultiAssignmentParserRuleCall_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class XMultiAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiAssignment returns XExpression:
		//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//	rightOperand=XOrExpression)*;
		public ParserRule getRule() { return rule; }

		//XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//rightOperand=XOrExpression)*
		public Group getGroup() { return cGroup; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_0() { return cXOrExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//rightOperand=XOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpMultiAssign]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpMultiAssign
		public RuleCall getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XOrExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XOrExpression
		public RuleCall getRightOperandXOrExpressionParserRuleCall_1_1_0() { return cRightOperandXOrExpressionParserRuleCall_1_1_0; }
	}

	public class XOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOrExpression returns XExpression:
		//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//	rightOperand=XAndExpression)*;
		public ParserRule getRule() { return rule; }

		//XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//rightOperand=XAndExpression)*
		public Group getGroup() { return cGroup; }

		//XAndExpression
		public RuleCall getXAndExpressionParserRuleCall_0() { return cXAndExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpOr]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpOr]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpOr
		public RuleCall getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAndExpression
		public RuleCall getRightOperandXAndExpressionParserRuleCall_1_1_0() { return cRightOperandXAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAndExpression returns XExpression:
		//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//	rightOperand=XEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpAnd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpAnd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpAnd
		public RuleCall getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class XEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XEqualityExpression returns XExpression:
		//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//	rightOperand=XRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=XRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//XRelationalExpression
		public RuleCall getXRelationalExpressionParserRuleCall_0() { return cXRelationalExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=XRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpEquality]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpEquality]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpEquality
		public RuleCall getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XRelationalExpression
		public RuleCall getRightOperandXRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandXRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpEquality:
		//	"==" | "!=" | "===" | "!==";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "===" | "!=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//XRelationalExpression returns XExpression:
		//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//	rightOperand=XBitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//XBitwiseExpression
		public RuleCall getXBitwiseExpressionParserRuleCall_0() { return cXBitwiseExpressionParserRuleCall_0; }

		//(=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XInstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1; }

		//rightOperand=XBitwiseExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//XBitwiseExpression
		public RuleCall getRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0() { return cRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cGroup_6_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6_1_0_1 = (Keyword)cGroup_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cAmpersandEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCircumflexAccentEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//OpMultiAssign:
		//	"*=" //	| '<' '<='
		// //	| '>' '>='
		// //	| '>' '>' '>='
		// //	| '>' '>'? '>='
		// //	| '<<=' 
		// //	| '>>='
		// //	| '>>>='
		// |
		//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
		public ParserRule getRule() { return rule; }

		//"*=" //	| '<' '<='
		// //	| '>' '>='
		// //	| '>' '>' '>='
		// //	| '>' '>'? '>='
		// //	| '<<=' 
		// //	| '>>='
		// //	| '>>>='
		// | "/=" |
		//"%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_0() { return cAsteriskEqualsSignKeyword_0; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_1() { return cSolidusEqualsSignKeyword_1; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_2() { return cPercentSignEqualsSignKeyword_2; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_4() { return cHyphenMinusEqualsSignKeyword_4; }

		//">" => ">="
		public Group getGroup_5() { return cGroup_5; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_0() { return cGreaterThanSignKeyword_5_0; }

		//=> ">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5_1() { return cGreaterThanSignEqualsSignKeyword_5_1; }

		//">" => (">" ">=")
		public Group getGroup_6() { return cGroup_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0() { return cGreaterThanSignKeyword_6_0; }

		//=> (">" ">=")
		public Group getGroup_6_1() { return cGroup_6_1; }

		//">" ">="
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_1_0_0() { return cGreaterThanSignKeyword_6_1_0_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6_1_0_1() { return cGreaterThanSignEqualsSignKeyword_6_1_0_1; }

		//"<" => "<="
		public Group getGroup_7() { return cGroup_7; }

		//"<"
		public Keyword getLessThanSignKeyword_7_0() { return cLessThanSignKeyword_7_0; }

		//=> "<="
		public Keyword getLessThanSignEqualsSignKeyword_7_1() { return cLessThanSignEqualsSignKeyword_7_1; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_8() { return cAmpersandEqualsSignKeyword_8; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_9() { return cCircumflexAccentEqualsSignKeyword_9; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_10() { return cVerticalLineEqualsSignKeyword_10; }
	}

	public class ShiftOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ShiftOp:
		//	">" => (">" ">") | ">" => ">" | "<" => "<";
		public ParserRule getRule() { return rule; }

		//">" => (">" ">") | ">" => ">" | "<" => "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">" => (">" ">")
		public Group getGroup_0() { return cGroup_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }

		//=> (">" ">")
		public Group getGroup_0_1() { return cGroup_0_1; }

		//">" ">"
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_0_0() { return cGreaterThanSignKeyword_0_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_0_1() { return cGreaterThanSignKeyword_0_1_0_1; }

		//">" => ">"
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//=> ">"
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }

		//"<" => "<"
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//=> "<"
		public Keyword getLessThanSignKeyword_2_1() { return cLessThanSignKeyword_2_1; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class XBitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXShiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XBitwiseExpression returns XExpression:
		//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//	rightOperand=XShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//rightOperand=XShiftExpression)*
		public Group getGroup() { return cGroup; }

		//XShiftExpression
		public RuleCall getXShiftExpressionParserRuleCall_0() { return cXShiftExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//rightOperand=XShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//BinaryBitwiseOp
		public RuleCall getFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XShiftExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XShiftExpression
		public RuleCall getRightOperandXShiftExpressionParserRuleCall_1_1_0() { return cRightOperandXShiftExpressionParserRuleCall_1_1_0; }
	}

	public class BinaryBitwiseOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBitwiseOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BinaryBitwiseOp:
		//	"&" | "|" | "^";
		public ParserRule getRule() { return rule; }

		//"&" | "|" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
	}

	public class XShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XShiftExpression returns XExpression:
		//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//	rightOperand=XAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//rightOperand=XAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_0() { return cXAdditiveExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//rightOperand=XAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|ShiftOp]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|ShiftOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//ShiftOp
		public RuleCall getFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandXAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXTernaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAdditiveExpression returns XExpression:
		//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//	rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XTernaryOperation
		public RuleCall getXTernaryOperationParserRuleCall_0() { return cXTernaryOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpAdd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpAdd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpAdd
		public RuleCall getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class XTernaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTernaryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXTernaryOperationConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTrueOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTrueOperandXExpressionParserRuleCall_1_1_0 = (RuleCall)cTrueOperandAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFalseOperandAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFalseOperandXExpressionParserRuleCall_1_3_0 = (RuleCall)cFalseOperandAssignment_1_3.eContents().get(0);
		
		////	ternary operator
		// XTernaryOperation returns XExpression:
		//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
		//	falseOperand=XExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
		//falseOperand=XExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":" falseOperand=XExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XTernaryOperation.condition=current} "?")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XTernaryOperation.condition=current} "?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XTernaryOperation.condition=current}
		public Action getXTernaryOperationConditionAction_1_0_0_0() { return cXTernaryOperationConditionAction_1_0_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//trueOperand=XExpression
		public Assignment getTrueOperandAssignment_1_1() { return cTrueOperandAssignment_1_1; }

		//XExpression
		public RuleCall getTrueOperandXExpressionParserRuleCall_1_1_0() { return cTrueOperandXExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//falseOperand=XExpression
		public Assignment getFalseOperandAssignment_1_3() { return cFalseOperandAssignment_1_3; }

		//XExpression
		public RuleCall getFalseOperandXExpressionParserRuleCall_1_3_0() { return cFalseOperandXExpressionParserRuleCall_1_3_0; }
	}

	public class XMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPostfixOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXPostfixOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiplicativeExpression returns XExpression:
		//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//	rightOperand=XPostfixOperation)*;
		public ParserRule getRule() { return rule; }

		//XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//rightOperand=XPostfixOperation)*
		public Group getGroup() { return cGroup; }

		//XPostfixOperation
		public RuleCall getXPostfixOperationParserRuleCall_0() { return cXPostfixOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//rightOperand=XPostfixOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpMulti]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpMulti]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpMulti
		public RuleCall getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XPostfixOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XPostfixOperation
		public RuleCall getRightOperandXPostfixOperationParserRuleCall_1_1_0() { return cRightOperandXPostfixOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class XPostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cXPostfixOperationOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_1_0 = (CrossReference)cFeatureAssignment_1_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_1_0.eContents().get(1);
		
		////postfix for incessantly
		// XPostfixOperation returns XExpression:
		//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
		public ParserRule getRule() { return rule; }

		//XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*
		public Group getGroup() { return cGroup; }

		//XUnaryOperation
		public RuleCall getXUnaryOperationParserRuleCall_0() { return cXUnaryOperationParserRuleCall_0; }

		//=> ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*
		public Group getGroup_1() { return cGroup_1; }

		//{XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XPostfixOperation.operand=current}
		public Action getXPostfixOperationOperandAction_1_0_0() { return cXPostfixOperationOperandAction_1_0_0; }

		//feature=[types::JvmIdentifiableElement|PrefixOp]
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//[types::JvmIdentifiableElement|PrefixOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_1_0; }

		//PrefixOp
		public RuleCall getFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1() { return cFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1; }
	}

	public class PrefixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PrefixOp:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXCastedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns XExpression:
		//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
		public ParserRule getRule() { return rule; }

		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XUnaryOperation
		public RuleCall getOperandXUnaryOperationParserRuleCall_0_2_0() { return cOperandXUnaryOperationParserRuleCall_0_2_0; }

		//XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_1() { return cXCastedExpressionParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpUnary:
		//	"!" | "-" | "+" | "~" | "++" | "--";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+" | "~" | "++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_4() { return cPlusSignPlusSignKeyword_4; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_5() { return cHyphenMinusHyphenMinusKeyword_5; }
	}

	public class XCastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMemberFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXCastedExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		////DeleteExpression returns XExpression:
		// //	'delete' 
		// //;
		// XCastedExpression returns XExpression:
		//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
		public ParserRule getRule() { return rule; }

		//XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*
		public Group getGroup() { return cGroup; }

		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_0() { return cXMemberFeatureCallParserRuleCall_0; }

		//(=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XCastedExpression.target=current} "as")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XCastedExpression.target=current} "as"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XCastedExpression.target=current}
		public Action getXCastedExpressionTargetAction_1_0_0_0() { return cXCastedExpressionTargetAction_1_0_0_0; }

		//"as"
		public Keyword getAsKeyword_1_0_0_1() { return cAsKeyword_1_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXCallerFunctionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_1_0_1_0_0 = (RuleCall)cArgumentsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_1_0_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXIndexerSourceAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_1_1_1_0_0 = (RuleCall)cArgumentsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2_0_0_2 = (Assignment)cGroup_1_2_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_2_0_0_2_0 = (CrossReference)cFeatureAssignment_1_2_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_2_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_2_0_0_3 = (RuleCall)cGroup_1_2_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_2_1_0 = (RuleCall)cValueAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_0_0 = (Group)cGroup_1_3_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_3_0_0_0 = (Action)cGroup_1_3_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_3_0_0_1 = (Alternatives)cGroup_1_3_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_3_0_0_1_0 = (Keyword)cAlternatives_1_3_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_3_0_0_1_1 = (Assignment)cAlternatives_1_3_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_3_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_3_0_0_1_1.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_3_1_1.eContents().get(0);
		private final Group cGroup_1_3_1_2 = (Group)cGroup_1_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_1_2_0 = (Keyword)cGroup_1_3_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_3_1_2_1 = (Assignment)cGroup_1_3_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_3_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3_1_3 = (Keyword)cGroup_1_3_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_3_2_0 = (CrossReference)cFeatureAssignment_1_3_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_3_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_3_2_0.eContents().get(1);
		private final Group cGroup_1_3_3 = (Group)cGroup_1_3.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_3_3_0 = (Assignment)cGroup_1_3_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_3_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_3_3_0.eContents().get(0);
		private final Group cGroup_1_3_3_1 = (Group)cGroup_1_3_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_3_3_1_0 = (Assignment)cGroup_1_3_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_3_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_3_1_1 = (Group)cGroup_1_3_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_3_1_1_0 = (Keyword)cGroup_1_3_3_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_3_3_1_1_1 = (Assignment)cGroup_1_3_3_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_3_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3_2 = (Keyword)cGroup_1_3_3.eContents().get(2);
		
		//XMemberFeatureCall returns XExpression:
		//	XPrimaryExpression (=> ({XCaller.function=current} "(") (arguments+=XExpression ("," arguments+=XExpression)*)? ")" |
		//	=> ({XIndexer.source=current} "[") (arguments+=XExpression ("," arguments+=XExpression)*)? "]" | =>
		//	({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		//	value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")) ("<"
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
		//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression (=> ({XCaller.function=current} "(") (arguments+=XExpression ("," arguments+=XExpression)*)? ")" | =>
		//({XIndexer.source=current} "[") (arguments+=XExpression ("," arguments+=XExpression)*)? "]" | =>
		//({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		//value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression
		//("," memberCallArguments+=XExpression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//(=> ({XCaller.function=current} "(") (arguments+=XExpression ("," arguments+=XExpression)*)? ")" | =>
		//({XIndexer.source=current} "[") (arguments+=XExpression ("," arguments+=XExpression)*)? "]" | =>
		//({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		//value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression
		//("," memberCallArguments+=XExpression)*)? ")")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XCaller.function=current} "(") (arguments+=XExpression ("," arguments+=XExpression)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XCaller.function=current} "(")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XCaller.function=current} "("
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XCaller.function=current}
		public Action getXCallerFunctionAction_1_0_0_0_0() { return cXCallerFunctionAction_1_0_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0_0_1() { return cLeftParenthesisKeyword_1_0_0_0_1; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_1_0_1_0() { return cArgumentsAssignment_1_0_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_1_0_1_0_0() { return cArgumentsXExpressionParserRuleCall_1_0_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_1_0_1_1_1() { return cArgumentsAssignment_1_0_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_1_0_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_1_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//=> ({XIndexer.source=current} "[") (arguments+=XExpression ("," arguments+=XExpression)*)? "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XIndexer.source=current} "[")
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XIndexer.source=current} "["
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XIndexer.source=current}
		public Action getXIndexerSourceAction_1_1_0_0_0() { return cXIndexerSourceAction_1_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_0_1() { return cLeftSquareBracketKeyword_1_1_0_0_1; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_1_1_1_0() { return cArgumentsAssignment_1_1_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_1_1_1_0_0() { return cArgumentsXExpressionParserRuleCall_1_1_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_1_1_1_1_1() { return cArgumentsAssignment_1_1_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_1_1_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_1_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }

		//=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		//value=XAssignment
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_2_0_0_0() { return cXAssignmentAssignableAction_1_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_0_1() { return cFullStopKeyword_1_2_0_0_1; }

		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_2_0_0_2() { return cFeatureAssignment_1_2_0_0_2; }

		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_2_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_2_0_0_2_0; }

		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_2_0_0_3() { return cOpSingleAssignParserRuleCall_1_2_0_0_3; }

		//value=XAssignment
		public Assignment getValueAssignment_1_2_1() { return cValueAssignment_1_2_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_2_1_0() { return cValueXAssignmentParserRuleCall_1_2_1_0; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")) ("<" typeArguments+=JvmArgumentTypeReference
		//("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|FeatureCallID] (=>
		//explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?."))
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//{XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")
		public Group getGroup_1_3_0_0() { return cGroup_1_3_0_0; }

		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_3_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_3_0_0_0; }

		//"." | nullSafe?="?."
		public Alternatives getAlternatives_1_3_0_0_1() { return cAlternatives_1_3_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_3_0_0_1_0() { return cFullStopKeyword_1_3_0_0_1_0; }

		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_3_0_0_1_1() { return cNullSafeAssignment_1_3_0_0_1_1; }

		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_3_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_3_0_0_1_1_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_3_1_0() { return cLessThanSignKeyword_1_3_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_3_1_1() { return cTypeArgumentsAssignment_1_3_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_3_1_2() { return cGroup_1_3_1_2; }

		//","
		public Keyword getCommaKeyword_1_3_1_2_0() { return cCommaKeyword_1_3_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_3_1_2_1() { return cTypeArgumentsAssignment_1_3_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_3_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3_1_3() { return cGreaterThanSignKeyword_1_3_1_3; }

		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_3_2() { return cFeatureAssignment_1_3_2; }

		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_3_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_3_2_0; }

		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_3_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_3_2_0_1; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_3_3() { return cGroup_1_3_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_3_3_0() { return cExplicitOperationCallAssignment_1_3_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_3_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_3_3_0_0; }

		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Group getGroup_1_3_3_1() { return cGroup_1_3_3_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_3_3_1_0() { return cMemberCallArgumentsAssignment_1_3_3_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_3_3_1_1() { return cGroup_1_3_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_3_1_1_0() { return cCommaKeyword_1_3_3_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_3_3_1_1_1() { return cMemberCallArgumentsAssignment_1_3_3_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_3_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_3_2() { return cRightParenthesisKeyword_1_3_3_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XPrimaryExpression returns XExpression:
		//	XConstructorCall | XFeatureCall | XLiteral | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XFeatureCall | XLiteral | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_1() { return cXFeatureCallParserRuleCall_1; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_2() { return cXLiteralParserRuleCall_2; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_3() { return cXParenthesizedExpressionParserRuleCall_3; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXObjectLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXStructLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXArrayLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXClosureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXBooleanLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXNumberLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXNullLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXStringLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXTypeLiteralParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXTemplateLiteralParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//XLiteral returns XExpression: //	XCollectionLiteral |
		// XObjectLiteral | XStructLiteral | XArrayLiteral | XClosure |
		//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | XTemplateLiteral;
		public ParserRule getRule() { return rule; }

		////	XCollectionLiteral |
		// XObjectLiteral | XStructLiteral | XArrayLiteral | XClosure | XBooleanLiteral | XNumberLiteral |
		//XNullLiteral | XStringLiteral | XTypeLiteral | XTemplateLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		////	XCollectionLiteral |
		// XObjectLiteral
		public RuleCall getXObjectLiteralParserRuleCall_0() { return cXObjectLiteralParserRuleCall_0; }

		//XStructLiteral
		public RuleCall getXStructLiteralParserRuleCall_1() { return cXStructLiteralParserRuleCall_1; }

		//XArrayLiteral
		public RuleCall getXArrayLiteralParserRuleCall_2() { return cXArrayLiteralParserRuleCall_2; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_3() { return cXClosureParserRuleCall_3; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_4() { return cXBooleanLiteralParserRuleCall_4; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_5() { return cXNumberLiteralParserRuleCall_5; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_6() { return cXNullLiteralParserRuleCall_6; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_7() { return cXStringLiteralParserRuleCall_7; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_8() { return cXTypeLiteralParserRuleCall_8; }

		//XTemplateLiteral
		public RuleCall getXTemplateLiteralParserRuleCall_9() { return cXTemplateLiteralParserRuleCall_9; }
	}

	public class XStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStatment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBlockStatmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXSwitchStatmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXIfStatmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXForLoopStatmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXForEachStatmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXWhileStatmentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXDoWhileStatmentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXThrowStatmentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXReturnStatmentParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXTryCatchFinallyStatmentParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXBreakStatmentParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXContinueStatmentParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXFunctionDeclarationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXExpressionStatmentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXVariableDeclarationListParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//XStatment:
		//	XBlockStatment | XSwitchStatment | XIfStatment | XForLoopStatment | XForEachStatment | XWhileStatment |
		//	XDoWhileStatment | XThrowStatment | XReturnStatment | XTryCatchFinallyStatment | XBreakStatment | XContinueStatment |
		//	XFunctionDeclaration | XExpressionStatment | XVariableDeclarationList;
		public ParserRule getRule() { return rule; }

		//XBlockStatment | XSwitchStatment | XIfStatment | XForLoopStatment | XForEachStatment | XWhileStatment | XDoWhileStatment
		//| XThrowStatment | XReturnStatment | XTryCatchFinallyStatment | XBreakStatment | XContinueStatment |
		//XFunctionDeclaration | XExpressionStatment | XVariableDeclarationList
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBlockStatment
		public RuleCall getXBlockStatmentParserRuleCall_0() { return cXBlockStatmentParserRuleCall_0; }

		//XSwitchStatment
		public RuleCall getXSwitchStatmentParserRuleCall_1() { return cXSwitchStatmentParserRuleCall_1; }

		//XIfStatment
		public RuleCall getXIfStatmentParserRuleCall_2() { return cXIfStatmentParserRuleCall_2; }

		//XForLoopStatment
		public RuleCall getXForLoopStatmentParserRuleCall_3() { return cXForLoopStatmentParserRuleCall_3; }

		//XForEachStatment
		public RuleCall getXForEachStatmentParserRuleCall_4() { return cXForEachStatmentParserRuleCall_4; }

		//XWhileStatment
		public RuleCall getXWhileStatmentParserRuleCall_5() { return cXWhileStatmentParserRuleCall_5; }

		//XDoWhileStatment
		public RuleCall getXDoWhileStatmentParserRuleCall_6() { return cXDoWhileStatmentParserRuleCall_6; }

		//XThrowStatment
		public RuleCall getXThrowStatmentParserRuleCall_7() { return cXThrowStatmentParserRuleCall_7; }

		//XReturnStatment
		public RuleCall getXReturnStatmentParserRuleCall_8() { return cXReturnStatmentParserRuleCall_8; }

		//XTryCatchFinallyStatment
		public RuleCall getXTryCatchFinallyStatmentParserRuleCall_9() { return cXTryCatchFinallyStatmentParserRuleCall_9; }

		//XBreakStatment
		public RuleCall getXBreakStatmentParserRuleCall_10() { return cXBreakStatmentParserRuleCall_10; }

		//XContinueStatment
		public RuleCall getXContinueStatmentParserRuleCall_11() { return cXContinueStatmentParserRuleCall_11; }

		//XFunctionDeclaration
		public RuleCall getXFunctionDeclarationParserRuleCall_12() { return cXFunctionDeclarationParserRuleCall_12; }

		//XExpressionStatment
		public RuleCall getXExpressionStatmentParserRuleCall_13() { return cXExpressionStatmentParserRuleCall_13; }

		//XVariableDeclarationList
		public RuleCall getXVariableDeclarationListParserRuleCall_14() { return cXVariableDeclarationListParserRuleCall_14; }
	}

	public class XExpressionStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionXExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XExpressionStatment:
		//	expression=XExpression ";"?;
		public ParserRule getRule() { return rule; }

		//expression=XExpression ";"?
		public Group getGroup() { return cGroup; }

		//expression=XExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_0_0() { return cExpressionXExpressionParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class XClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXClosureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclaredFormalParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatmentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatmentXBlockStatmentParserRuleCall_5_0 = (RuleCall)cStatmentAssignment_5.eContents().get(0);
		
		//XClosure returns XExpression:
		//	{XClosure} "function" "(" (declaredFormalParameters+=JvmFormalParameter (","
		//	declaredFormalParameters+=JvmFormalParameter)*)? ")" statment=XBlockStatment;
		public ParserRule getRule() { return rule; }

		//{XClosure} "function" "(" (declaredFormalParameters+=JvmFormalParameter (","
		//declaredFormalParameters+=JvmFormalParameter)*)? ")" statment=XBlockStatment
		public Group getGroup() { return cGroup; }

		//{XClosure}
		public Action getXClosureAction_0() { return cXClosureAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_3_0() { return cDeclaredFormalParametersAssignment_3_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_0; }

		//("," declaredFormalParameters+=JvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_3_1_1() { return cDeclaredFormalParametersAssignment_3_1_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_1_1_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statment=XBlockStatment
		public Assignment getStatmentAssignment_5() { return cStatmentAssignment_5; }

		//XBlockStatment
		public RuleCall getStatmentXBlockStatmentParserRuleCall_5_0() { return cStatmentXBlockStatmentParserRuleCall_5_0; }
	}

	public class XFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExportedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExportedExportKeyword_1_0 = (Keyword)cExportedAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_3_0_1_0 = (RuleCall)cTypeParametersAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_3_0_2_1_0 = (RuleCall)cTypeParametersAssignment_3_0_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Assignment cSimpleNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSimpleNameValidIDParserRuleCall_5_0 = (RuleCall)cSimpleNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cDeclaredFormalParametersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyXBlockStatmentParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		
		//XFunctionDeclaration:
		//	{XFunctionDeclaration} exported?="export"? "function" => ("<" typeParameters+=JvmTypeParameter (","
		//	typeParameters+=JvmTypeParameter)* ">")? returnType=JvmTypeReference simpleName=ValidID "("
		//	(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")"
		//	//		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		// body=XBlockStatment;
		public ParserRule getRule() { return rule; }

		//{XFunctionDeclaration} exported?="export"? "function" => ("<" typeParameters+=JvmTypeParameter (","
		//typeParameters+=JvmTypeParameter)* ">")? returnType=JvmTypeReference simpleName=ValidID "("
		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")"
		////		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		// body=XBlockStatment
		public Group getGroup() { return cGroup; }

		//{XFunctionDeclaration}
		public Action getXFunctionDeclarationAction_0() { return cXFunctionDeclarationAction_0; }

		//exported?="export"?
		public Assignment getExportedAssignment_1() { return cExportedAssignment_1; }

		//"export"
		public Keyword getExportedExportKeyword_1_0() { return cExportedExportKeyword_1_0; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//=> ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0_0() { return cLessThanSignKeyword_3_0_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_3_0_1() { return cTypeParametersAssignment_3_0_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_3_0_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_3_0_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }

		//","
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_3_0_2_1() { return cTypeParametersAssignment_3_0_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_3_0_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_3_0_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0_3() { return cGreaterThanSignKeyword_3_0_3; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_4_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_4_0; }

		//simpleName=ValidID
		public Assignment getSimpleNameAssignment_5() { return cSimpleNameAssignment_5; }

		//ValidID
		public RuleCall getSimpleNameValidIDParserRuleCall_5_0() { return cSimpleNameValidIDParserRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_7_0() { return cDeclaredFormalParametersAssignment_7_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_0_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_0_0; }

		//("," declaredFormalParameters+=JvmFormalParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_7_1_1() { return cDeclaredFormalParametersAssignment_7_1_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_1_1_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		////		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		// body=XBlockStatment
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }

		//XBlockStatment
		public RuleCall getBodyXBlockStatmentParserRuleCall_9_0() { return cBodyXBlockStatmentParserRuleCall_9_0; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression returns XExpression:
		//	"(" XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XIfStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenXStatmentParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseXStatmentParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//XIfStatment returns XStatment:
		//	{XIfStatment} "if" "(" if=XExpression ")" then=XStatment ("else" else=XStatment)?;
		public ParserRule getRule() { return rule; }

		//{XIfStatment} "if" "(" if=XExpression ")" then=XStatment ("else" else=XStatment)?
		public Group getGroup() { return cGroup; }

		//{XIfStatment}
		public Action getXIfStatmentAction_0() { return cXIfStatmentAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=XStatment
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//XStatment
		public RuleCall getThenXStatmentParserRuleCall_5_0() { return cThenXStatmentParserRuleCall_5_0; }

		//(=> "else" else=XStatment)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=XStatment
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//XStatment
		public RuleCall getElseXStatmentParserRuleCall_6_1_0() { return cElseXStatmentParserRuleCall_6_1_0; }
	}

	public class XSwitchStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchXExpressionParserRuleCall_3_0 = (RuleCall)cSwitchAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesXCasePartParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDefaultAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDefaultXStatmentParserRuleCall_7_2_0 = (RuleCall)cDefaultAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XSwitchStatment returns XStatment:
		//	{XSwitchStatment} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":" default=XStatment)? "}";
		public ParserRule getRule() { return rule; }

		//{XSwitchStatment} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":" default=XStatment)? "}"
		public Group getGroup() { return cGroup; }

		//{XSwitchStatment}
		public Action getXSwitchStatmentAction_0() { return cXSwitchStatmentAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_3() { return cSwitchAssignment_3; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_3_0() { return cSwitchXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//cases+=XCasePart*
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_6_0() { return cCasesXCasePartParserRuleCall_6_0; }

		//("default" ":" default=XStatment)?
		public Group getGroup_7() { return cGroup_7; }

		//"default"
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//default=XStatment
		public Assignment getDefaultAssignment_7_2() { return cDefaultAssignment_7_2; }

		//XStatment
		public RuleCall getDefaultXStatmentParserRuleCall_7_2_0() { return cDefaultXStatmentParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseXExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenXStatmentParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//XCasePart:
		//	"case" case=XExpression ":" then=XStatment;
		public ParserRule getRule() { return rule; }

		//"case" case=XExpression ":" then=XStatment
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=XExpression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_1_0() { return cCaseXExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=XStatment
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//XStatment
		public RuleCall getThenXStatmentParserRuleCall_3_0() { return cThenXStatmentParserRuleCall_3_0; }
	}

	public class XForLoopStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForLoopStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cInitialAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cInitialXExpressionParserRuleCall_3_0_0_0 = (RuleCall)cInitialAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cAlternatives_3_0.eContents().get(1);
		private final Keyword cVarKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_1_0 = (RuleCall)cVariableDeclarationsAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_0_1_2 = (Group)cGroup_3_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_1_2_0 = (Keyword)cGroup_3_0_1_2.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_3_0_1_2_1 = (Assignment)cGroup_3_0_1_2.eContents().get(1);
		private final RuleCall cVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_2_1_0 = (RuleCall)cVariableDeclarationsAssignment_3_0_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cConditionXExpressionParserRuleCall_4_0_0_0 = (RuleCall)cConditionAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIncrementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIncrementXExpressionParserRuleCall_5_0 = (RuleCall)cIncrementAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatmentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatmentXStatmentParserRuleCall_7_0 = (RuleCall)cStatmentAssignment_7.eContents().get(0);
		
		//XForLoopStatment returns XStatment:
		//	{XForLoopStatment} "for" "(" ((initial=XExpression? | "var" variableDeclarations+=XVariableDeclaration (","
		//	variableDeclarations+=XVariableDeclaration)*) ";") (=> (condition=XExpression)? ";") increment=XExpression? ")"
		//	statment=XStatment;
		public ParserRule getRule() { return rule; }

		//{XForLoopStatment} "for" "(" ((initial=XExpression? | "var" variableDeclarations+=XVariableDeclaration (","
		//variableDeclarations+=XVariableDeclaration)*) ";") (=> (condition=XExpression)? ";") increment=XExpression? ")"
		//statment=XStatment
		public Group getGroup() { return cGroup; }

		//{XForLoopStatment}
		public Action getXForLoopStatmentAction_0() { return cXForLoopStatmentAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(initial=XExpression? | "var" variableDeclarations+=XVariableDeclaration (","
		//variableDeclarations+=XVariableDeclaration)*) ";"
		public Group getGroup_3() { return cGroup_3; }

		//initial=XExpression? | "var" variableDeclarations+=XVariableDeclaration (","
		//variableDeclarations+=XVariableDeclaration)*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//initial=XExpression?
		public Assignment getInitialAssignment_3_0_0() { return cInitialAssignment_3_0_0; }

		//XExpression
		public RuleCall getInitialXExpressionParserRuleCall_3_0_0_0() { return cInitialXExpressionParserRuleCall_3_0_0_0; }

		//"var" variableDeclarations+=XVariableDeclaration ("," variableDeclarations+=XVariableDeclaration)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//"var"
		public Keyword getVarKeyword_3_0_1_0() { return cVarKeyword_3_0_1_0; }

		//variableDeclarations+=XVariableDeclaration
		public Assignment getVariableDeclarationsAssignment_3_0_1_1() { return cVariableDeclarationsAssignment_3_0_1_1; }

		//XVariableDeclaration
		public RuleCall getVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_1_0() { return cVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_1_0; }

		//("," variableDeclarations+=XVariableDeclaration)*
		public Group getGroup_3_0_1_2() { return cGroup_3_0_1_2; }

		//","
		public Keyword getCommaKeyword_3_0_1_2_0() { return cCommaKeyword_3_0_1_2_0; }

		//variableDeclarations+=XVariableDeclaration
		public Assignment getVariableDeclarationsAssignment_3_0_1_2_1() { return cVariableDeclarationsAssignment_3_0_1_2_1; }

		//XVariableDeclaration
		public RuleCall getVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_2_1_0() { return cVariableDeclarationsXVariableDeclarationParserRuleCall_3_0_1_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//=> (condition=XExpression)? ";"
		public Group getGroup_4() { return cGroup_4; }

		//=> (condition=XExpression)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//condition=XExpression
		public Assignment getConditionAssignment_4_0_0() { return cConditionAssignment_4_0_0; }

		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_4_0_0_0() { return cConditionXExpressionParserRuleCall_4_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//increment=XExpression?
		public Assignment getIncrementAssignment_5() { return cIncrementAssignment_5; }

		//XExpression
		public RuleCall getIncrementXExpressionParserRuleCall_5_0() { return cIncrementXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//statment=XStatment
		public Assignment getStatmentAssignment_7() { return cStatmentAssignment_7; }

		//XStatment
		public RuleCall getStatmentXStatmentParserRuleCall_7_0() { return cStatmentXStatmentParserRuleCall_7_0; }
	}

	public class XForEachStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForEachStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForEachStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_3_0 = (RuleCall)cDeclaredParamAssignment_3.eContents().get(0);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatmentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatmentXStatmentParserRuleCall_7_0 = (RuleCall)cStatmentAssignment_7.eContents().get(0);
		
		//XForEachStatment returns XStatment:
		//	{XForEachStatment} "foreach" "(" declaredParam=JvmFormalParameter "of" expression=XExpression ")" statment=XStatment;
		public ParserRule getRule() { return rule; }

		//{XForEachStatment} "foreach" "(" declaredParam=JvmFormalParameter "of" expression=XExpression ")" statment=XStatment
		public Group getGroup() { return cGroup; }

		//{XForEachStatment}
		public Action getXForEachStatmentAction_0() { return cXForEachStatmentAction_0; }

		//"foreach"
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_3() { return cDeclaredParamAssignment_3; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_3_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_3_0; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//expression=XExpression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_5_0() { return cExpressionXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//statment=XStatment
		public Assignment getStatmentAssignment_7() { return cStatmentAssignment_7; }

		//XStatment
		public RuleCall getStatmentXStatmentParserRuleCall_7_0() { return cStatmentXStatmentParserRuleCall_7_0; }
	}

	public class XWhileStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXStatmentParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XWhileStatment returns XStatment:
		//	{XWhileStatment} "while" "(" predicate=XExpression ")" body=XStatment;
		public ParserRule getRule() { return rule; }

		//{XWhileStatment} "while" "(" predicate=XExpression ")" body=XStatment
		public Group getGroup() { return cGroup; }

		//{XWhileStatment}
		public Action getXWhileStatmentAction_0() { return cXWhileStatmentAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_3_0() { return cPredicateXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XStatment
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XStatment
		public RuleCall getBodyXStatmentParserRuleCall_5_0() { return cBodyXStatmentParserRuleCall_5_0; }
	}

	public class XDoWhileStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDoWhileStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXStatmentParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateXExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XDoWhileStatment returns XStatment:
		//	{XDoWhileStatment} "do" body=XStatment "while" "(" predicate=XExpression ")";
		public ParserRule getRule() { return rule; }

		//{XDoWhileStatment} "do" body=XStatment "while" "(" predicate=XExpression ")"
		public Group getGroup() { return cGroup; }

		//{XDoWhileStatment}
		public Action getXDoWhileStatmentAction_0() { return cXDoWhileStatmentAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=XStatment
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XStatment
		public RuleCall getBodyXStatmentParserRuleCall_2_0() { return cBodyXStatmentParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_5_0() { return cPredicateXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class XBlockStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatmentsXStatmentParserRuleCall_2_0 = (RuleCall)cStatmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockStatment returns XStatment:
		//	{XBlockStatment} "{" statments+=XStatment* "}";
		public ParserRule getRule() { return rule; }

		//{XBlockStatment} "{" statments+=XStatment* "}"
		public Group getGroup() { return cGroup; }

		//{XBlockStatment}
		public Action getXBlockStatmentAction_0() { return cXBlockStatmentAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statments+=XStatment*
		public Assignment getStatmentsAssignment_2() { return cStatmentsAssignment_2; }

		//XStatment
		public RuleCall getStatmentsXStatmentParserRuleCall_2_0() { return cStatmentsXStatmentParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XVariableDeclarationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclarationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExportedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExportedExportKeyword_1_0 = (Keyword)cExportedAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cVarKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cReadonlyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cReadonlyConstKeyword_2_1_0 = (Keyword)cReadonlyAssignment_2_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsXVariableDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclarationsXVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XVariableDeclarationList returns XStatment:
		//	{XVariableDeclarationList} exported?="export"? ("var" | readonly?="const") declarations+=XVariableDeclaration (","
		//	declarations+=XVariableDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//{XVariableDeclarationList} exported?="export"? ("var" | readonly?="const") declarations+=XVariableDeclaration (","
		//declarations+=XVariableDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//{XVariableDeclarationList}
		public Action getXVariableDeclarationListAction_0() { return cXVariableDeclarationListAction_0; }

		//exported?="export"?
		public Assignment getExportedAssignment_1() { return cExportedAssignment_1; }

		//"export"
		public Keyword getExportedExportKeyword_1_0() { return cExportedExportKeyword_1_0; }

		//"var" | readonly?="const"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"var"
		public Keyword getVarKeyword_2_0() { return cVarKeyword_2_0; }

		//readonly?="const"
		public Assignment getReadonlyAssignment_2_1() { return cReadonlyAssignment_2_1; }

		//"const"
		public Keyword getReadonlyConstKeyword_2_1_0() { return cReadonlyConstKeyword_2_1_0; }

		//declarations+=XVariableDeclaration
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//XVariableDeclaration
		public RuleCall getDeclarationsXVariableDeclarationParserRuleCall_3_0() { return cDeclarationsXVariableDeclarationParserRuleCall_3_0; }

		//("," declarations+=XVariableDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//declarations+=XVariableDeclaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }

		//XVariableDeclaration
		public RuleCall getDeclarationsXVariableDeclarationParserRuleCall_4_1_0() { return cDeclarationsXVariableDeclarationParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0 = (RuleCall)cTypeAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0_1_0 = (RuleCall)cNameAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cRightAssignment_2_0_1.eContents().get(0);
		
		//XVariableDeclaration returns XExpression:
		//	{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//=> (type=JvmTypeReference name=ValidID) | name=ValidID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> (type=JvmTypeReference name=ValidID)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//type=JvmTypeReference name=ValidID
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_0_0() { return cTypeAssignment_1_0_0_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_0_0_1() { return cNameAssignment_1_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0_1_0() { return cNameValidIDParserRuleCall_1_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }

		//=> ("=" right=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"=" right=XExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//right=XExpression
		public Assignment getRightAssignment_2_0_1() { return cRightAssignment_2_0_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_2_0_1_0() { return cRightXExpressionParserRuleCall_2_0_1_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsJvmAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cParameterTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cParameterTypeAssignment_1.eContents().get(0);
		private final Assignment cVarArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cVarArgFullStopFullStopFullStopKeyword_2_0 = (Keyword)cVarArgAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		
		//JvmFormalParameter returns types::JvmFormalParameter:
		//	annotations+=JvmAnnotation* parameterType=JvmTypeReference? varArg?="..."? name=ValidID ("="
		//	defaultValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//annotations+=JvmAnnotation* parameterType=JvmTypeReference? varArg?="..."? name=ValidID ("=" defaultValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//annotations+=JvmAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//JvmAnnotation
		public RuleCall getAnnotationsJvmAnnotationParserRuleCall_0_0() { return cAnnotationsJvmAnnotationParserRuleCall_0_0; }

		//parameterType=JvmTypeReference?
		public Assignment getParameterTypeAssignment_1() { return cParameterTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_1_0; }

		//varArg?="..."?
		public Assignment getVarArgAssignment_2() { return cVarArgAssignment_2; }

		//"..."
		public Keyword getVarArgFullStopFullStopFullStopKeyword_2_0() { return cVarArgFullStopFullStopFullStopKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//(=> "=" defaultValue=XExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_4_1_0() { return cDefaultValueXExpressionParserRuleCall_4_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		//FullJvmFormalParameter returns types::JvmFormalParameter:
		//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(=> "=" defaultValue=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> "="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_2_1_0() { return cDefaultValueXExpressionParserRuleCall_2_1_0; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitOperationCallAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////XFeatureCall returns XExpression:
		// //	{XFeatureCall}
		//
		////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
		//
		////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
		// //	(
		// //		(=>explicitOperationCall?='(' 
		// //			(
		//
		////			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		// //			)? 
		// //		')')?
		// //	)
		// //;
		//
		//XFeatureCall returns XExpression:
		//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//	("," featureCallArguments+=XExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_0() { return cFeatureJvmIdentifiableElementCrossReference_2_0; }

		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_3_0() { return cExplicitOperationCallAssignment_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_3_0_0; }

		//(featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_0() { return cFeatureCallArgumentsAssignment_3_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_1() { return cFeatureCallArgumentsAssignment_3_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////XCallee returns XCallee:
		// //	'('
		// //	(arguments+=XExpression (',' arguments+=XExpression)*)?
		// //	')'
		// //;
		//
		////	| 'extends' 
		// //	| 'static' 
		// //	| 'import' 
		// //	| 'extension'
		// FeatureCallID:
		//	ValidID;
		public ParserRule getRule() { return rule; }

		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}

	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThisKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//IdOrSuper:
		//	FeatureCallID | "super" | "this";
		public ParserRule getRule() { return rule; }

		//FeatureCallID | "super" | "this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCallID
		public RuleCall getFeatureCallIDParserRuleCall_0() { return cFeatureCallIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }

		//"this"
		public Keyword getThisKeyword_2() { return cThisKeyword_2; }
	}

	public class XObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XObjectLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXObjectLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersXObjectLiteralPartParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersXObjectLiteralPartParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XObjectLiteral returns XExpression:
		//	{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}";
		public ParserRule getRule() { return rule; }

		//{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}"
		public Group getGroup() { return cGroup; }

		//{XObjectLiteral}
		public Action getXObjectLiteralAction_0() { return cXObjectLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=XObjectLiteralPart
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//XObjectLiteralPart
		public RuleCall getMembersXObjectLiteralPartParserRuleCall_3_0() { return cMembersXObjectLiteralPartParserRuleCall_3_0; }

		//("," members+=XObjectLiteralPart)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//members+=XObjectLiteralPart
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//XObjectLiteralPart
		public RuleCall getMembersXObjectLiteralPartParserRuleCall_4_1_0() { return cMembersXObjectLiteralPartParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XObjectLiteralPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XObjectLiteralPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXObjectLiteralPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSimpleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpleNameIDTerminalRuleCall_1_0 = (RuleCall)cSimpleNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefaultValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_3_0 = (RuleCall)cDefaultValueAssignment_3.eContents().get(0);
		
		//XObjectLiteralPart returns types::JvmMember:
		//	{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression;
		public ParserRule getRule() { return rule; }

		//{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression
		public Group getGroup() { return cGroup; }

		//{XObjectLiteralPart}
		public Action getXObjectLiteralPartAction_0() { return cXObjectLiteralPartAction_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_1() { return cSimpleNameAssignment_1; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_1_0() { return cSimpleNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_3() { return cDefaultValueAssignment_3; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_3_0() { return cDefaultValueXExpressionParserRuleCall_3_0; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorJvmConstructorCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConstructorJvmConstructorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cTypeArgumentsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//XConstructorCall returns XExpression:
		//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
		//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference
		//("," typeArguments+=JvmArgumentTypeReference)* ">")? ("(" (arguments+=XExpression ("," arguments+=XExpression)*)?
		//")")?
		public Group getGroup() { return cGroup; }

		//{XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=[types::JvmConstructor|QualifiedName]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[types::JvmConstructor|QualifiedName]
		public CrossReference getConstructorJvmConstructorCrossReference_2_0() { return cConstructorJvmConstructorCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1() { return cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1; }

		//(=> "<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_2_1() { return cTypeArgumentsAssignment_3_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//(=> "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_0() { return cArgumentsAssignment_4_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_0_0() { return cArgumentsXExpressionParserRuleCall_4_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_1_1() { return cArgumentsAssignment_4_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class XStructLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStructLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStructLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeJvmStructTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeJvmStructTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesXFieldLiteralPartParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesXFieldLiteralPartParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XStructLiteral returns XExpression:
		//	{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName]
		//	//	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		// "{"
		//	properties+=XFieldLiteralPart ("," properties+=XFieldLiteralPart)* "}";
		public ParserRule getRule() { return rule; }

		//{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName]
		////	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		// "{"
		//properties+=XFieldLiteralPart ("," properties+=XFieldLiteralPart)* "}"
		public Group getGroup() { return cGroup; }

		//{XStructLiteral}
		public Action getXStructLiteralAction_0() { return cXStructLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//type=[types::JvmStructType|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[types::JvmStructType|QualifiedName]
		public CrossReference getTypeJvmStructTypeCrossReference_2_0() { return cTypeJvmStructTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1; }

		////	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		// "{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=XFieldLiteralPart
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//XFieldLiteralPart
		public RuleCall getPropertiesXFieldLiteralPartParserRuleCall_4_0() { return cPropertiesXFieldLiteralPartParserRuleCall_4_0; }

		//("," properties+=XFieldLiteralPart)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//properties+=XFieldLiteralPart
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }

		//XFieldLiteralPart
		public RuleCall getPropertiesXFieldLiteralPartParserRuleCall_5_1_0() { return cPropertiesXFieldLiteralPartParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XFieldLiteralPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFieldLiteralPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFieldLiteralPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldJvmFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldJvmFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldJvmFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//XFieldLiteralPart:
		//	{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression;
		public ParserRule getRule() { return rule; }

		//{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression
		public Group getGroup() { return cGroup; }

		//{XFieldLiteralPart}
		public Action getXFieldLiteralPartAction_0() { return cXFieldLiteralPartAction_0; }

		//field=[types::JvmField|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//[types::JvmField|QualifiedName]
		public CrossReference getFieldJvmFieldCrossReference_1_0() { return cFieldJvmFieldCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFieldJvmFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldJvmFieldQualifiedNameParserRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class XArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsXExpressionParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XArrayLiteral returns XExpression:
		//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
		public ParserRule getRule() { return rule; }

		//{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]"
		public Group getGroup() { return cGroup; }

		//{XArrayLiteral}
		public Action getXArrayLiteralAction_0() { return cXArrayLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_0() { return cElementsXExpressionParserRuleCall_3_0; }

		//("," elements+=XExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_4_1_0() { return cElementsXExpressionParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//XBooleanLiteral returns XExpression:
		//	{XBooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0() { return cXBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XNullLiteral returns XExpression:
		//	{XNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{XNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{XNullLiteral}
		public Action getXNullLiteralAction_0() { return cXNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class XNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XNumberLiteral returns XExpression:
		//	{XNumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{XNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{XNumberLiteral}
		public Action getXNumberLiteralAction_0() { return cXNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XStringLiteral returns XExpression:
		//	{XStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{XStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{XStringLiteral}
		public Action getXStringLiteralAction_0() { return cXStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class XTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeJvmTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeJvmTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayDimensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayDimensionsArrayBracketsParserRuleCall_4_0 = (RuleCall)cArrayDimensionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XTypeLiteral returns XExpression:
		//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
		public ParserRule getRule() { return rule; }

		//{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")"
		public Group getGroup() { return cGroup; }

		//{XTypeLiteral}
		public Action getXTypeLiteralAction_0() { return cXTypeLiteralAction_0; }

		//"typeof"
		public Keyword getTypeofKeyword_1() { return cTypeofKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_3_0() { return cTypeJvmTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_3_0_1; }

		//arrayDimensions+=ArrayBrackets*
		public Assignment getArrayDimensionsAssignment_4() { return cArrayDimensionsAssignment_4; }

		//ArrayBrackets
		public RuleCall getArrayDimensionsArrayBracketsParserRuleCall_4_0() { return cArrayDimensionsArrayBracketsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XThrowStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XThrowStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXThrowStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XThrowStatment returns XStatment:
		//	{XThrowStatment} "throw" expression=XExpression ";";
		public ParserRule getRule() { return rule; }

		//{XThrowStatment} "throw" expression=XExpression ";"
		public Group getGroup() { return cGroup; }

		//{XThrowStatment}
		public Action getXThrowStatmentAction_0() { return cXThrowStatmentAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class XReturnStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XReturnStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXReturnStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XReturnStatment returns XStatment:
		//	{XReturnStatment} "return" => expression=XExpression? ";";
		public ParserRule getRule() { return rule; }

		//{XReturnStatment} "return" => expression=XExpression? ";"
		public Group getGroup() { return cGroup; }

		//{XReturnStatment}
		public Action getXReturnStatmentAction_0() { return cXReturnStatmentAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//=> expression=XExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class XBreakStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBreakStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBreakStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XBreakStatment returns XStatment:
		//	{XBreakStatment} "break" ";";
		public ParserRule getRule() { return rule; }

		//{XBreakStatment} "break" ";"
		public Group getGroup() { return cGroup; }

		//{XBreakStatment}
		public Action getXBreakStatmentAction_0() { return cXBreakStatmentAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class XContinueStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XContinueStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXContinueStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XContinueStatment returns XStatment:
		//	{XContinueStatment} "continue" ";";
		public ParserRule getRule() { return rule; }

		//{XContinueStatment} "continue" ";"
		public Group getGroup() { return cGroup; }

		//{XContinueStatment}
		public Action getXContinueStatmentAction_0() { return cXContinueStatmentAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class XTryCatchFinallyStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTryCatchFinallyStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTryCatchFinallyStatmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatmentXStatmentParserRuleCall_2_0 = (RuleCall)cStatmentAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClauseAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClauseXCatchClauseParserRuleCall_3_0_0_0 = (RuleCall)cCatchClauseAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cFinallyKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cFinallyStatmentAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cFinallyStatmentXStatmentParserRuleCall_3_0_1_1_0 = (RuleCall)cFinallyStatmentAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinallyStatmentAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinallyStatmentXStatmentParserRuleCall_3_1_1_0 = (RuleCall)cFinallyStatmentAssignment_3_1_1.eContents().get(0);
		
		//XTryCatchFinallyStatment returns XStatment:
		//	{XTryCatchFinallyStatment} "try" statment=XStatment (catchClause=XCatchClause ("finally" finallyStatment=XStatment)?
		//	| "finally" finallyStatment=XStatment);
		public ParserRule getRule() { return rule; }

		//{XTryCatchFinallyStatment} "try" statment=XStatment (catchClause=XCatchClause ("finally" finallyStatment=XStatment)? |
		//"finally" finallyStatment=XStatment)
		public Group getGroup() { return cGroup; }

		//{XTryCatchFinallyStatment}
		public Action getXTryCatchFinallyStatmentAction_0() { return cXTryCatchFinallyStatmentAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//statment=XStatment
		public Assignment getStatmentAssignment_2() { return cStatmentAssignment_2; }

		//XStatment
		public RuleCall getStatmentXStatmentParserRuleCall_2_0() { return cStatmentXStatmentParserRuleCall_2_0; }

		//catchClause=XCatchClause ("finally" finallyStatment=XStatment)? | "finally" finallyStatment=XStatment
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//catchClause=XCatchClause ("finally" finallyStatment=XStatment)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//catchClause=XCatchClause
		public Assignment getCatchClauseAssignment_3_0_0() { return cCatchClauseAssignment_3_0_0; }

		//XCatchClause
		public RuleCall getCatchClauseXCatchClauseParserRuleCall_3_0_0_0() { return cCatchClauseXCatchClauseParserRuleCall_3_0_0_0; }

		//(=> "finally" finallyStatment=XStatment)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0_1_0() { return cFinallyKeyword_3_0_1_0; }

		//finallyStatment=XStatment
		public Assignment getFinallyStatmentAssignment_3_0_1_1() { return cFinallyStatmentAssignment_3_0_1_1; }

		//XStatment
		public RuleCall getFinallyStatmentXStatmentParserRuleCall_3_0_1_1_0() { return cFinallyStatmentXStatmentParserRuleCall_3_0_1_1_0; }

		//"finally" finallyStatment=XStatment
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"finally"
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }

		//finallyStatment=XStatment
		public Assignment getFinallyStatmentAssignment_3_1_1() { return cFinallyStatmentAssignment_3_1_1; }

		//XStatment
		public RuleCall getFinallyStatmentXStatmentParserRuleCall_3_1_1_0() { return cFinallyStatmentXStatmentParserRuleCall_3_1_1_0; }
	}

	public class XCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatmentXStatmentParserRuleCall_4_0 = (RuleCall)cStatmentAssignment_4.eContents().get(0);
		
		//XCatchClause:
		//	"catch" "(" identifier=ID ")" statment=XStatment;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" identifier=ID ")" statment=XStatment
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//identifier=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statment=XStatment
		public Assignment getStatmentAssignment_4() { return cStatmentAssignment_4; }

		//XStatment
		public RuleCall getStatmentXStatmentParserRuleCall_4_0() { return cStatmentXStatmentParserRuleCall_4_0; }
	}

	public class JvmAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmAnnotationReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnnotationJvmAnnotationTypeCrossReference_2_0 = (CrossReference)cAnnotationAssignment_2.eContents().get(0);
		private final RuleCall cAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAnnotationJvmAnnotationTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0 = (RuleCall)cValuesAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0 = (RuleCall)cValuesAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//JvmAnnotation returns types::JvmAnnotationReference:
		//	{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("("
		//	(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?;
		public ParserRule getRule() { return rule; }

		//{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("(" (values+=JvmAnnotationValue
		//("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?
		public Group getGroup() { return cGroup; }

		//{types::JvmAnnotationReference}
		public Action getJvmAnnotationReferenceAction_0() { return cJvmAnnotationReferenceAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//annotation=[types::JvmAnnotationType|QualifiedName]
		public Assignment getAnnotationAssignment_2() { return cAnnotationAssignment_2; }

		//[types::JvmAnnotationType|QualifiedName]
		public CrossReference getAnnotationJvmAnnotationTypeCrossReference_2_0() { return cAnnotationJvmAnnotationTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1() { return cAnnotationJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1; }

		//(=> "(" (values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//values+=JvmAnnotationValue
		public Assignment getValuesAssignment_3_1_0_0() { return cValuesAssignment_3_1_0_0; }

		//JvmAnnotationValue
		public RuleCall getValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0() { return cValuesJvmAnnotationValueParserRuleCall_3_1_0_0_0; }

		//("," values+=JvmAnnotationValue)*
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }

		//","
		public Keyword getCommaKeyword_3_1_0_1_0() { return cCommaKeyword_3_1_0_1_0; }

		//values+=JvmAnnotationValue
		public Assignment getValuesAssignment_3_1_0_1_1() { return cValuesAssignment_3_1_0_1_1; }

		//JvmAnnotationValue
		public RuleCall getValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0() { return cValuesJvmAnnotationValueParserRuleCall_3_1_0_1_1_0; }

		//value=XLiteral
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_3_1_1_0() { return cValueXLiteralParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class JvmAnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmAnnotationValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cFieldAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cFieldJvmFieldCrossReference_0_0_0_0 = (CrossReference)cFieldAssignment_0_0_0.eContents().get(0);
		private final RuleCall cFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1 = (RuleCall)cFieldJvmFieldCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueXLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//JvmAnnotationValue returns types::JvmAnnotationValue:
		//	=> (field=[types::JvmField|ValidID] "=") value=XLiteral;
		public ParserRule getRule() { return rule; }

		//=> (field=[types::JvmField|ValidID] "=") value=XLiteral
		public Group getGroup() { return cGroup; }

		//=> (field=[types::JvmField|ValidID] "=")
		public Group getGroup_0() { return cGroup_0; }

		//field=[types::JvmField|ValidID] "="
		public Group getGroup_0_0() { return cGroup_0_0; }

		//field=[types::JvmField|ValidID]
		public Assignment getFieldAssignment_0_0_0() { return cFieldAssignment_0_0_0; }

		//[types::JvmField|ValidID]
		public CrossReference getFieldJvmFieldCrossReference_0_0_0_0() { return cFieldJvmFieldCrossReference_0_0_0_0; }

		//ValidID
		public RuleCall getFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1() { return cFieldJvmFieldValidIDParserRuleCall_0_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }

		//value=XLiteral
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//XLiteral
		public RuleCall getValueXLiteralParserRuleCall_1_0() { return cValueXLiteralParserRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
		public ParserRule getRule() { return rule; }

		//HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//(INT | DECIMAL) ("." (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }

		//("." (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}

	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
		// * which makes downstream grammars break on classloading, when a rule is removed.
		// * /
		//StaticQualifier:
		//	(ValidID "::")+;
		public ParserRule getRule() { return rule; }

		//(ValidID "::")+
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}

	public class XTemplateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTemplateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTemplateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsXExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cExpressionsAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0 = (RuleCall)cExpressionsAssignment_1_1_2_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionsXExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionsAssignment_1_1_2_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0 = (RuleCall)cExpressionsAssignment_1_1_3.eContents().get(0);
		
		//XTemplateLiteral returns XExpression:
		//	{XTemplate} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=XExpression?
		//	(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* expressions+=RichStringLiteralEnd);
		public ParserRule getRule() { return rule; }

		//{XTemplate} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=XExpression?
		//(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* expressions+=RichStringLiteralEnd)
		public Group getGroup() { return cGroup; }

		//{XTemplate}
		public Action getXTemplateAction_0() { return cXTemplateAction_0; }

		//expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=XExpression?
		//(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* expressions+=RichStringLiteralEnd
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//expressions+=RichStringLiteral
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//RichStringLiteral
		public RuleCall getExpressionsRichStringLiteralParserRuleCall_1_0_0() { return cExpressionsRichStringLiteralParserRuleCall_1_0_0; }

		//expressions+=RichStringLiteralStart expressions+=XExpression? (expressions+=RichStringLiteralInbetween
		//expressions+=XExpression?)* expressions+=RichStringLiteralEnd
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=RichStringLiteralStart
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//RichStringLiteralStart
		public RuleCall getExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0() { return cExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0; }

		//expressions+=XExpression?
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_1_1_1_0() { return cExpressionsXExpressionParserRuleCall_1_1_1_0; }

		//(expressions+=RichStringLiteralInbetween expressions+=XExpression?)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//expressions+=RichStringLiteralInbetween
		public Assignment getExpressionsAssignment_1_1_2_0() { return cExpressionsAssignment_1_1_2_0; }

		//RichStringLiteralInbetween
		public RuleCall getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0() { return cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0; }

		//expressions+=XExpression?
		public Assignment getExpressionsAssignment_1_1_2_1() { return cExpressionsAssignment_1_1_2_1; }

		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_1_1_2_1_0() { return cExpressionsXExpressionParserRuleCall_1_1_2_1_0; }

		//expressions+=RichStringLiteralEnd
		public Assignment getExpressionsAssignment_1_1_3() { return cExpressionsAssignment_1_1_3; }

		//RichStringLiteralEnd
		public RuleCall getExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0() { return cExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0; }
	}

	public class RichStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteral returns XExpression:
		//	{RichStringLiteral} value=RICH_TEXT;
		public ParserRule getRule() { return rule; }

		//{RichStringLiteral} value=RICH_TEXT
		public Group getGroup() { return cGroup; }

		//{RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT
		public RuleCall getValueRICH_TEXTTerminalRuleCall_1_0() { return cValueRICH_TEXTTerminalRuleCall_1_0; }
	}

	public class RichStringLiteralStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXT_STARTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteralStart returns XExpression:
		//	{RichStringLiteral} value=RICH_TEXT_START;
		public ParserRule getRule() { return rule; }

		//{RichStringLiteral} value=RICH_TEXT_START
		public Group getGroup() { return cGroup; }

		//{RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_START
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT_START
		public RuleCall getValueRICH_TEXT_STARTTerminalRuleCall_1_0() { return cValueRICH_TEXT_STARTTerminalRuleCall_1_0; }
	}

	public class RichStringLiteralInbetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralInbetween");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteralInbetween returns XExpression:
		//	{RichStringLiteral} value=RICH_TEXT_INBETWEEN;
		public ParserRule getRule() { return rule; }

		//{RichStringLiteral} value=RICH_TEXT_INBETWEEN
		public Group getGroup() { return cGroup; }

		//{RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_INBETWEEN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT_INBETWEEN
		public RuleCall getValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0() { return cValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0; }
	}

	public class RichStringLiteralEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXT_ENDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteralEnd returns XExpression:
		//	{RichStringLiteral} value=RICH_TEXT_END;
		public ParserRule getRule() { return rule; }

		//{RichStringLiteral} value=RICH_TEXT_END
		public Group getGroup() { return cGroup; }

		//{RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_END
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT_END
		public RuleCall getValueRICH_TEXT_ENDTerminalRuleCall_1_0() { return cValueRICH_TEXT_ENDTerminalRuleCall_1_0; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Action cJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cArrayBracketsParserRuleCall_0_1_0_1 = (RuleCall)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cXFunctionTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JvmTypeReference returns types::JvmTypeReference:
		//	JvmParameterizedTypeReference => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
		//	XFunctionTypeRef;
		public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
		//XFunctionTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//JvmParameterizedTypeReference => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
		public Group getGroup_0() { return cGroup_0; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall_0_0() { return cJvmParameterizedTypeReferenceParserRuleCall_0_0; }

		//=> ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//{types::JvmGenericArrayTypeReference.componentType=current}
		public Action getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0() { return cJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0; }

		//ArrayBrackets
		public RuleCall getArrayBracketsParserRuleCall_0_1_0_1() { return cArrayBracketsParserRuleCall_0_1_0_1; }

		//XFunctionTypeRef
		public RuleCall getXFunctionTypeRefParserRuleCall_1() { return cXFunctionTypeRefParserRuleCall_1; }
	}

	public class ArrayBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArrayBrackets:
		//	"[" "]";
		public ParserRule getRule() { return rule; }

		//"[" "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}

	public class XFunctionTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFunctionTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamTypesJvmTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cParamTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamTypesJvmTypeReferenceParserRuleCall_2_1_1_0 = (RuleCall)cParamTypesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		
		//XFunctionTypeRef returns xtype::XFunctionTypeRef:
		//	"@" "(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")" "=>" returnType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"@" "(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")" "=>" returnType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)?
		public Group getGroup_2() { return cGroup_2; }

		//paramTypes+=JvmTypeReference
		public Assignment getParamTypesAssignment_2_0() { return cParamTypesAssignment_2_0; }

		//JvmTypeReference
		public RuleCall getParamTypesJvmTypeReferenceParserRuleCall_2_0_0() { return cParamTypesJvmTypeReferenceParserRuleCall_2_0_0; }

		//("," paramTypes+=JvmTypeReference)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//paramTypes+=JvmTypeReference
		public Assignment getParamTypesAssignment_2_1_1() { return cParamTypesAssignment_2_1_1; }

		//JvmTypeReference
		public RuleCall getParamTypesJvmTypeReferenceParserRuleCall_2_1_1_0() { return cParamTypesJvmTypeReferenceParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_5_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_5_0; }
	}

	public class JvmParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference:
		//	type=[types::JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference (","
		//	arguments+=JvmArgumentTypeReference)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=[types::JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
		//">")?
		public Group getGroup() { return cGroup; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//(=> "<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," arguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class JvmArgumentTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmArgumentTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJvmTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJvmWildcardTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JvmArgumentTypeReference returns types::JvmTypeReference:
		//	JvmTypeReference | JvmWildcardTypeReference;
		public ParserRule getRule() { return rule; }

		//JvmTypeReference | JvmWildcardTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//JvmTypeReference
		public RuleCall getJvmTypeReferenceParserRuleCall_0() { return cJvmTypeReferenceParserRuleCall_0; }

		//JvmWildcardTypeReference
		public RuleCall getJvmWildcardTypeReferenceParserRuleCall_1() { return cJvmWildcardTypeReferenceParserRuleCall_1; }
	}

	public class JvmWildcardTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmWildcardTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmWildcardTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstraintsJvmUpperBoundParserRuleCall_2_0_0 = (RuleCall)cConstraintsAssignment_2_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstraintsJvmLowerBoundParserRuleCall_2_1_0 = (RuleCall)cConstraintsAssignment_2_1.eContents().get(0);
		
		//JvmWildcardTypeReference returns types::JvmWildcardTypeReference:
		//	{types::JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
		public ParserRule getRule() { return rule; }

		//{types::JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Group getGroup() { return cGroup; }

		//{types::JvmWildcardTypeReference}
		public Action getJvmWildcardTypeReferenceAction_0() { return cJvmWildcardTypeReferenceAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//(constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//constraints+=JvmUpperBound
		public Assignment getConstraintsAssignment_2_0() { return cConstraintsAssignment_2_0; }

		//JvmUpperBound
		public RuleCall getConstraintsJvmUpperBoundParserRuleCall_2_0_0() { return cConstraintsJvmUpperBoundParserRuleCall_2_0_0; }

		//constraints+=JvmLowerBound
		public Assignment getConstraintsAssignment_2_1() { return cConstraintsAssignment_2_1; }

		//JvmLowerBound
		public RuleCall getConstraintsJvmLowerBoundParserRuleCall_2_1_0() { return cConstraintsJvmLowerBoundParserRuleCall_2_1_0; }
	}

	public class JvmUpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmUpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmUpperBound returns types::JvmUpperBound:
		//	"extends" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"extends" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmUpperBoundAndedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmUpperBoundAnded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmUpperBoundAnded returns types::JvmUpperBound:
		//	"&" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"&" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmLowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmLowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmLowerBound returns types::JvmLowerBound:
		//	"super" typeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"super" typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"super"
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstraintsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstraintsJvmUpperBoundParserRuleCall_1_0_0 = (RuleCall)cConstraintsAssignment_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		
		//JvmTypeParameter returns types::JvmTypeParameter:
		//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//(constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?
		public Group getGroup_1() { return cGroup_1; }

		//constraints+=JvmUpperBound
		public Assignment getConstraintsAssignment_1_0() { return cConstraintsAssignment_1_0; }

		//JvmUpperBound
		public RuleCall getConstraintsJvmUpperBoundParserRuleCall_1_0_0() { return cConstraintsJvmUpperBoundParserRuleCall_1_0_0; }

		//constraints+=JvmUpperBoundAnded*
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }

		//JvmUpperBoundAnded
		public RuleCall getConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0() { return cConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName "." "*";
		public ParserRule getRule() { return rule; }

		//QualifiedName "." "*"
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private XExpressionElements pXExpression;
	private XAssignmentElements pXAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private XMultiAssignmentElements pXMultiAssignment;
	private XOrExpressionElements pXOrExpression;
	private OpOrElements pOpOr;
	private XAndExpressionElements pXAndExpression;
	private OpAndElements pOpAnd;
	private XEqualityExpressionElements pXEqualityExpression;
	private OpEqualityElements pOpEquality;
	private XRelationalExpressionElements pXRelationalExpression;
	private OpMultiAssignElements pOpMultiAssign;
	private ShiftOpElements pShiftOp;
	private OpCompareElements pOpCompare;
	private XBitwiseExpressionElements pXBitwiseExpression;
	private BinaryBitwiseOpElements pBinaryBitwiseOp;
	private XShiftExpressionElements pXShiftExpression;
	private XAdditiveExpressionElements pXAdditiveExpression;
	private OpAddElements pOpAdd;
	private XTernaryOperationElements pXTernaryOperation;
	private XMultiplicativeExpressionElements pXMultiplicativeExpression;
	private OpMultiElements pOpMulti;
	private XPostfixOperationElements pXPostfixOperation;
	private PrefixOpElements pPrefixOp;
	private XUnaryOperationElements pXUnaryOperation;
	private OpUnaryElements pOpUnary;
	private XCastedExpressionElements pXCastedExpression;
	private XMemberFeatureCallElements pXMemberFeatureCall;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XLiteralElements pXLiteral;
	private XStatmentElements pXStatment;
	private XExpressionStatmentElements pXExpressionStatment;
	private XClosureElements pXClosure;
	private XFunctionDeclarationElements pXFunctionDeclaration;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	private XIfStatmentElements pXIfStatment;
	private XSwitchStatmentElements pXSwitchStatment;
	private XCasePartElements pXCasePart;
	private XForLoopStatmentElements pXForLoopStatment;
	private XForEachStatmentElements pXForEachStatment;
	private XWhileStatmentElements pXWhileStatment;
	private XDoWhileStatmentElements pXDoWhileStatment;
	private XBlockStatmentElements pXBlockStatment;
	private XVariableDeclarationListElements pXVariableDeclarationList;
	private XVariableDeclarationElements pXVariableDeclaration;
	private JvmFormalParameterElements pJvmFormalParameter;
	private FullJvmFormalParameterElements pFullJvmFormalParameter;
	private XFeatureCallElements pXFeatureCall;
	private FeatureCallIDElements pFeatureCallID;
	private IdOrSuperElements pIdOrSuper;
	private XObjectLiteralElements pXObjectLiteral;
	private XObjectLiteralPartElements pXObjectLiteralPart;
	private XConstructorCallElements pXConstructorCall;
	private XStructLiteralElements pXStructLiteral;
	private XFieldLiteralPartElements pXFieldLiteralPart;
	private XArrayLiteralElements pXArrayLiteral;
	private XBooleanLiteralElements pXBooleanLiteral;
	private XNullLiteralElements pXNullLiteral;
	private XNumberLiteralElements pXNumberLiteral;
	private XStringLiteralElements pXStringLiteral;
	private XTypeLiteralElements pXTypeLiteral;
	private XThrowStatmentElements pXThrowStatment;
	private XReturnStatmentElements pXReturnStatment;
	private XBreakStatmentElements pXBreakStatment;
	private XContinueStatmentElements pXContinueStatment;
	private XTryCatchFinallyStatmentElements pXTryCatchFinallyStatment;
	private XCatchClauseElements pXCatchClause;
	private JvmAnnotationElements pJvmAnnotation;
	private JvmAnnotationValueElements pJvmAnnotationValue;
	private QualifiedNameElements pQualifiedName;
	private NumberElements pNumber;
	private StaticQualifierElements pStaticQualifier;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	private TerminalRule tID;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tUNICODE_ESCAPE;
	private TerminalRule tSTRING;
	private XTemplateLiteralElements pXTemplateLiteral;
	private RichStringLiteralElements pRichStringLiteral;
	private RichStringLiteralStartElements pRichStringLiteralStart;
	private RichStringLiteralInbetweenElements pRichStringLiteralInbetween;
	private RichStringLiteralEndElements pRichStringLiteralEnd;
	private TerminalRule tRICH_TEXT;
	private TerminalRule tRICH_TEXT_START;
	private TerminalRule tRICH_TEXT_END;
	private TerminalRule tRICH_TEXT_INBETWEEN;
	private TerminalRule tIN_RICH_STRING;
	private TerminalRule tIDENTIFIER_START;
	private TerminalRule tIDENTIFIER_PART;
	private TerminalRule tIDENTIFIER_PART_IMPL;
	private JvmTypeReferenceElements pJvmTypeReference;
	private ArrayBracketsElements pArrayBrackets;
	private XFunctionTypeRefElements pXFunctionTypeRef;
	private JvmParameterizedTypeReferenceElements pJvmParameterizedTypeReference;
	private JvmArgumentTypeReferenceElements pJvmArgumentTypeReference;
	private JvmWildcardTypeReferenceElements pJvmWildcardTypeReference;
	private JvmUpperBoundElements pJvmUpperBound;
	private JvmUpperBoundAndedElements pJvmUpperBoundAnded;
	private JvmLowerBoundElements pJvmLowerBound;
	private JvmTypeParameterElements pJvmTypeParameter;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private ValidIDElements pValidID;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XbaseGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.summer.dsl.xbase.Xbase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//XExpression:
	//	XAssignment;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	////XAssignment returns XExpression :
	//
	////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	//
	////	XOrExpression (
	//
	////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//
	////	)?;
	// XAssignment returns XExpression:
	////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	// XMultiAssignment (=>
	//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
	public XAssignmentElements getXAssignmentAccess() {
		return (pXAssignment != null) ? pXAssignment : (pXAssignment = new XAssignmentElements());
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XMultiAssignment returns XExpression:
	//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XOrExpression)*;
	public XMultiAssignmentElements getXMultiAssignmentAccess() {
		return (pXMultiAssignment != null) ? pXMultiAssignment : (pXMultiAssignment = new XMultiAssignmentElements());
	}
	
	public ParserRule getXMultiAssignmentRule() {
		return getXMultiAssignmentAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XOrExpressionElements getXOrExpressionAccess() {
		return (pXOrExpression != null) ? pXOrExpression : (pXOrExpression = new XOrExpressionElements());
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return (pXAndExpression != null) ? pXAndExpression : (pXAndExpression = new XAndExpressionElements());
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XEqualityExpressionElements getXEqualityExpressionAccess() {
		return (pXEqualityExpression != null) ? pXEqualityExpression : (pXEqualityExpression = new XEqualityExpressionElements());
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XBitwiseExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpMultiAssign:
	//	"*=" //	| '<' '<='
	// //	| '>' '>='
	// //	| '>' '>' '>='
	// //	| '>' '>'? '>='
	// //	| '<<=' 
	// //	| '>>='
	// //	| '>>>='
	// |
	//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return (pOpMultiAssign != null) ? pOpMultiAssign : (pOpMultiAssign = new OpMultiAssignElements());
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//ShiftOp:
	//	">" => (">" ">") | ">" => ">" | "<" => "<";
	public ShiftOpElements getShiftOpAccess() {
		return (pShiftOp != null) ? pShiftOp : (pShiftOp = new ShiftOpElements());
	}
	
	public ParserRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XBitwiseExpression returns XExpression:
	//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
	//	rightOperand=XShiftExpression)*;
	public XBitwiseExpressionElements getXBitwiseExpressionAccess() {
		return (pXBitwiseExpression != null) ? pXBitwiseExpression : (pXBitwiseExpression = new XBitwiseExpressionElements());
	}
	
	public ParserRule getXBitwiseExpressionRule() {
		return getXBitwiseExpressionAccess().getRule();
	}

	//BinaryBitwiseOp:
	//	"&" | "|" | "^";
	public BinaryBitwiseOpElements getBinaryBitwiseOpAccess() {
		return (pBinaryBitwiseOp != null) ? pBinaryBitwiseOp : (pBinaryBitwiseOp = new BinaryBitwiseOpElements());
	}
	
	public ParserRule getBinaryBitwiseOpRule() {
		return getBinaryBitwiseOpAccess().getRule();
	}

	//XShiftExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
	//	rightOperand=XAdditiveExpression)*;
	public XShiftExpressionElements getXShiftExpressionAccess() {
		return (pXShiftExpression != null) ? pXShiftExpression : (pXShiftExpression = new XShiftExpressionElements());
	}
	
	public ParserRule getXShiftExpressionRule() {
		return getXShiftExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return (pXAdditiveExpression != null) ? pXAdditiveExpression : (pXAdditiveExpression = new XAdditiveExpressionElements());
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	////	ternary operator
	// XTernaryOperation returns XExpression:
	//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
	//	falseOperand=XExpression)*;
	public XTernaryOperationElements getXTernaryOperationAccess() {
		return (pXTernaryOperation != null) ? pXTernaryOperation : (pXTernaryOperation = new XTernaryOperationElements());
	}
	
	public ParserRule getXTernaryOperationRule() {
		return getXTernaryOperationAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XPostfixOperation)*;
	public XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return (pXMultiplicativeExpression != null) ? pXMultiplicativeExpression : (pXMultiplicativeExpression = new XMultiplicativeExpressionElements());
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return (pOpMulti != null) ? pOpMulti : (pOpMulti = new OpMultiElements());
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	////postfix for incessantly
	// XPostfixOperation returns XExpression:
	//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
	public XPostfixOperationElements getXPostfixOperationAccess() {
		return (pXPostfixOperation != null) ? pXPostfixOperation : (pXPostfixOperation = new XPostfixOperationElements());
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//PrefixOp:
	//	"++" | "--";
	public PrefixOpElements getPrefixOpAccess() {
		return (pPrefixOp != null) ? pPrefixOp : (pPrefixOp = new PrefixOpElements());
	}
	
	public ParserRule getPrefixOpRule() {
		return getPrefixOpAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+" | "~" | "++" | "--";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	////DeleteExpression returns XExpression:
	// //	'delete' 
	// //;
	// XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XCastedExpressionElements getXCastedExpressionAccess() {
		return (pXCastedExpression != null) ? pXCastedExpression : (pXCastedExpression = new XCastedExpressionElements());
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XCaller.function=current} "(") (arguments+=XExpression ("," arguments+=XExpression)*)? ")" |
	//	=> ({XIndexer.source=current} "[") (arguments+=XExpression ("," arguments+=XExpression)*)? "]" | =>
	//	({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
	//	value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?.")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return (pXMemberFeatureCall != null) ? pXMemberFeatureCall : (pXMemberFeatureCall = new XMemberFeatureCallElements());
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XFeatureCall | XLiteral | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression: //	XCollectionLiteral |
	// XObjectLiteral | XStructLiteral | XArrayLiteral | XClosure |
	//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | XTemplateLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XStatment:
	//	XBlockStatment | XSwitchStatment | XIfStatment | XForLoopStatment | XForEachStatment | XWhileStatment |
	//	XDoWhileStatment | XThrowStatment | XReturnStatment | XTryCatchFinallyStatment | XBreakStatment | XContinueStatment |
	//	XFunctionDeclaration | XExpressionStatment | XVariableDeclarationList;
	public XStatmentElements getXStatmentAccess() {
		return (pXStatment != null) ? pXStatment : (pXStatment = new XStatmentElements());
	}
	
	public ParserRule getXStatmentRule() {
		return getXStatmentAccess().getRule();
	}

	//XExpressionStatment:
	//	expression=XExpression ";"?;
	public XExpressionStatmentElements getXExpressionStatmentAccess() {
		return (pXExpressionStatment != null) ? pXExpressionStatment : (pXExpressionStatment = new XExpressionStatmentElements());
	}
	
	public ParserRule getXExpressionStatmentRule() {
		return getXExpressionStatmentAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "function" "(" (declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? ")" statment=XBlockStatment;
	public XClosureElements getXClosureAccess() {
		return (pXClosure != null) ? pXClosure : (pXClosure = new XClosureElements());
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XFunctionDeclaration:
	//	{XFunctionDeclaration} exported?="export"? "function" => ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? returnType=JvmTypeReference simpleName=ValidID "("
	//	(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")"
	//	//		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	// body=XBlockStatment;
	public XFunctionDeclarationElements getXFunctionDeclarationAccess() {
		return (pXFunctionDeclaration != null) ? pXFunctionDeclaration : (pXFunctionDeclaration = new XFunctionDeclarationElements());
	}
	
	public ParserRule getXFunctionDeclarationRule() {
		return getXFunctionDeclarationAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfStatment returns XStatment:
	//	{XIfStatment} "if" "(" if=XExpression ")" then=XStatment ("else" else=XStatment)?;
	public XIfStatmentElements getXIfStatmentAccess() {
		return (pXIfStatment != null) ? pXIfStatment : (pXIfStatment = new XIfStatmentElements());
	}
	
	public ParserRule getXIfStatmentRule() {
		return getXIfStatmentAccess().getRule();
	}

	//XSwitchStatment returns XStatment:
	//	{XSwitchStatment} "switch" "(" switch=XExpression ")" "{" cases+=XCasePart* ("default" ":" default=XStatment)? "}";
	public XSwitchStatmentElements getXSwitchStatmentAccess() {
		return (pXSwitchStatment != null) ? pXSwitchStatment : (pXSwitchStatment = new XSwitchStatmentElements());
	}
	
	public ParserRule getXSwitchStatmentRule() {
		return getXSwitchStatmentAccess().getRule();
	}

	//XCasePart:
	//	"case" case=XExpression ":" then=XStatment;
	public XCasePartElements getXCasePartAccess() {
		return (pXCasePart != null) ? pXCasePart : (pXCasePart = new XCasePartElements());
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopStatment returns XStatment:
	//	{XForLoopStatment} "for" "(" ((initial=XExpression? | "var" variableDeclarations+=XVariableDeclaration (","
	//	variableDeclarations+=XVariableDeclaration)*) ";") (=> (condition=XExpression)? ";") increment=XExpression? ")"
	//	statment=XStatment;
	public XForLoopStatmentElements getXForLoopStatmentAccess() {
		return (pXForLoopStatment != null) ? pXForLoopStatment : (pXForLoopStatment = new XForLoopStatmentElements());
	}
	
	public ParserRule getXForLoopStatmentRule() {
		return getXForLoopStatmentAccess().getRule();
	}

	//XForEachStatment returns XStatment:
	//	{XForEachStatment} "foreach" "(" declaredParam=JvmFormalParameter "of" expression=XExpression ")" statment=XStatment;
	public XForEachStatmentElements getXForEachStatmentAccess() {
		return (pXForEachStatment != null) ? pXForEachStatment : (pXForEachStatment = new XForEachStatmentElements());
	}
	
	public ParserRule getXForEachStatmentRule() {
		return getXForEachStatmentAccess().getRule();
	}

	//XWhileStatment returns XStatment:
	//	{XWhileStatment} "while" "(" predicate=XExpression ")" body=XStatment;
	public XWhileStatmentElements getXWhileStatmentAccess() {
		return (pXWhileStatment != null) ? pXWhileStatment : (pXWhileStatment = new XWhileStatmentElements());
	}
	
	public ParserRule getXWhileStatmentRule() {
		return getXWhileStatmentAccess().getRule();
	}

	//XDoWhileStatment returns XStatment:
	//	{XDoWhileStatment} "do" body=XStatment "while" "(" predicate=XExpression ")";
	public XDoWhileStatmentElements getXDoWhileStatmentAccess() {
		return (pXDoWhileStatment != null) ? pXDoWhileStatment : (pXDoWhileStatment = new XDoWhileStatmentElements());
	}
	
	public ParserRule getXDoWhileStatmentRule() {
		return getXDoWhileStatmentAccess().getRule();
	}

	//XBlockStatment returns XStatment:
	//	{XBlockStatment} "{" statments+=XStatment* "}";
	public XBlockStatmentElements getXBlockStatmentAccess() {
		return (pXBlockStatment != null) ? pXBlockStatment : (pXBlockStatment = new XBlockStatmentElements());
	}
	
	public ParserRule getXBlockStatmentRule() {
		return getXBlockStatmentAccess().getRule();
	}

	//XVariableDeclarationList returns XStatment:
	//	{XVariableDeclarationList} exported?="export"? ("var" | readonly?="const") declarations+=XVariableDeclaration (","
	//	declarations+=XVariableDeclaration)* ";";
	public XVariableDeclarationListElements getXVariableDeclarationListAccess() {
		return (pXVariableDeclarationList != null) ? pXVariableDeclarationList : (pXVariableDeclarationList = new XVariableDeclarationListElements());
	}
	
	public ParserRule getXVariableDeclarationListRule() {
		return getXVariableDeclarationListAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return (pXVariableDeclaration != null) ? pXVariableDeclaration : (pXVariableDeclaration = new XVariableDeclarationElements());
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	annotations+=JvmAnnotation* parameterType=JvmTypeReference? varArg?="..."? name=ValidID ("="
	//	defaultValue=XExpression)?;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return (pJvmFormalParameter != null) ? pJvmFormalParameter : (pJvmFormalParameter = new JvmFormalParameterElements());
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return (pFullJvmFormalParameter != null) ? pFullJvmFormalParameter : (pFullJvmFormalParameter = new FullJvmFormalParameterElements());
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	////XFeatureCall returns XExpression:
	// //	{XFeatureCall}
	//
	////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	//
	////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	// //	(
	// //		(=>explicitOperationCall?='(' 
	// //			(
	//
	////			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //			)? 
	// //		')')?
	// //	)
	// //;
	//
	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
	//	("," featureCallArguments+=XExpression)*)? ")")?;
	public XFeatureCallElements getXFeatureCallAccess() {
		return (pXFeatureCall != null) ? pXFeatureCall : (pXFeatureCall = new XFeatureCallElements());
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	////XCallee returns XCallee:
	// //	'('
	// //	(arguments+=XExpression (',' arguments+=XExpression)*)?
	// //	')'
	// //;
	//
	////	| 'extends' 
	// //	| 'static' 
	// //	| 'import' 
	// //	| 'extension'
	// FeatureCallID:
	//	ValidID;
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return (pFeatureCallID != null) ? pFeatureCallID : (pFeatureCallID = new FeatureCallIDElements());
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super" | "this";
	public IdOrSuperElements getIdOrSuperAccess() {
		return (pIdOrSuper != null) ? pIdOrSuper : (pIdOrSuper = new IdOrSuperElements());
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XObjectLiteral returns XExpression:
	//	{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}";
	public XObjectLiteralElements getXObjectLiteralAccess() {
		return (pXObjectLiteral != null) ? pXObjectLiteral : (pXObjectLiteral = new XObjectLiteralElements());
	}
	
	public ParserRule getXObjectLiteralRule() {
		return getXObjectLiteralAccess().getRule();
	}

	//XObjectLiteralPart returns types::JvmMember:
	//	{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression;
	public XObjectLiteralPartElements getXObjectLiteralPartAccess() {
		return (pXObjectLiteralPart != null) ? pXObjectLiteralPart : (pXObjectLiteralPart = new XObjectLiteralPartElements());
	}
	
	public ParserRule getXObjectLiteralPartRule() {
		return getXObjectLiteralPartAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
	public XConstructorCallElements getXConstructorCallAccess() {
		return (pXConstructorCall != null) ? pXConstructorCall : (pXConstructorCall = new XConstructorCallElements());
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XStructLiteral returns XExpression:
	//	{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName]
	//	//	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	// "{"
	//	properties+=XFieldLiteralPart ("," properties+=XFieldLiteralPart)* "}";
	public XStructLiteralElements getXStructLiteralAccess() {
		return (pXStructLiteral != null) ? pXStructLiteral : (pXStructLiteral = new XStructLiteralElements());
	}
	
	public ParserRule getXStructLiteralRule() {
		return getXStructLiteralAccess().getRule();
	}

	//XFieldLiteralPart:
	//	{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression;
	public XFieldLiteralPartElements getXFieldLiteralPartAccess() {
		return (pXFieldLiteralPart != null) ? pXFieldLiteralPart : (pXFieldLiteralPart = new XFieldLiteralPartElements());
	}
	
	public ParserRule getXFieldLiteralPartRule() {
		return getXFieldLiteralPartAccess().getRule();
	}

	//XArrayLiteral returns XExpression:
	//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
	public XArrayLiteralElements getXArrayLiteralAccess() {
		return (pXArrayLiteral != null) ? pXArrayLiteral : (pXArrayLiteral = new XArrayLiteralElements());
	}
	
	public ParserRule getXArrayLiteralRule() {
		return getXArrayLiteralAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return (pXBooleanLiteral != null) ? pXBooleanLiteral : (pXBooleanLiteral = new XBooleanLiteralElements());
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return (pXNullLiteral != null) ? pXNullLiteral : (pXNullLiteral = new XNullLiteralElements());
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XNumberLiteralElements getXNumberLiteralAccess() {
		return (pXNumberLiteral != null) ? pXNumberLiteral : (pXNumberLiteral = new XNumberLiteralElements());
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return (pXStringLiteral != null) ? pXStringLiteral : (pXStringLiteral = new XStringLiteralElements());
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XTypeLiteralElements getXTypeLiteralAccess() {
		return (pXTypeLiteral != null) ? pXTypeLiteral : (pXTypeLiteral = new XTypeLiteralElements());
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowStatment returns XStatment:
	//	{XThrowStatment} "throw" expression=XExpression ";";
	public XThrowStatmentElements getXThrowStatmentAccess() {
		return (pXThrowStatment != null) ? pXThrowStatment : (pXThrowStatment = new XThrowStatmentElements());
	}
	
	public ParserRule getXThrowStatmentRule() {
		return getXThrowStatmentAccess().getRule();
	}

	//XReturnStatment returns XStatment:
	//	{XReturnStatment} "return" => expression=XExpression? ";";
	public XReturnStatmentElements getXReturnStatmentAccess() {
		return (pXReturnStatment != null) ? pXReturnStatment : (pXReturnStatment = new XReturnStatmentElements());
	}
	
	public ParserRule getXReturnStatmentRule() {
		return getXReturnStatmentAccess().getRule();
	}

	//XBreakStatment returns XStatment:
	//	{XBreakStatment} "break" ";";
	public XBreakStatmentElements getXBreakStatmentAccess() {
		return (pXBreakStatment != null) ? pXBreakStatment : (pXBreakStatment = new XBreakStatmentElements());
	}
	
	public ParserRule getXBreakStatmentRule() {
		return getXBreakStatmentAccess().getRule();
	}

	//XContinueStatment returns XStatment:
	//	{XContinueStatment} "continue" ";";
	public XContinueStatmentElements getXContinueStatmentAccess() {
		return (pXContinueStatment != null) ? pXContinueStatment : (pXContinueStatment = new XContinueStatmentElements());
	}
	
	public ParserRule getXContinueStatmentRule() {
		return getXContinueStatmentAccess().getRule();
	}

	//XTryCatchFinallyStatment returns XStatment:
	//	{XTryCatchFinallyStatment} "try" statment=XStatment (catchClause=XCatchClause ("finally" finallyStatment=XStatment)?
	//	| "finally" finallyStatment=XStatment);
	public XTryCatchFinallyStatmentElements getXTryCatchFinallyStatmentAccess() {
		return (pXTryCatchFinallyStatment != null) ? pXTryCatchFinallyStatment : (pXTryCatchFinallyStatment = new XTryCatchFinallyStatmentElements());
	}
	
	public ParserRule getXTryCatchFinallyStatmentRule() {
		return getXTryCatchFinallyStatmentAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" identifier=ID ")" statment=XStatment;
	public XCatchClauseElements getXCatchClauseAccess() {
		return (pXCatchClause != null) ? pXCatchClause : (pXCatchClause = new XCatchClauseElements());
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//JvmAnnotation returns types::JvmAnnotationReference:
	//	{types::JvmAnnotationReference} "@" annotation=[types::JvmAnnotationType|QualifiedName] ("("
	//	(values+=JvmAnnotationValue ("," values+=JvmAnnotationValue)* | value=XLiteral)? ")")?;
	public JvmAnnotationElements getJvmAnnotationAccess() {
		return (pJvmAnnotation != null) ? pJvmAnnotation : (pJvmAnnotation = new JvmAnnotationElements());
	}
	
	public ParserRule getJvmAnnotationRule() {
		return getJvmAnnotationAccess().getRule();
	}

	//JvmAnnotationValue returns types::JvmAnnotationValue:
	//	=> (field=[types::JvmField|ValidID] "=") value=XLiteral;
	public JvmAnnotationValueElements getJvmAnnotationValueAccess() {
		return (pJvmAnnotationValue != null) ? pJvmAnnotationValue : (pJvmAnnotationValue = new JvmAnnotationValueElements());
	}
	
	public ParserRule getJvmAnnotationValueRule() {
		return getJvmAnnotationValueAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return (pStaticQualifier != null) ? pStaticQualifier : (pStaticQualifier = new StaticQualifierElements());
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//terminal ID:
	//	"^"? (IDENTIFIER_START | UNICODE_ESCAPE) (IDENTIFIER_PART | UNICODE_ESCAPE)*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" (HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?)?;
	public TerminalRule getUNICODE_ESCAPERule() {
		return (tUNICODE_ESCAPE != null) ? tUNICODE_ESCAPE : (tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//XTemplateLiteral returns XExpression:
	//	{XTemplate} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=XExpression?
	//	(expressions+=RichStringLiteralInbetween expressions+=XExpression?)* expressions+=RichStringLiteralEnd);
	public XTemplateLiteralElements getXTemplateLiteralAccess() {
		return (pXTemplateLiteral != null) ? pXTemplateLiteral : (pXTemplateLiteral = new XTemplateLiteralElements());
	}
	
	public ParserRule getXTemplateLiteralRule() {
		return getXTemplateLiteralAccess().getRule();
	}

	//RichStringLiteral returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT;
	public RichStringLiteralElements getRichStringLiteralAccess() {
		return (pRichStringLiteral != null) ? pRichStringLiteral : (pRichStringLiteral = new RichStringLiteralElements());
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START;
	public RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return (pRichStringLiteralStart != null) ? pRichStringLiteralStart : (pRichStringLiteralStart = new RichStringLiteralStartElements());
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_INBETWEEN;
	public RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return (pRichStringLiteralInbetween != null) ? pRichStringLiteralInbetween : (pRichStringLiteralInbetween = new RichStringLiteralInbetweenElements());
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_END;
	public RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return (pRichStringLiteralEnd != null) ? pRichStringLiteralEnd : (pRichStringLiteralEnd = new RichStringLiteralEndElements());
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"`" IN_RICH_STRING* ("`" | EOF);
	public TerminalRule getRICH_TEXTRule() {
		return (tRICH_TEXT != null) ? tRICH_TEXT : (tRICH_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT"));
	} 

	//terminal RICH_TEXT_START:
	//	"`" IN_RICH_STRING* "<%";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return (tRICH_TEXT_START != null) ? tRICH_TEXT_START : (tRICH_TEXT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_START"));
	} 

	//terminal RICH_TEXT_END:
	//	"%>" IN_RICH_STRING* ("`" | EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return (tRICH_TEXT_END != null) ? tRICH_TEXT_END : (tRICH_TEXT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_END"));
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"%>" IN_RICH_STRING* "<%";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return (tRICH_TEXT_INBETWEEN != null) ? tRICH_TEXT_INBETWEEN : (tRICH_TEXT_INBETWEEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_INBETWEEN"));
	} 

	//terminal fragment IN_RICH_STRING:
	//	!("`" | "\\" | "<") | "<" !"%";
	public TerminalRule getIN_RICH_STRINGRule() {
		return (tIN_RICH_STRING != null) ? tIN_RICH_STRING : (tIN_RICH_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IN_RICH_STRING"));
	} 

	//terminal fragment IDENTIFIER_START:
	//	"$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" |
	//	"ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
	//	"Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ" |
	//	"ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" | "ऽ" |
	//	"ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳" |
	//	"ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ" |
	//	"એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" |
	//	"ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" |
	//	"ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
	//	"వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
	//	"എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ" |
	//	"฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ະ" |
	//	"າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" |
	//	"ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ" |
	//	"ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
	//	"ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ" |
	//	"ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ" |
	//	"៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" |
	//	"Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" |
	//	"ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" | "ℇ" |
	//	"ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" |
	//	"々".."〇" | "〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" |
	//	"ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ" |
	//	"שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴" |
	//	"﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" |
	//	"ￚ".."ￜ" | "￠".."￡" | "￥".."￦";
	public TerminalRule getIDENTIFIER_STARTRule() {
		return (tIDENTIFIER_START != null) ? tIDENTIFIER_START : (tIDENTIFIER_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_START"));
	} 

	//terminal fragment IDENTIFIER_PART:
	//	IDENTIFIER_START | IDENTIFIER_PART_IMPL;
	public TerminalRule getIDENTIFIER_PARTRule() {
		return (tIDENTIFIER_PART != null) ? tIDENTIFIER_PART : (tIDENTIFIER_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_PART"));
	} 

	//terminal fragment IDENTIFIER_PART_IMPL:
	//	" ".."\b" | "".."" | "0".."9" | "".."" | "­" | "̀".."͗" | "͝".."ͯ" | "҃".."҆" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" |
	//	"ֿ" | "ׁ".."ׂ" | "ׄ" | "؀".."؃" | "ؐ".."ؕ" | "ً".."٘" | "٠".."٩" | "ٰ" | "ۖ".."۝" | "۟".."ۤ" | "ۧ".."ۨ" | "۪".."ۭ" |
	//	"۰".."۹" | "܏" | "ܑ" | "ܰ".."݊" | "ަ".."ް" | "ँ".."ः" | "़" | "ा".."्" | "॑".."॔" | "ॢ".."ॣ" | "०".."९" | "ঁ".."ঃ" |
	//	"়" | "া".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ৢ".."ৣ" | "০".."৯" | "ਁ".."ਃ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍" |
	//	"੦".."ੱ" | "ઁ".."ઃ" | "઼" | "ા".."ૅ" | "ે".."ૉ" | "ો".."્" | "ૢ".."ૣ" | "૦".."૯" | "ଁ".."ଃ" | "଼" | "ା".."ୃ" |
	//	"େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "୦".."୯" | "ஂ" | "ா".."ூ" | "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "ఁ".."ః" |
	//	"ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "౦".."౯" | "ಂ".."ಃ" | "಼" | "ಾ".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" |
	//	"೦".."೯" | "ം".."ഃ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "൦".."൯" | "ං".."ඃ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" |
	//	"ෲ".."ෳ" | "ั" | "ิ".."ฺ" | "็".."๎" | "๐".."๙" | "ັ" | "ິ".."ູ" | "ົ".."ຼ" | "່".."ໍ" | "໐".."໙" | "༘".."༙" |
	//	"༠".."༩" | "༵" | "༷" | "༹" | "༾".."༿" | "ཱ".."྄" | "྆".."྇" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "ာ".."ဲ" | "ံ".."္" |
	//	"၀".."၉" | "ၖ".."ၙ" | "፩".."፱" | "ᜒ".."᜔" | "ᜲ".."᜴" | "ᝒ".."ᝓ" | "ᝲ".."ᝳ" | "឴".."៓" | "៝" | "០".."៩" | "᠋".."᠍" |
	//	"᠐".."᠙" | "ᢩ" | "ᤠ".."ᤫ" | "ᤰ".."᤻" | "᥆".."᥏" | "‌".."‏" | "‪".."‮" | "⁠".."⁣" | "⁪".."⁯" | "⃐".."⃜" | "⃡" |
	//	"⃥".."⃪" | "〪".."〯" | "゙".."゚" | "ﬞ" | "︀".."️" | "︠".."︣" | "﻿" | "０".."９" | "￹".."￻";
	public TerminalRule getIDENTIFIER_PART_IMPLRule() {
		return (tIDENTIFIER_PART_IMPL != null) ? tIDENTIFIER_PART_IMPL : (tIDENTIFIER_PART_IMPL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER_PART_IMPL"));
	} 

	//JvmTypeReference returns types::JvmTypeReference:
	//	JvmParameterizedTypeReference => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return (pJvmTypeReference != null) ? pJvmTypeReference : (pJvmTypeReference = new JvmTypeReferenceElements());
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public ArrayBracketsElements getArrayBracketsAccess() {
		return (pArrayBrackets != null) ? pArrayBrackets : (pArrayBrackets = new ArrayBracketsElements());
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef returns xtype::XFunctionTypeRef:
	//	"@" "(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")" "=>" returnType=JvmTypeReference;
	public XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return (pXFunctionTypeRef != null) ? pXFunctionTypeRef : (pXFunctionTypeRef = new XFunctionTypeRefElements());
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference:
	//	type=[types::JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?;
	public JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return (pJvmParameterizedTypeReference != null) ? pJvmParameterizedTypeReference : (pJvmParameterizedTypeReference = new JvmParameterizedTypeReferenceElements());
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns types::JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return (pJvmArgumentTypeReference != null) ? pJvmArgumentTypeReference : (pJvmArgumentTypeReference = new JvmArgumentTypeReferenceElements());
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference returns types::JvmWildcardTypeReference:
	//	{types::JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return (pJvmWildcardTypeReference != null) ? pJvmWildcardTypeReference : (pJvmWildcardTypeReference = new JvmWildcardTypeReferenceElements());
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound returns types::JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public JvmUpperBoundElements getJvmUpperBoundAccess() {
		return (pJvmUpperBound != null) ? pJvmUpperBound : (pJvmUpperBound = new JvmUpperBoundElements());
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns types::JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return (pJvmUpperBoundAnded != null) ? pJvmUpperBoundAnded : (pJvmUpperBoundAnded = new JvmUpperBoundAndedElements());
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound returns types::JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public JvmLowerBoundElements getJvmLowerBoundAccess() {
		return (pJvmLowerBound != null) ? pJvmLowerBound : (pJvmLowerBound = new JvmLowerBoundElements());
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter returns types::JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public JvmTypeParameterElements getJvmTypeParameterAccess() {
		return (pJvmTypeParameter != null) ? pJvmTypeParameter : (pJvmTypeParameter = new JvmTypeParameterElements());
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
