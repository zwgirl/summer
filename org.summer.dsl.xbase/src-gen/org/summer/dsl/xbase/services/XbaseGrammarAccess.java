/*
* generated by Xtext
*/
package org.summer.dsl.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.summer.dsl.xtype.services.XtypeGrammarAccess;

@Singleton
public class XbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XExpression:
		//	XAssignment;
		public ParserRule getRule() { return rule; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall() { return cXAssignmentParserRuleCall; }
	}

	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueXMultiAssignmentParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		////XAssignment returns XExpression :
		//
		////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		//
		////	XOrExpression (
		//
		////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//
		////	)?;
		// XAssignment returns XExpression:
		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment (=>
		//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
		public ParserRule getRule() { return rule; }

		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment (=>
		//({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?
		public Group getGroup() { return cGroup; }

		////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
		// XMultiAssignment
		public RuleCall getXMultiAssignmentParserRuleCall_0() { return cXMultiAssignmentParserRuleCall_0; }

		//(=> ({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XAssignment.assignable=current} OpSingleAssign)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XAssignment.assignable=current} OpSingleAssign
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_1() { return cOpSingleAssignParserRuleCall_1_0_0_1; }

		//value=XMultiAssignment
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//XMultiAssignment
		public RuleCall getValueXMultiAssignmentParserRuleCall_1_1_0() { return cValueXMultiAssignmentParserRuleCall_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class XMultiAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiAssignment returns XExpression:
		//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//	rightOperand=XOrExpression)*;
		public ParserRule getRule() { return rule; }

		//XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//rightOperand=XOrExpression)*
		public Group getGroup() { return cGroup; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_0() { return cXOrExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		//rightOperand=XOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpMultiAssign]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpMultiAssign
		public RuleCall getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XOrExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XOrExpression
		public RuleCall getRightOperandXOrExpressionParserRuleCall_1_1_0() { return cRightOperandXOrExpressionParserRuleCall_1_1_0; }
	}

	public class XOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOrExpression returns XExpression:
		//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//	rightOperand=XAndExpression)*;
		public ParserRule getRule() { return rule; }

		//XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//rightOperand=XAndExpression)*
		public Group getGroup() { return cGroup; }

		//XAndExpression
		public RuleCall getXAndExpressionParserRuleCall_0() { return cXAndExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpOr]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpOr]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpOr
		public RuleCall getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAndExpression
		public RuleCall getRightOperandXAndExpressionParserRuleCall_1_1_0() { return cRightOperandXAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAndExpression returns XExpression:
		//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//	rightOperand=XEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpAnd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpAnd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpAnd
		public RuleCall getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class XEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XEqualityExpression returns XExpression:
		//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//	rightOperand=XRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=XRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//XRelationalExpression
		public RuleCall getXRelationalExpressionParserRuleCall_0() { return cXRelationalExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=XRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpEquality]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpEquality]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpEquality
		public RuleCall getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XRelationalExpression
		public RuleCall getRightOperandXRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandXRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpEquality:
		//	"==" | "!=" | "===" | "!==";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "===" | "!=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//XRelationalExpression returns XExpression:
		//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//	rightOperand=XBitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//XBitwiseExpression
		public RuleCall getXBitwiseExpressionParserRuleCall_0() { return cXBitwiseExpressionParserRuleCall_0; }

		//(=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XInstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XBitwiseExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1; }

		//rightOperand=XBitwiseExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//XBitwiseExpression
		public RuleCall getRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0() { return cRightOperandXBitwiseExpressionParserRuleCall_1_1_1_0; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cGroup_6_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6_1_0_1 = (Keyword)cGroup_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cAmpersandEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCircumflexAccentEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//OpMultiAssign:
		//	"*=" //	| '<' '<='
		// //	| '>' '>='
		// //	| '>' '>' '>='
		// //	| '>' '>'? '>='
		// //	| '<<=' 
		// //	| '>>='
		// //	| '>>>='
		// |
		//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
		public ParserRule getRule() { return rule; }

		//"*=" //	| '<' '<='
		// //	| '>' '>='
		// //	| '>' '>' '>='
		// //	| '>' '>'? '>='
		// //	| '<<=' 
		// //	| '>>='
		// //	| '>>>='
		// | "/=" |
		//"%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_0() { return cAsteriskEqualsSignKeyword_0; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_1() { return cSolidusEqualsSignKeyword_1; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_2() { return cPercentSignEqualsSignKeyword_2; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_4() { return cHyphenMinusEqualsSignKeyword_4; }

		//">" => ">="
		public Group getGroup_5() { return cGroup_5; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_0() { return cGreaterThanSignKeyword_5_0; }

		//=> ">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5_1() { return cGreaterThanSignEqualsSignKeyword_5_1; }

		//">" => (">" ">=")
		public Group getGroup_6() { return cGroup_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0() { return cGreaterThanSignKeyword_6_0; }

		//=> (">" ">=")
		public Group getGroup_6_1() { return cGroup_6_1; }

		//">" ">="
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_1_0_0() { return cGreaterThanSignKeyword_6_1_0_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6_1_0_1() { return cGreaterThanSignEqualsSignKeyword_6_1_0_1; }

		//"<" => "<="
		public Group getGroup_7() { return cGroup_7; }

		//"<"
		public Keyword getLessThanSignKeyword_7_0() { return cLessThanSignKeyword_7_0; }

		//=> "<="
		public Keyword getLessThanSignEqualsSignKeyword_7_1() { return cLessThanSignEqualsSignKeyword_7_1; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_8() { return cAmpersandEqualsSignKeyword_8; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_9() { return cCircumflexAccentEqualsSignKeyword_9; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_10() { return cVerticalLineEqualsSignKeyword_10; }
	}

	public class ShiftOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ShiftOp: //	 '>' '>'
		// //	| '>' '>' '>'
		// //	| '<' '<'
		// ">" => (">" ">") | ">" => ">" | "<" => "<";
		public ParserRule getRule() { return rule; }

		////	 '>' '>'
		// //	| '>' '>' '>'
		// //	| '<' '<'
		// ">" => (">" ">") | ">" => ">" | "<" => "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		////	 '>' '>'
		// //	| '>' '>' '>'
		// //	| '<' '<'
		// ">" => (">" ">")
		public Group getGroup_0() { return cGroup_0; }

		////	 '>' '>'
		// //	| '>' '>' '>'
		// //	| '<' '<'
		// ">"
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }

		//=> (">" ">")
		public Group getGroup_0_1() { return cGroup_0_1; }

		//">" ">"
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_0_0() { return cGreaterThanSignKeyword_0_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_0_1() { return cGreaterThanSignKeyword_0_1_0_1; }

		//">" => ">"
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//=> ">"
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }

		//"<" => "<"
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//=> "<"
		public Keyword getLessThanSignKeyword_2_1() { return cLessThanSignKeyword_2_1; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class XBitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXShiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		////OpMultiAssign:
		// //	'+=' 
		// //	| '-=' 
		// //	| '*=' 
		// //	| '/=' 
		// //	| '%=' 
		// //	|  ('<' '<=')
		// //	|  ('>' '>'? '>=')
		//
		////	| '&='
		// //	| '^='
		// //	| '|='
		// //	| '='
		// //	;
		// //XOtherOperatorExpression returns XExpression:
		//
		////	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
		//
		////	rightOperand=XAdditiveExpression)*;
		// //
		// //OpOther:
		// ////	  '->' 
		// ////	| 
		// //	'..<'
		// //	| '>' '..'
		// //	| '..'
		//
		//////	| '=>' 
		// //	| '>' (=>('>' '>') | '>') 
		// //	| '<' (=>('<' '<') | '<')
		// ////	| '<>'
		// //	//| '?:' 
		// //	| '<=>'
		//
		////	;
		// XBitwiseExpression returns XExpression:
		//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//	rightOperand=XShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//rightOperand=XShiftExpression)*
		public Group getGroup() { return cGroup; }

		//XShiftExpression
		public RuleCall getXShiftExpressionParserRuleCall_0() { return cXShiftExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		//rightOperand=XShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|BinaryBitwiseOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//BinaryBitwiseOp
		public RuleCall getFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementBinaryBitwiseOpParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XShiftExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XShiftExpression
		public RuleCall getRightOperandXShiftExpressionParserRuleCall_1_1_0() { return cRightOperandXShiftExpressionParserRuleCall_1_1_0; }
	}

	public class BinaryBitwiseOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBitwiseOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BinaryBitwiseOp:
		//	"&" | "|" | "^";
		public ParserRule getRule() { return rule; }

		//"&" | "|" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
	}

	public class XShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XShiftExpression returns XExpression:
		//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//	rightOperand=XAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//rightOperand=XAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_0() { return cXAdditiveExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		//rightOperand=XAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|ShiftOp]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|ShiftOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//ShiftOp
		public RuleCall getFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementShiftOpParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandXAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXTernaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAdditiveExpression returns XExpression:
		//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//	rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XTernaryOperation
		public RuleCall getXTernaryOperationParserRuleCall_0() { return cXTernaryOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpAdd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpAdd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpAdd
		public RuleCall getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class XTernaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTernaryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXTernaryOperationConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTrueOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTrueOperandXExpressionParserRuleCall_1_1_0 = (RuleCall)cTrueOperandAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFalseOperandAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFalseOperandXExpressionParserRuleCall_1_3_0 = (RuleCall)cFalseOperandAssignment_1_3.eContents().get(0);
		
		////XKeyValuePair returns XExpression:
		// //	XTernaryOperation (=>({XKeyValuePair.key=current} ':')  value = XExpression)
		//
		////;
		// //XKeyValuePair returns XExpression:
		//
		////	XStringLiteral (=>({XKeyValuePair.key=current} ':')  value = XTernaryOperation)
		// //;
		// //	ternary operator
		//
		//XTernaryOperation returns XExpression:
		//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
		//	falseOperand=XExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
		//falseOperand=XExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":" falseOperand=XExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XTernaryOperation.condition=current} "?")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XTernaryOperation.condition=current} "?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XTernaryOperation.condition=current}
		public Action getXTernaryOperationConditionAction_1_0_0_0() { return cXTernaryOperationConditionAction_1_0_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//trueOperand=XExpression
		public Assignment getTrueOperandAssignment_1_1() { return cTrueOperandAssignment_1_1; }

		//XExpression
		public RuleCall getTrueOperandXExpressionParserRuleCall_1_1_0() { return cTrueOperandXExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//falseOperand=XExpression
		public Assignment getFalseOperandAssignment_1_3() { return cFalseOperandAssignment_1_3; }

		//XExpression
		public RuleCall getFalseOperandXExpressionParserRuleCall_1_3_0() { return cFalseOperandXExpressionParserRuleCall_1_3_0; }
	}

	public class XMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPostfixOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXPostfixOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiplicativeExpression returns XExpression:
		//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//	rightOperand=XPostfixOperation)*;
		public ParserRule getRule() { return rule; }

		//XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//rightOperand=XPostfixOperation)*
		public Group getGroup() { return cGroup; }

		//XPostfixOperation
		public RuleCall getXPostfixOperationParserRuleCall_0() { return cXPostfixOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		//rightOperand=XPostfixOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpMulti]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpMulti]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpMulti
		public RuleCall getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XPostfixOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XPostfixOperation
		public RuleCall getRightOperandXPostfixOperationParserRuleCall_1_1_0() { return cRightOperandXPostfixOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	"*" //	| '**' 
		// | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" //	| '**' 
		// | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class XPostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cXPostfixOperationOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_1_0 = (CrossReference)cFeatureAssignment_1_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_1_0.eContents().get(1);
		
		////postfix for incessantly
		// XPostfixOperation returns XExpression:
		//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
		public ParserRule getRule() { return rule; }

		//XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*
		public Group getGroup() { return cGroup; }

		//XUnaryOperation
		public RuleCall getXUnaryOperationParserRuleCall_0() { return cXUnaryOperationParserRuleCall_0; }

		//=> ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*
		public Group getGroup_1() { return cGroup_1; }

		//{XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XPostfixOperation.operand=current}
		public Action getXPostfixOperationOperandAction_1_0_0() { return cXPostfixOperationOperandAction_1_0_0; }

		//feature=[types::JvmIdentifiableElement|PrefixOp]
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//[types::JvmIdentifiableElement|PrefixOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_1_0; }

		//PrefixOp
		public RuleCall getFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1() { return cFeatureJvmIdentifiableElementPrefixOpParserRuleCall_1_0_1_0_1; }
	}

	public class PrefixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//////prefix for incessantly
		// //XPrefixOperation returns XExpression:
		//
		////	{XPrefixOperation} feature=[types::JvmIdentifiableElement|PrefixOp] operand=XPrefixOperation
		// //	|XUnaryOperation
		//
		////	;
		// PrefixOp:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXCastedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns XExpression:
		//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
		public ParserRule getRule() { return rule; }

		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XUnaryOperation
		public RuleCall getOperandXUnaryOperationParserRuleCall_0_2_0() { return cOperandXUnaryOperationParserRuleCall_0_2_0; }

		//XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_1() { return cXCastedExpressionParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		////OpUnary:
		// //	"!" | "-" | "+";
		// //	|PrefixOp
		// OpUnary:
		//	"!" | "-" | "+" | "~" | "++" | "--";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+" | "~" | "++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_4() { return cPlusSignPlusSignKeyword_4; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_5() { return cHyphenMinusHyphenMinusKeyword_5; }
	}

	public class XCastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXIndexOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXCastedExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		////DeleteExpression returns XExpression:
		// //	'delete' 
		// //;
		// XCastedExpression returns XExpression:
		//	XIndexOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
		public ParserRule getRule() { return rule; }

		//XIndexOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*
		public Group getGroup() { return cGroup; }

		//XIndexOperation
		public RuleCall getXIndexOperationParserRuleCall_0() { return cXIndexOperationParserRuleCall_0; }

		//(=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XCastedExpression.target=current} "as")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XCastedExpression.target=current} "as"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XCastedExpression.target=current}
		public Action getXCastedExpressionTargetAction_1_0_0_0() { return cXCastedExpressionTargetAction_1_0_0_0; }

		//"as"
		public Keyword getAsKeyword_1_0_0_1() { return cAsKeyword_1_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
	}

	public class XIndexOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIndexOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMemberFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXIndexOperationExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIndexOpParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexXExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//XIndexOperation returns XExpression:
		//	XMemberFeatureCall (=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp])
		//	index=XExpression "]")* //(=>'=' value = XExpression)
		//;
		public ParserRule getRule() { return rule; }

		//XMemberFeatureCall (=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp])
		//index=XExpression "]")* //(=>'=' value = XExpression)
		public Group getGroup() { return cGroup; }

		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_0() { return cXMemberFeatureCallParserRuleCall_0; }

		//(=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp]) index=XExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XIndexOperation.expression=current}
		public Action getXIndexOperationExpressionAction_1_0_0_0() { return cXIndexOperationExpressionAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|IndexOp]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|IndexOp]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//IndexOp
		public RuleCall getFeatureJvmIdentifiableElementIndexOpParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementIndexOpParserRuleCall_1_0_0_1_0_1; }

		//index=XExpression
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//XExpression
		public RuleCall getIndexXExpressionParserRuleCall_1_1_0() { return cIndexXExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class IndexOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexOp");
		private final Keyword cLeftSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//IndexOp:
		//	"[";
		public ParserRule getRule() { return rule; }

		//"["
		public Keyword getLeftSquareBracketKeyword() { return cLeftSquareBracketKeyword; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXMemberFeatureCall1MemberCallTargetAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cExplicitOperationCallAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_0_0_0_1_0 = (Keyword)cExplicitOperationCallAssignment_1_0_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_0_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_0_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0 = (CrossReference)cFeatureAssignment_1_1_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_1_0_0_3 = (RuleCall)cGroup_1_1_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_2_0_0_1 = (Alternatives)cGroup_1_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2_0_0_1_0 = (Keyword)cAlternatives_1_2_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_2_0_0_1_1 = (Assignment)cAlternatives_1_2_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_2_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_2_0_0_1_2 = (Assignment)cAlternatives_1_2_0_0_1.eContents().get(2);
		private final Keyword cExplicitStaticColonColonKeyword_1_2_0_0_1_2_0 = (Keyword)cExplicitStaticAssignment_1_2_0_0_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_2_1_2 = (Group)cGroup_1_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_1_2_0 = (Keyword)cGroup_1_2_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1_2_1 = (Assignment)cGroup_1_2_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_1_3 = (Keyword)cGroup_1_2_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_2_2_0 = (CrossReference)cFeatureAssignment_1_2_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_2_2_0.eContents().get(1);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_2_3_0 = (Assignment)cGroup_1_2_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_2_3_0.eContents().get(0);
		private final Group cGroup_1_2_3_1 = (Group)cGroup_1_2_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_2_3_1_0 = (Assignment)cGroup_1_2_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_2_3_1_0.eContents().get(0);
		private final Group cGroup_1_2_3_1_1 = (Group)cGroup_1_2_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_3_1_1_0 = (Keyword)cGroup_1_2_3_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_2_3_1_1_1 = (Assignment)cGroup_1_2_3_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_2_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_3_2 = (Keyword)cGroup_1_2_3.eContents().get(2);
		
		////XMemberFeatureCall returns XExpression:
		// //	XPrimaryExpression
		//
		////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//
		////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		//
		////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//
		////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
		// //			=>explicitOperationCall?='(' 
		// //				(
		//
		////				    memberCallArguments+=XShortClosure
		//
		////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			')')?
		//
		////			memberCallArguments+=XClosure?
		// //		)*;
		// //XMemberFeatureCall returns XExpression:
		// //	XPrimaryExpression
		//
		////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//
		////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		//
		////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//
		////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
		// //			=>explicitOperationCall?='(' 
		// //				(
		//
		////				    memberCallArguments+=XShortClosure
		//
		////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			')')?
		//
		////			memberCallArguments+=XClosure?
		// //		)*;
		// //XExpressionCall returns XExpression:
		// //		XMemberFeatureCall
		//
		////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
		//
		////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ')')
		// //;
		// //
		//
		////XMemberFeatureCall returns XExpression:
		// //	XPrimaryExpression
		//
		////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//
		////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		//
		////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//
		////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
		// //			=>explicitOperationCall?='(' 
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			')')?
		// //		)*;
		//
		////XMemberFeatureCall returns XExpression:
		// //	XPrimaryExpression
		//
		////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
		//
		////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ')'
		//
		////	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
		//
		////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ']'
		//
		////	|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//
		////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		//
		////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//
		////		feature=[types::JvmIdentifiableElement|FeatureCallID] 
		// //		(
		// //			(
		// //			=>explicitOperationCall?='(' 
		//
		////				(
		// //				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			')')?
		//
		////			
		// ////			|
		// //			(
		// //			=>indexedOperation?='[' 
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			']')?
		// //			
		// //		)
		//
		////		)*;
		// XMemberFeatureCall returns XExpression:
		//	XPrimaryExpression (=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
		//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")"
		//	//	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
		//
		//	//		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ']'
		//
		//	//	|=>({XAssignment.assignable=current} 't=') value=XAssignment
		// | => ({XAssignment.assignable=current} ("." |
		//	explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
		//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? //			(
		//
		//	//			=>indexedOperation?='[' 
		// //				(
		//
		//	//				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			']')?
		//)*;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression (=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")"
		////	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
		//
		////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ']'
		//
		////	|=>({XAssignment.assignable=current} 't=') value=XAssignment
		// | => ({XAssignment.assignable=current} ("." |
		//explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression
		//("," memberCallArguments+=XExpression)*)? ")")? //			(
		// //			=>indexedOperation?='[' 
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			']')?
		//)*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//(=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(") (memberCallArguments+=XExpression (","
		//memberCallArguments+=XExpression)*)? ")" //	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
		//
		////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		// //		 ']'
		//
		////	|=>({XAssignment.assignable=current} 't=') value=XAssignment
		// | => ({XAssignment.assignable=current} ("." |
		//explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
		//({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression
		//("," memberCallArguments+=XExpression)*)? ")")? //			(
		// //			=>indexedOperation?='[' 
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			']')?
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(") (memberCallArguments+=XExpression (","
		//memberCallArguments+=XExpression)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="("
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XMemberFeatureCall1.memberCallTarget=current}
		public Action getXMemberFeatureCall1MemberCallTargetAction_1_0_0_0_0() { return cXMemberFeatureCall1MemberCallTargetAction_1_0_0_0_0; }

		//explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_0_0_0_1() { return cExplicitOperationCallAssignment_1_0_0_0_1; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_0_0_0_1_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_0_0_0_1_0; }

		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_0_1_0() { return cMemberCallArgumentsAssignment_1_0_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_0_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_0_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_0_1_1_1() { return cMemberCallArgumentsAssignment_1_0_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_0_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign) value=XAssignment
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XAssignment.assignable=current} ("." | explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID]
		//OpSingleAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_1_0_0_0() { return cXAssignmentAssignableAction_1_1_0_0_0; }

		//"." | explicitStatic?="::"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_1() { return cExplicitStaticAssignment_1_1_0_0_1_1; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_1_0_0_1_1_0() { return cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0; }

		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_1_0_0_2() { return cFeatureAssignment_1_1_0_0_2; }

		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0; }

		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_1_0_0_3() { return cOpSingleAssignParserRuleCall_1_1_0_0_3; }

		//value=XAssignment
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_1_1_0() { return cValueXAssignmentParserRuleCall_1_1_1_0; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression
		//("," memberCallArguments+=XExpression)*)? ")")? //			(
		// //			=>indexedOperation?='[' 
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			']')?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0; }

		//"." | nullSafe?="?." | explicitStatic?="::"
		public Alternatives getAlternatives_1_2_0_0_1() { return cAlternatives_1_2_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_0_1_0() { return cFullStopKeyword_1_2_0_0_1_0; }

		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_2_0_0_1_1() { return cNullSafeAssignment_1_2_0_0_1_1; }

		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_2_0_0_1_2() { return cExplicitStaticAssignment_1_2_0_0_1_2; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_2_0_0_1_2_0() { return cExplicitStaticColonColonKeyword_1_2_0_0_1_2_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2_1_0() { return cLessThanSignKeyword_1_2_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1_1() { return cTypeArgumentsAssignment_1_2_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2_1_2() { return cGroup_1_2_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_1_2_0() { return cCommaKeyword_1_2_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1_2_1() { return cTypeArgumentsAssignment_1_2_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2_1_3() { return cGreaterThanSignKeyword_1_2_1_3; }

		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_2_2() { return cFeatureAssignment_1_2_2; }

		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_2_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_2_2_0; }

		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_2_2_0_1; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_2_3_0() { return cExplicitOperationCallAssignment_1_2_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0; }

		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Group getGroup_1_2_3_1() { return cGroup_1_2_3_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_2_3_1_0() { return cMemberCallArgumentsAssignment_1_2_3_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_2_3_1_1() { return cGroup_1_2_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_2_3_1_1_0() { return cCommaKeyword_1_2_3_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_2_3_1_1_1() { return cMemberCallArgumentsAssignment_1_2_3_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_3_2() { return cRightParenthesisKeyword_1_2_3_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXBlockExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXSwitchExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForEachLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXDoWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXThrowExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXReturnExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXBreakExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXContinueExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		////XMemberFeatureCall1 returns XExpression:
		// //	XPrimaryExpression
		// //	(=>({XMemberFeatureCall.memberCallTarget=current}
		//
		////		(=>explicitOperationCall?="(")
		// //	) 
		//
		////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		// //				(
		//
		////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		// //				)? 
		// //			')'
		// //		)*
		// //	;
		//
		//XPrimaryExpression returns XExpression:
		//	XConstructorCall | XFeatureCall | XLiteral | XBlockExpression | XSwitchExpression | XIfExpression |
		//	XForLoopExpression | XForEachLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression |
		//	XReturnExpression | XTryCatchFinallyExpression | XBreakExpression | XContinueExpression | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XFeatureCall | XLiteral | XBlockExpression | XSwitchExpression | XIfExpression | XForLoopExpression |
		//XForEachLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
		//XTryCatchFinallyExpression | XBreakExpression | XContinueExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_1() { return cXFeatureCallParserRuleCall_1; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_2() { return cXLiteralParserRuleCall_2; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_3() { return cXBlockExpressionParserRuleCall_3; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_4() { return cXSwitchExpressionParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XForEachLoopExpression
		public RuleCall getXForEachLoopExpressionParserRuleCall_7() { return cXForEachLoopExpressionParserRuleCall_7; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_8() { return cXWhileExpressionParserRuleCall_8; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_9() { return cXDoWhileExpressionParserRuleCall_9; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_10() { return cXThrowExpressionParserRuleCall_10; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_11() { return cXReturnExpressionParserRuleCall_11; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_12() { return cXTryCatchFinallyExpressionParserRuleCall_12; }

		//XBreakExpression
		public RuleCall getXBreakExpressionParserRuleCall_13() { return cXBreakExpressionParserRuleCall_13; }

		//XContinueExpression
		public RuleCall getXContinueExpressionParserRuleCall_14() { return cXContinueExpressionParserRuleCall_14; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_15() { return cXParenthesizedExpressionParserRuleCall_15; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXObjectLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXStructLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXArrayLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXClosureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXBooleanLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXNumberLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXNullLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXStringLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXTypeLiteralParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////	|
		// //	XKeyValuePair
		// XLiteral returns XExpression: //	XCollectionLiteral |
		// XObjectLiteral | XStructLiteral |
		//	XArrayLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		////	XCollectionLiteral |
		// XObjectLiteral | XStructLiteral | XArrayLiteral | XClosure | XBooleanLiteral | XNumberLiteral |
		//XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		////	XCollectionLiteral |
		// XObjectLiteral
		public RuleCall getXObjectLiteralParserRuleCall_0() { return cXObjectLiteralParserRuleCall_0; }

		//XStructLiteral
		public RuleCall getXStructLiteralParserRuleCall_1() { return cXStructLiteralParserRuleCall_1; }

		//XArrayLiteral
		public RuleCall getXArrayLiteralParserRuleCall_2() { return cXArrayLiteralParserRuleCall_2; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_3() { return cXClosureParserRuleCall_3; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_4() { return cXBooleanLiteralParserRuleCall_4; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_5() { return cXNumberLiteralParserRuleCall_5; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_6() { return cXNullLiteralParserRuleCall_6; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_7() { return cXStringLiteralParserRuleCall_7; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_8() { return cXTypeLiteralParserRuleCall_8; }
	}

	public class XClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXClosureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOperatorOperatorKeyword_2_1_0_0 = (Keyword)cOperatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameOpMultiParserRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cDeclaredFormalParametersAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_3_0_1_0.eContents().get(0);
		private final Group cGroup_3_0_1_1 = (Group)cGroup_3_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_3_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_0_3 = (Group)cGroup_3_0.eContents().get(3);
		private final Keyword cColonKeyword_3_0_3_0 = (Keyword)cGroup_3_0_3.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3_0_3_1 = (Assignment)cGroup_3_0_3.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_3_0_3_1_0 = (RuleCall)cReturnTypeAssignment_3_0_3_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		////XCollectionLiteral:
		// //	XSetLiteral 
		// //	| 
		// //	XListLiteral
		// //;
		// //XSetLiteral:
		//
		////	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
		// //;
		// //XSetLiteral:
		//
		////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
		// //;
		// //XSetLiteral:
		//
		////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
		// //;
		// //XListLiteral:
		//
		////	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
		// //;
		// //XListLiteral:
		//
		////	{XListLiteral} '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
		// //;
		//
		////XClosure returns XExpression:
		// //	=>({XClosure} 
		// //	'[') 
		//
		////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		//
		////		expression=XExpressionInClosure 
		// //	']';
		// //XClosure returns XExpression:
		// //	=>({XClosure} 
		// //	'lambda') 
		//
		////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		//
		////		expression=XExpressionInClosure 
		// //	']'
		// //	;
		// //XClosure returns XExpression:
		// //	=>({XClosure} 
		//
		////	'lambda' '{') 
		//
		////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		//
		////		expression=XExpression 
		// //	'}'
		// //	;
		// //XClosure returns XExpression:
		// //	=>({XClosure} 
		// //	'lambda' '{') 
		//
		////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		//
		////		expression=XExpression 
		// //	'}'
		// //	;
		// XClosure returns XExpression:
		//	{XClosure} "function" (name=ValidID | operator?="operator" name=OpMulti)? => ("("
		//	(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
		//	returnType=JvmTypeReference)?) expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XClosure} "function" (name=ValidID | operator?="operator" name=OpMulti)? => ("("
		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
		//returnType=JvmTypeReference)?) expression=XExpression
		public Group getGroup() { return cGroup; }

		//{XClosure}
		public Action getXClosureAction_0() { return cXClosureAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//(name=ValidID | operator?="operator" name=OpMulti)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=ValidID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0() { return cNameValidIDParserRuleCall_2_0_0; }

		//operator?="operator" name=OpMulti
		public Group getGroup_2_1() { return cGroup_2_1; }

		//operator?="operator"
		public Assignment getOperatorAssignment_2_1_0() { return cOperatorAssignment_2_1_0; }

		//"operator"
		public Keyword getOperatorOperatorKeyword_2_1_0_0() { return cOperatorOperatorKeyword_2_1_0_0; }

		//name=OpMulti
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//OpMulti
		public RuleCall getNameOpMultiParserRuleCall_2_1_1_0() { return cNameOpMultiParserRuleCall_2_1_1_0; }

		//=> ("(" (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
		//returnType=JvmTypeReference)?)
		public Group getGroup_3() { return cGroup_3; }

		//"(" (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
		//returnType=JvmTypeReference)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_3_0_1_0() { return cDeclaredFormalParametersAssignment_3_0_1_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_0_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_0_0; }

		//("," declaredFormalParameters+=JvmFormalParameter)*
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }

		//","
		public Keyword getCommaKeyword_3_0_1_1_0() { return cCommaKeyword_3_0_1_1_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_3_0_1_1_1() { return cDeclaredFormalParametersAssignment_3_0_1_1_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_1_1_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_3_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }

		//(":" returnType=JvmTypeReference)?
		public Group getGroup_3_0_3() { return cGroup_3_0_3; }

		//":"
		public Keyword getColonKeyword_3_0_3_0() { return cColonKeyword_3_0_3_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_3_0_3_1() { return cReturnTypeAssignment_3_0_3_1; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_3_0_3_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_3_0_3_1_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////		(
		// //			{types::JvmOperation.annotationInfo = current} modifiers+=CommonModifier*
		//
		////			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
		// //			( 
		//
		//////				=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		// ////			  |
		//
		//////			   =>
		// //			   (returnType=JvmTypeReference =>(simpleName=ValidID | ('operator' simpleName= OpMulti))
		//
		////			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		// //			   	)
		//
		////			   	 '(')
		// ////			  | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		// ////			  | name=ValidID '('
		//
		////			)
		// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//
		//////			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		//
		////			(expression=XBlockExpression 
		// ////				| expression=RichString
		// //				 | ';'
		// //			)?
		// //		)
		//
		////	XFunctionDeclaration returns XExpression:
		// //	{XFunctionDeclaration}
		// //	'function' (name=ValidID |
		//
		////	('operator' name= OpMulti))?
		// //			   	 '('
		//
		////			(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
		// //	body = XBlockExpression
		//
		////;
		// //XExpressionInClosure returns XExpression: 
		// //	{XBlockExpression}
		//
		////	(expressions+=XExpressionInsideBlock ';'?)*
		// //;
		// //XShortClosure returns XExpression:
		//
		////	=>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
		//
		//XParenthesizedExpression returns XExpression:
		//	"(" XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenXExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseXExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//XIfExpression returns XExpression:
		//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XIfExpression}
		public Action getXIfExpressionAction_0() { return cXIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=XExpression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_5_0() { return cThenXExpressionParserRuleCall_5_0; }

		//(=> "else" else=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=XExpression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//XExpression
		public RuleCall getElseXExpressionParserRuleCall_6_1_0() { return cElseXExpressionParserRuleCall_6_1_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cGroup_2_0_0.eContents().get(0);
		private final Assignment cLocalVarNameAssignment_2_0_0_0_0 = (Assignment)cGroup_2_0_0_0.eContents().get(0);
		private final RuleCall cLocalVarNameValidIDParserRuleCall_2_0_0_0_0_0 = (RuleCall)cLocalVarNameAssignment_2_0_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_0_1 = (Keyword)cGroup_2_0_0_0.eContents().get(1);
		private final Assignment cSwitchAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSwitchXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cSwitchAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_0_0 = (Keyword)cGroup_2_1_0_0.eContents().get(0);
		private final Assignment cLocalVarNameAssignment_2_1_0_0_1 = (Assignment)cGroup_2_1_0_0.eContents().get(1);
		private final RuleCall cLocalVarNameValidIDParserRuleCall_2_1_0_0_1_0 = (RuleCall)cLocalVarNameAssignment_2_1_0_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_0_2 = (Keyword)cGroup_2_1_0_0.eContents().get(2);
		private final Assignment cSwitchAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSwitchXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cSwitchAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesXCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultXExpressionParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////XSwitchExpression returns XExpression:
		// //	{XSwitchExpression}
		//
		////	'switch' (=>(localVarName=ValidID ':')? switch=XExpression
		//
		////		| =>('(' localVarName=ValidID ':') switch=XExpression ')') '{'
		// //	(cases+=XCasePart)+
		//
		////	('default' ':' default=XExpression )?
		// //	'}';
		// //
		// //XCasePart:
		//
		////	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
		// //		':' then=XExpression ;
		// XSwitchExpression returns
		//XExpression:
		//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
		//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
		public ParserRule getRule() { return rule; }

		//{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
		//switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}"
		public Group getGroup() { return cGroup; }

		//{XSwitchExpression}
		public Action getXSwitchExpressionAction_0() { return cXSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":") switch=XExpression ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> (localVarName=ValidID ":")? switch=XExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//=> (localVarName=ValidID ":")?
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//localVarName=ValidID ":"
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }

		//localVarName=ValidID
		public Assignment getLocalVarNameAssignment_2_0_0_0_0() { return cLocalVarNameAssignment_2_0_0_0_0; }

		//ValidID
		public RuleCall getLocalVarNameValidIDParserRuleCall_2_0_0_0_0_0() { return cLocalVarNameValidIDParserRuleCall_2_0_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_0_1() { return cColonKeyword_2_0_0_0_1; }

		//switch=XExpression
		public Assignment getSwitchAssignment_2_0_1() { return cSwitchAssignment_2_0_1; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_2_0_1_0() { return cSwitchXExpressionParserRuleCall_2_0_1_0; }

		//=> ("(" localVarName=ValidID ":") switch=XExpression ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> ("(" localVarName=ValidID ":")
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"(" localVarName=ValidID ":"
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0_0_0() { return cLeftParenthesisKeyword_2_1_0_0_0; }

		//localVarName=ValidID
		public Assignment getLocalVarNameAssignment_2_1_0_0_1() { return cLocalVarNameAssignment_2_1_0_0_1; }

		//ValidID
		public RuleCall getLocalVarNameValidIDParserRuleCall_2_1_0_0_1_0() { return cLocalVarNameValidIDParserRuleCall_2_1_0_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_0_2() { return cColonKeyword_2_1_0_0_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_2_1_1() { return cSwitchAssignment_2_1_1; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_2_1_1_0() { return cSwitchXExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=XCasePart+
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_4_0() { return cCasesXCasePartParserRuleCall_4_0; }

		//("default" ":" default=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=XExpression
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//XExpression
		public RuleCall getDefaultXExpressionParserRuleCall_5_2_0() { return cDefaultXExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseXExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenXExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//XCasePart: //	typeGuard=JvmTypeReference?
		// "case" case=XExpression ":" then=XExpression;
		public ParserRule getRule() { return rule; }

		////	typeGuard=JvmTypeReference?
		// "case" case=XExpression ":" then=XExpression
		public Group getGroup() { return cGroup; }

		////	typeGuard=JvmTypeReference?
		// "case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=XExpression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_1_0() { return cCaseXExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=XExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_3_0() { return cThenXExpressionParserRuleCall_3_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cInitXExpressionInsideBlockParserRuleCall_3_0_0_0 = (RuleCall)cInitAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cConditionXExpressionParserRuleCall_4_0_0_0 = (RuleCall)cConditionAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLoopAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLoopXExpressionParserRuleCall_5_0 = (RuleCall)cLoopAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEachExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_7_0 = (RuleCall)cEachExpressionAssignment_7.eContents().get(0);
		
		////XForLoopExpression returns XExpression:
		// //	{XForLoopExpression}
		//
		////	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
		// //		eachExpression=XExpression;
		//
		////XForLoopExpression returns XExpression:
		// //	{XForLoopExpression}
		// //	'for' '(' declaredParam=JvmFormalParameter 
		//
		////		((':' forExpression=XExpression )|
		// //		(';' condition+= XExpression ';' loop+=XExpression))
		// //		
		// //	')'
		//
		////		eachExpression=XExpression;
		// //XForLoopExpression returns XExpression:
		// //	{XForLoopExpression}
		// //	'for' '(' 
		//
		////		((inits +=(XVariableDeclaration | XExpression) (',' inits +=(XVariableDeclaration | XExpression))*)?  
		//
		////		=>('of' forExpression=XExpression )
		// //		|
		// //		=>(';' (condition+= XExpression)? ';' (loop+=XExpression)?))
		//
		////		
		// //	')'
		// //		eachExpression=XExpression
		// //	;
		// XForLoopExpression returns XExpression:
		//	{XForLoopExpression} "for" "(" (=> (init=XExpressionInsideBlock)? ";") (=> (condition=XExpression)? ";")
		//	loop=XExpression? ")" eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XForLoopExpression} "for" "(" (=> (init=XExpressionInsideBlock)? ";") (=> (condition=XExpression)? ";")
		//loop=XExpression? ")" eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//{XForLoopExpression}
		public Action getXForLoopExpressionAction_0() { return cXForLoopExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//=> (init=XExpressionInsideBlock)? ";"
		public Group getGroup_3() { return cGroup_3; }

		//=> (init=XExpressionInsideBlock)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//init=XExpressionInsideBlock
		public Assignment getInitAssignment_3_0_0() { return cInitAssignment_3_0_0; }

		//XExpressionInsideBlock
		public RuleCall getInitXExpressionInsideBlockParserRuleCall_3_0_0_0() { return cInitXExpressionInsideBlockParserRuleCall_3_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//=> (condition=XExpression)? ";"
		public Group getGroup_4() { return cGroup_4; }

		//=> (condition=XExpression)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//condition=XExpression
		public Assignment getConditionAssignment_4_0_0() { return cConditionAssignment_4_0_0; }

		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_4_0_0_0() { return cConditionXExpressionParserRuleCall_4_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//loop=XExpression?
		public Assignment getLoopAssignment_5() { return cLoopAssignment_5; }

		//XExpression
		public RuleCall getLoopXExpressionParserRuleCall_5_0() { return cLoopXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_7() { return cEachExpressionAssignment_7; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_7_0() { return cEachExpressionXExpressionParserRuleCall_7_0; }
	}

	public class XForEachLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForEachLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForEachExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_3_0 = (RuleCall)cDeclaredParamAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cForExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEachExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_7_0 = (RuleCall)cEachExpressionAssignment_7.eContents().get(0);
		
		//XForEachLoopExpression returns XExpression:
		//	{XForEachExpression} "foreach" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
		//	eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XForEachExpression} "foreach" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
		//eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//{XForEachExpression}
		public Action getXForEachExpressionAction_0() { return cXForEachExpressionAction_0; }

		//"foreach"
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_3() { return cDeclaredParamAssignment_3; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_3_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_5() { return cForExpressionAssignment_5; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_5_0() { return cForExpressionXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_7() { return cEachExpressionAssignment_7; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_7_0() { return cEachExpressionXExpressionParserRuleCall_7_0; }
	}

	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XWhileExpression returns XExpression:
		//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
		public ParserRule getRule() { return rule; }

		//{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression
		public Group getGroup() { return cGroup; }

		//{XWhileExpression}
		public Action getXWhileExpressionAction_0() { return cXWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_3_0() { return cPredicateXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_5_0() { return cBodyXExpressionParserRuleCall_5_0; }
	}

	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateXExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XDoWhileExpression returns XExpression:
		//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
		public ParserRule getRule() { return rule; }

		//{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")"
		public Group getGroup() { return cGroup; }

		//{XDoWhileExpression}
		public Action getXDoWhileExpressionAction_0() { return cXDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=XExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_2_0() { return cBodyXExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_5_0() { return cPredicateXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////XBlockExpression returns XExpression: 
		// //	{XBlockExpression}
		// //	'{'
		//
		////		(expressions+=XExpressionInsideBlock ';'?)*
		// //	'}';
		// XBlockExpression returns XExpression:
		//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* / * | ','* / "}";
		public ParserRule getRule() { return rule; }

		//{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* / * | ','* / "}"
		public Group getGroup() { return cGroup; }

		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableDeclarationListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////XExpressionInsideBlock returns XExpression:
		// //	XVariableDeclaration | XExpression
		// //	;
		// XExpressionInsideBlock
		//returns XExpression:
		//	XVariableDeclarationList | XExpression;
		public ParserRule getRule() { return rule; }

		//XVariableDeclarationList | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XVariableDeclarationList
		public RuleCall getXVariableDeclarationListParserRuleCall_0() { return cXVariableDeclarationListParserRuleCall_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }
	}

	public class XVariableDeclarationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclarationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsXVariableDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsXVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		
		////XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		// //	(writeable?='var'|'val') (=>(
		//
		////		(type=JvmTypeReference name=ValidID) | name=ValidID))  ('=' right=XExpression)?
		// //		;
		//
		////XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		// //	(writeable?='var'|'val') (=>(
		//
		////		(type=JvmTypeReference name=ValidID (=> array?= '[' size+= XExpression ']' ('[' size+= XExpression ']')*)?) | name=ValidID) ('=' right=XExpression)?
		//
		////		);
		// //XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		//
		////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
		//
		////XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		//
		////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) =>('=' right=XExpression)?;
		//
		////XVariableDeclarationList returns XExpression:
		// //	{XVariableDeclarationList}
		//
		////	(writeable?='var'|'val') declarations += XVariableDeclaration (',' declarations += XVariableDeclaration)*
		// //;
		//
		//XVariableDeclarationList returns XExpression:
		//	{XVariableDeclarationList} "var" declarations+=XVariableDeclaration ("," declarations+=XVariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//{XVariableDeclarationList} "var" declarations+=XVariableDeclaration ("," declarations+=XVariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//{XVariableDeclarationList}
		public Action getXVariableDeclarationListAction_0() { return cXVariableDeclarationListAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//declarations+=XVariableDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//XVariableDeclaration
		public RuleCall getDeclarationsXVariableDeclarationParserRuleCall_2_0() { return cDeclarationsXVariableDeclarationParserRuleCall_2_0; }

		//("," declarations+=XVariableDeclaration)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declarations+=XVariableDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//XVariableDeclaration
		public RuleCall getDeclarationsXVariableDeclarationParserRuleCall_3_1_0() { return cDeclarationsXVariableDeclarationParserRuleCall_3_1_0; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0 = (RuleCall)cTypeAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0_1_0 = (RuleCall)cNameAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cRightAssignment_2_0_1.eContents().get(0);
		
		////XVariableDeclaration returns XExpression: 
		// //	{XVariableDeclaration}
		//
		////	type=JvmTypeReference name=ValidID =>('=' right=XExpression)?
		// //;
		// XVariableDeclaration returns XExpression:
		//	{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//=> (type=JvmTypeReference name=ValidID) | name=ValidID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> (type=JvmTypeReference name=ValidID)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//type=JvmTypeReference name=ValidID
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_0_0() { return cTypeAssignment_1_0_0_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_0_0_1() { return cNameAssignment_1_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0_1_0() { return cNameValidIDParserRuleCall_1_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }

		//=> ("=" right=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"=" right=XExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//right=XExpression
		public Assignment getRightAssignment_2_0_1() { return cRightAssignment_2_0_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_2_0_1_0() { return cRightXExpressionParserRuleCall_2_0_1_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		////XVariableDeclaraPart returns XVariableDeclaraPart:
		//
		////	((type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?
		// //;
		//
		////XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		//
		////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID =>(arrayParts += XArrayPart)* ) | name=ValidID)   ('=' right=XExpression)?
		//
		////		;
		// //XVariableDeclaration returns XExpression:
		// //	{XVariableDeclaration}
		// //	(writeable?='var'|'val') (=>(
		//
		////		(type=JvmTypeReference name=ValidID (arrayParts += XArrayPart)*) | name=ValidID) ('=' right=XExpression)?
		// //		);
		//
		////XArrayPart returns XArrayPart:
		// //	'[' size= XExpression ']'
		// //;
		//
		////JvmFormalParameter returns types::JvmFormalParameter:
		// //	(parameterType=JvmTypeReference)? name=ValidID;
		//
		//JvmFormalParameter returns types::JvmFormalParameter:
		//	parameterType=JvmTypeReference? name=ValidID ("=" defaultValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference? name=ValidID ("=" defaultValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference?
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(=> "=" defaultValue=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> "="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_2_1_0() { return cDefaultValueXExpressionParserRuleCall_2_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		////FullJvmFormalParameter returns types::JvmFormalParameter:
		// //	parameterType=JvmTypeReference name=ValidID;
		//
		//FullJvmFormalParameter returns types::JvmFormalParameter:
		//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(=> "=" defaultValue=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> "="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_2_1_0() { return cDefaultValueXExpressionParserRuleCall_2_1_0; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitOperationCallAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////XFeatureCall returns XExpression:
		// //	{XFeatureCall}
		//
		////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
		//
		////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
		// //	(=>explicitOperationCall?='(' 
		// //		(
		//
		////		    featureCallArguments+=XShortClosure
		//
		////		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		// //		)? 
		// //	')')?
		//
		////	featureCallArguments+=XClosure?;
		// XFeatureCall returns XExpression:
		//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//	("," featureCallArguments+=XExpression)*)? ")")? //		(=>indexedOperation?='[' 
		// //			(
		//
		//	//			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		// //			)? 
		//
		//	//		']' =>(OpSingleAssign value=XExpression)?)?
		//;
		public ParserRule getRule() { return rule; }

		//{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//("," featureCallArguments+=XExpression)*)? ")")? //		(=>indexedOperation?='[' 
		// //			(
		//
		////			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		// //			)? 
		//
		////		']' =>(OpSingleAssign value=XExpression)?)?
		public Group getGroup() { return cGroup; }

		//{XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_0() { return cFeatureJvmIdentifiableElementCrossReference_2_0; }

		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_3_0() { return cExplicitOperationCallAssignment_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_3_0_0; }

		//(featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_0() { return cFeatureCallArgumentsAssignment_3_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_1() { return cFeatureCallArgumentsAssignment_3_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	| 'extends' 
		// //	| 'static' 
		// //	| 'import' 
		// //	| 'extension'
		// FeatureCallID:
		//	ValidID;
		public ParserRule getRule() { return rule; }

		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}

	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IdOrSuper:
		//	FeatureCallID | "super";
		public ParserRule getRule() { return rule; }

		//FeatureCallID | "super"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCallID
		public RuleCall getFeatureCallIDParserRuleCall_0() { return cFeatureCallIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorJvmConstructorCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConstructorJvmConstructorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cTypeArgumentsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//XConstructorCall returns XExpression:
		//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
		//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference
		//("," typeArguments+=JvmArgumentTypeReference)* ">")? ("(" (arguments+=XExpression ("," arguments+=XExpression)*)?
		//")")?
		public Group getGroup() { return cGroup; }

		//{XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=[types::JvmConstructor|QualifiedName]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[types::JvmConstructor|QualifiedName]
		public CrossReference getConstructorJvmConstructorCrossReference_2_0() { return cConstructorJvmConstructorCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1() { return cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1; }

		//(=> "<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_2_1() { return cTypeArgumentsAssignment_3_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//(=> "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_0() { return cArgumentsAssignment_4_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_0_0() { return cArgumentsXExpressionParserRuleCall_4_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_1_1() { return cArgumentsAssignment_4_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class XObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XObjectLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXObjectLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersXObjectLiteralPartParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersXObjectLiteralPartParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////XObjectLiteral returns XExpression:
		// //	{XObjectLiteral}
		// //	'new' '{'
		//
		////		properties +=XObjectLiteralPart (',' properties +=XObjectLiteralPart)*
		// //	'}'
		// //;
		// //
		//
		////XObjectLiteralPart returns types::JvmMember:
		// //	{XObjectLiteralPart}
		// //	simpleName=ID ':' value=XExpression
		// //;
		//
		//XObjectLiteral returns XExpression:
		//	{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}";
		public ParserRule getRule() { return rule; }

		//{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}"
		public Group getGroup() { return cGroup; }

		//{XObjectLiteral}
		public Action getXObjectLiteralAction_0() { return cXObjectLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=XObjectLiteralPart
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//XObjectLiteralPart
		public RuleCall getMembersXObjectLiteralPartParserRuleCall_3_0() { return cMembersXObjectLiteralPartParserRuleCall_3_0; }

		//("," members+=XObjectLiteralPart)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//members+=XObjectLiteralPart
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//XObjectLiteralPart
		public RuleCall getMembersXObjectLiteralPartParserRuleCall_4_1_0() { return cMembersXObjectLiteralPartParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XObjectLiteralPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XObjectLiteralPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXObjectLiteralPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSimpleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimpleNameIDTerminalRuleCall_1_0 = (RuleCall)cSimpleNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefaultValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultValueXExpressionParserRuleCall_3_0 = (RuleCall)cDefaultValueAssignment_3.eContents().get(0);
		
		//XObjectLiteralPart returns types::JvmMember:
		//	{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression;
		public ParserRule getRule() { return rule; }

		//{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression
		public Group getGroup() { return cGroup; }

		//{XObjectLiteralPart}
		public Action getXObjectLiteralPartAction_0() { return cXObjectLiteralPartAction_0; }

		//simpleName=ID
		public Assignment getSimpleNameAssignment_1() { return cSimpleNameAssignment_1; }

		//ID
		public RuleCall getSimpleNameIDTerminalRuleCall_1_0() { return cSimpleNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//defaultValue=XExpression
		public Assignment getDefaultValueAssignment_3() { return cDefaultValueAssignment_3; }

		//XExpression
		public RuleCall getDefaultValueXExpressionParserRuleCall_3_0() { return cDefaultValueXExpressionParserRuleCall_3_0; }
	}

	public class XStructLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStructLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStructLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeJvmStructTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeJvmStructTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesXFieldLiteralPartParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesXFieldLiteralPartParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XStructLiteral returns XExpression:
		//	{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName] "{" properties+=XFieldLiteralPart (","
		//	properties+=XFieldLiteralPart)* "}";
		public ParserRule getRule() { return rule; }

		//{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName] "{" properties+=XFieldLiteralPart (","
		//properties+=XFieldLiteralPart)* "}"
		public Group getGroup() { return cGroup; }

		//{XStructLiteral}
		public Action getXStructLiteralAction_0() { return cXStructLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//type=[types::JvmStructType|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[types::JvmStructType|QualifiedName]
		public CrossReference getTypeJvmStructTypeCrossReference_2_0() { return cTypeJvmStructTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeJvmStructTypeQualifiedNameParserRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=XFieldLiteralPart
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//XFieldLiteralPart
		public RuleCall getPropertiesXFieldLiteralPartParserRuleCall_4_0() { return cPropertiesXFieldLiteralPartParserRuleCall_4_0; }

		//("," properties+=XFieldLiteralPart)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//properties+=XFieldLiteralPart
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }

		//XFieldLiteralPart
		public RuleCall getPropertiesXFieldLiteralPartParserRuleCall_5_1_0() { return cPropertiesXFieldLiteralPartParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XFieldLiteralPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFieldLiteralPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFieldLiteralPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldJvmFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldJvmFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldJvmFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//XFieldLiteralPart:
		//	{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression;
		public ParserRule getRule() { return rule; }

		//{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression
		public Group getGroup() { return cGroup; }

		//{XFieldLiteralPart}
		public Action getXFieldLiteralPartAction_0() { return cXFieldLiteralPartAction_0; }

		//field=[types::JvmField|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//[types::JvmField|QualifiedName]
		public CrossReference getFieldJvmFieldCrossReference_1_0() { return cFieldJvmFieldCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFieldJvmFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldJvmFieldQualifiedNameParserRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=XExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_0() { return cValueXExpressionParserRuleCall_3_0; }
	}

	public class XArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsXExpressionParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XArrayLiteral returns XExpression:
		//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
		public ParserRule getRule() { return rule; }

		//{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]"
		public Group getGroup() { return cGroup; }

		//{XArrayLiteral}
		public Action getXArrayLiteralAction_0() { return cXArrayLiteralAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_0() { return cElementsXExpressionParserRuleCall_3_0; }

		//("," elements+=XExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_4_1_0() { return cElementsXExpressionParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//XBooleanLiteral returns XExpression:
		//	{XBooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0() { return cXBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XNullLiteral returns XExpression:
		//	{XNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{XNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{XNullLiteral}
		public Action getXNullLiteralAction_0() { return cXNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class XNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XNumberLiteral returns XExpression:
		//	{XNumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{XNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{XNumberLiteral}
		public Action getXNumberLiteralAction_0() { return cXNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XStringLiteral returns XExpression:
		//	{XStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{XStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{XStringLiteral}
		public Action getXStringLiteralAction_0() { return cXStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class XTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeJvmTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeJvmTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayDimensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayDimensionsArrayBracketsParserRuleCall_4_0 = (RuleCall)cArrayDimensionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XTypeLiteral returns XExpression:
		//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
		public ParserRule getRule() { return rule; }

		//{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")"
		public Group getGroup() { return cGroup; }

		//{XTypeLiteral}
		public Action getXTypeLiteralAction_0() { return cXTypeLiteralAction_0; }

		//"typeof"
		public Keyword getTypeofKeyword_1() { return cTypeofKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_3_0() { return cTypeJvmTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_3_0_1; }

		//arrayDimensions+=ArrayBrackets*
		public Assignment getArrayDimensionsAssignment_4() { return cArrayDimensionsAssignment_4; }

		//ArrayBrackets
		public RuleCall getArrayDimensionsArrayBracketsParserRuleCall_4_0() { return cArrayDimensionsArrayBracketsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XThrowExpression returns XExpression:
		//	{XThrowExpression} "throw" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XThrowExpression} "throw" expression=XExpression
		public Group getGroup() { return cGroup; }

		//{XThrowExpression}
		public Action getXThrowExpressionAction_0() { return cXThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class XReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XReturnExpression returns XExpression:
		//	{XReturnExpression} "return" => expression=XExpression?;
		public ParserRule getRule() { return rule; }

		//{XReturnExpression} "return" => expression=XExpression?
		public Group getGroup() { return cGroup; }

		//{XReturnExpression}
		public Action getXReturnExpressionAction_0() { return cXReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//=> expression=XExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class XBreakExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBreakExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XBreakExpression returns XExpression:
		//	{XBreakExpression} "break";
		public ParserRule getRule() { return rule; }

		//{XBreakExpression} "break"
		public Group getGroup() { return cGroup; }

		//{XBreakExpression}
		public Action getXBreakExpressionAction_0() { return cXBreakExpressionAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class XContinueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XContinueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXContinueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XContinueExpression returns XExpression:
		//	{XContinueExpression} "continue";
		public ParserRule getRule() { return rule; }

		//{XContinueExpression} "continue"
		public Group getGroup() { return cGroup; }

		//{XContinueExpression}
		public Action getXContinueExpressionAction_0() { return cXContinueExpressionAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}

	public class XTryCatchFinallyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTryCatchFinallyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTryCatchFinallyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClausesXCatchClauseParserRuleCall_3_0_0_0 = (RuleCall)cCatchClausesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cFinallyKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_1_1.eContents().get(0);
		
		//XTryCatchFinallyExpression returns XExpression:
		//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
		//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
		public ParserRule getRule() { return rule; }

		//{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
		//finallyExpression=XExpression)? | "finally" finallyExpression=XExpression)
		public Group getGroup() { return cGroup; }

		//{XTryCatchFinallyExpression}
		public Action getXTryCatchFinallyExpressionAction_0() { return cXTryCatchFinallyExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally" finallyExpression=XExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//catchClauses+=XCatchClause+
		public Assignment getCatchClausesAssignment_3_0_0() { return cCatchClausesAssignment_3_0_0; }

		//XCatchClause
		public RuleCall getCatchClausesXCatchClauseParserRuleCall_3_0_0_0() { return cCatchClausesXCatchClauseParserRuleCall_3_0_0_0; }

		//(=> "finally" finallyExpression=XExpression)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0_1_0() { return cFinallyKeyword_3_0_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_3_0_1_1() { return cFinallyExpressionAssignment_3_0_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0; }

		//"finally" finallyExpression=XExpression
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"finally"
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_3_1_1() { return cFinallyExpressionAssignment_3_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_3_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_3_1_1_0; }
	}

	public class XCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//XCatchClause:
		//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=FullJvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//FullJvmFormalParameter
		public RuleCall getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
		public ParserRule getRule() { return rule; }

		//HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//(INT | DECIMAL) ("." (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }

		//("." (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}

	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
		// * which makes downstream grammars break on classloading, when a rule is removed.
		// * /
		//StaticQualifier:
		//	(ValidID "::")+;
		public ParserRule getRule() { return rule; }

		//(ValidID "::")+
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	
	
	private XExpressionElements pXExpression;
	private XAssignmentElements pXAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private XMultiAssignmentElements pXMultiAssignment;
	private XOrExpressionElements pXOrExpression;
	private OpOrElements pOpOr;
	private XAndExpressionElements pXAndExpression;
	private OpAndElements pOpAnd;
	private XEqualityExpressionElements pXEqualityExpression;
	private OpEqualityElements pOpEquality;
	private XRelationalExpressionElements pXRelationalExpression;
	private OpMultiAssignElements pOpMultiAssign;
	private ShiftOpElements pShiftOp;
	private OpCompareElements pOpCompare;
	private XBitwiseExpressionElements pXBitwiseExpression;
	private BinaryBitwiseOpElements pBinaryBitwiseOp;
	private XShiftExpressionElements pXShiftExpression;
	private XAdditiveExpressionElements pXAdditiveExpression;
	private OpAddElements pOpAdd;
	private XTernaryOperationElements pXTernaryOperation;
	private XMultiplicativeExpressionElements pXMultiplicativeExpression;
	private OpMultiElements pOpMulti;
	private XPostfixOperationElements pXPostfixOperation;
	private PrefixOpElements pPrefixOp;
	private XUnaryOperationElements pXUnaryOperation;
	private OpUnaryElements pOpUnary;
	private XCastedExpressionElements pXCastedExpression;
	private XIndexOperationElements pXIndexOperation;
	private IndexOpElements pIndexOp;
	private XMemberFeatureCallElements pXMemberFeatureCall;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XLiteralElements pXLiteral;
	private XClosureElements pXClosure;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	private XIfExpressionElements pXIfExpression;
	private XSwitchExpressionElements pXSwitchExpression;
	private XCasePartElements pXCasePart;
	private XForLoopExpressionElements pXForLoopExpression;
	private XForEachLoopExpressionElements pXForEachLoopExpression;
	private XWhileExpressionElements pXWhileExpression;
	private XDoWhileExpressionElements pXDoWhileExpression;
	private XBlockExpressionElements pXBlockExpression;
	private XExpressionInsideBlockElements pXExpressionInsideBlock;
	private XVariableDeclarationListElements pXVariableDeclarationList;
	private XVariableDeclarationElements pXVariableDeclaration;
	private JvmFormalParameterElements pJvmFormalParameter;
	private FullJvmFormalParameterElements pFullJvmFormalParameter;
	private XFeatureCallElements pXFeatureCall;
	private FeatureCallIDElements pFeatureCallID;
	private IdOrSuperElements pIdOrSuper;
	private XConstructorCallElements pXConstructorCall;
	private XObjectLiteralElements pXObjectLiteral;
	private XObjectLiteralPartElements pXObjectLiteralPart;
	private XStructLiteralElements pXStructLiteral;
	private XFieldLiteralPartElements pXFieldLiteralPart;
	private XArrayLiteralElements pXArrayLiteral;
	private XBooleanLiteralElements pXBooleanLiteral;
	private XNullLiteralElements pXNullLiteral;
	private XNumberLiteralElements pXNumberLiteral;
	private XStringLiteralElements pXStringLiteral;
	private XTypeLiteralElements pXTypeLiteral;
	private XThrowExpressionElements pXThrowExpression;
	private XReturnExpressionElements pXReturnExpression;
	private XBreakExpressionElements pXBreakExpression;
	private XContinueExpressionElements pXContinueExpression;
	private XTryCatchFinallyExpressionElements pXTryCatchFinallyExpression;
	private XCatchClauseElements pXCatchClause;
	private QualifiedNameElements pQualifiedName;
	private NumberElements pNumber;
	private StaticQualifierElements pStaticQualifier;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	
	private final Grammar grammar;

	private XtypeGrammarAccess gaXtype;

	@Inject
	public XbaseGrammarAccess(GrammarProvider grammarProvider,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtype = gaXtype;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.summer.dsl.xbase.Xbase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//XExpression:
	//	XAssignment;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	////XAssignment returns XExpression :
	//
	////	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	//
	////	XOrExpression (
	//
	////		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//
	////	)?;
	// XAssignment returns XExpression:
	////	 feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |	
	// XMultiAssignment (=>
	//	({XAssignment.assignable=current} OpSingleAssign) value=XMultiAssignment)?;
	public XAssignmentElements getXAssignmentAccess() {
		return (pXAssignment != null) ? pXAssignment : (pXAssignment = new XAssignmentElements());
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XMultiAssignment returns XExpression:
	//	XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XOrExpression)*;
	public XMultiAssignmentElements getXMultiAssignmentAccess() {
		return (pXMultiAssignment != null) ? pXMultiAssignment : (pXMultiAssignment = new XMultiAssignmentElements());
	}
	
	public ParserRule getXMultiAssignmentRule() {
		return getXMultiAssignmentAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XOrExpressionElements getXOrExpressionAccess() {
		return (pXOrExpression != null) ? pXOrExpression : (pXOrExpression = new XOrExpressionElements());
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return (pXAndExpression != null) ? pXAndExpression : (pXAndExpression = new XAndExpressionElements());
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XEqualityExpressionElements getXEqualityExpressionAccess() {
		return (pXEqualityExpression != null) ? pXEqualityExpression : (pXEqualityExpression = new XEqualityExpressionElements());
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XBitwiseExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XBitwiseExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpMultiAssign:
	//	"*=" //	| '<' '<='
	// //	| '>' '>='
	// //	| '>' '>' '>='
	// //	| '>' '>'? '>='
	// //	| '<<=' 
	// //	| '>>='
	// //	| '>>>='
	// |
	//	"/=" | "%=" | "+=" | "-=" | ">" => ">=" | ">" => (">" ">=") | "<" => "<=" | "&=" | "^=" | "|=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return (pOpMultiAssign != null) ? pOpMultiAssign : (pOpMultiAssign = new OpMultiAssignElements());
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//ShiftOp: //	 '>' '>'
	// //	| '>' '>' '>'
	// //	| '<' '<'
	// ">" => (">" ">") | ">" => ">" | "<" => "<";
	public ShiftOpElements getShiftOpAccess() {
		return (pShiftOp != null) ? pShiftOp : (pShiftOp = new ShiftOpElements());
	}
	
	public ParserRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	////OpMultiAssign:
	// //	'+=' 
	// //	| '-=' 
	// //	| '*=' 
	// //	| '/=' 
	// //	| '%=' 
	// //	|  ('<' '<=')
	// //	|  ('>' '>'? '>=')
	//
	////	| '&='
	// //	| '^='
	// //	| '|='
	// //	| '='
	// //	;
	// //XOtherOperatorExpression returns XExpression:
	//
	////	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	////	rightOperand=XAdditiveExpression)*;
	// //
	// //OpOther:
	// ////	  '->' 
	// ////	| 
	// //	'..<'
	// //	| '>' '..'
	// //	| '..'
	//
	//////	| '=>' 
	// //	| '>' (=>('>' '>') | '>') 
	// //	| '<' (=>('<' '<') | '<')
	// ////	| '<>'
	// //	//| '?:' 
	// //	| '<=>'
	//
	////	;
	// XBitwiseExpression returns XExpression:
	//	XShiftExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|BinaryBitwiseOp])
	//	rightOperand=XShiftExpression)*;
	public XBitwiseExpressionElements getXBitwiseExpressionAccess() {
		return (pXBitwiseExpression != null) ? pXBitwiseExpression : (pXBitwiseExpression = new XBitwiseExpressionElements());
	}
	
	public ParserRule getXBitwiseExpressionRule() {
		return getXBitwiseExpressionAccess().getRule();
	}

	//BinaryBitwiseOp:
	//	"&" | "|" | "^";
	public BinaryBitwiseOpElements getBinaryBitwiseOpAccess() {
		return (pBinaryBitwiseOp != null) ? pBinaryBitwiseOp : (pBinaryBitwiseOp = new BinaryBitwiseOpElements());
	}
	
	public ParserRule getBinaryBitwiseOpRule() {
		return getBinaryBitwiseOpAccess().getRule();
	}

	//XShiftExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ShiftOp])
	//	rightOperand=XAdditiveExpression)*;
	public XShiftExpressionElements getXShiftExpressionAccess() {
		return (pXShiftExpression != null) ? pXShiftExpression : (pXShiftExpression = new XShiftExpressionElements());
	}
	
	public ParserRule getXShiftExpressionRule() {
		return getXShiftExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XTernaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return (pXAdditiveExpression != null) ? pXAdditiveExpression : (pXAdditiveExpression = new XAdditiveExpressionElements());
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	////XKeyValuePair returns XExpression:
	// //	XTernaryOperation (=>({XKeyValuePair.key=current} ':')  value = XExpression)
	//
	////;
	// //XKeyValuePair returns XExpression:
	//
	////	XStringLiteral (=>({XKeyValuePair.key=current} ':')  value = XTernaryOperation)
	// //;
	// //	ternary operator
	//
	//XTernaryOperation returns XExpression:
	//	XMultiplicativeExpression (=> ({XTernaryOperation.condition=current} "?") trueOperand=XExpression ":"
	//	falseOperand=XExpression)*;
	public XTernaryOperationElements getXTernaryOperationAccess() {
		return (pXTernaryOperation != null) ? pXTernaryOperation : (pXTernaryOperation = new XTernaryOperationElements());
	}
	
	public ParserRule getXTernaryOperationRule() {
		return getXTernaryOperationAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XPostfixOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XPostfixOperation)*;
	public XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return (pXMultiplicativeExpression != null) ? pXMultiplicativeExpression : (pXMultiplicativeExpression = new XMultiplicativeExpressionElements());
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" //	| '**' 
	// | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return (pOpMulti != null) ? pOpMulti : (pOpMulti = new OpMultiElements());
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	////postfix for incessantly
	// XPostfixOperation returns XExpression:
	//	XUnaryOperation => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|PrefixOp])*;
	public XPostfixOperationElements getXPostfixOperationAccess() {
		return (pXPostfixOperation != null) ? pXPostfixOperation : (pXPostfixOperation = new XPostfixOperationElements());
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//////prefix for incessantly
	// //XPrefixOperation returns XExpression:
	//
	////	{XPrefixOperation} feature=[types::JvmIdentifiableElement|PrefixOp] operand=XPrefixOperation
	// //	|XUnaryOperation
	//
	////	;
	// PrefixOp:
	//	"++" | "--";
	public PrefixOpElements getPrefixOpAccess() {
		return (pPrefixOp != null) ? pPrefixOp : (pPrefixOp = new PrefixOpElements());
	}
	
	public ParserRule getPrefixOpRule() {
		return getPrefixOpAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	////OpUnary:
	// //	"!" | "-" | "+";
	// //	|PrefixOp
	// OpUnary:
	//	"!" | "-" | "+" | "~" | "++" | "--";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	////DeleteExpression returns XExpression:
	// //	'delete' 
	// //;
	// XCastedExpression returns XExpression:
	//	XIndexOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XCastedExpressionElements getXCastedExpressionAccess() {
		return (pXCastedExpression != null) ? pXCastedExpression : (pXCastedExpression = new XCastedExpressionElements());
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XIndexOperation returns XExpression:
	//	XMemberFeatureCall (=> ({XIndexOperation.expression=current} feature=[types::JvmIdentifiableElement|IndexOp])
	//	index=XExpression "]")* //(=>'=' value = XExpression)
	//;
	public XIndexOperationElements getXIndexOperationAccess() {
		return (pXIndexOperation != null) ? pXIndexOperation : (pXIndexOperation = new XIndexOperationElements());
	}
	
	public ParserRule getXIndexOperationRule() {
		return getXIndexOperationAccess().getRule();
	}

	//IndexOp:
	//	"[";
	public IndexOpElements getIndexOpAccess() {
		return (pIndexOp != null) ? pIndexOp : (pIndexOp = new IndexOpElements());
	}
	
	public ParserRule getIndexOpRule() {
		return getIndexOpAccess().getRule();
	}

	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			memberCallArguments+=XClosure?
	// //		)*;
	// //XExpressionCall returns XExpression:
	// //		XMemberFeatureCall
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')')
	// //;
	// //
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] (
	// //			=>explicitOperationCall?='(' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	// //		)*;
	//
	////XMemberFeatureCall returns XExpression:
	// //	XPrimaryExpression
	//
	////	(=>({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?='(')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ')'
	//
	////	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
	//
	////		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ']'
	//
	////	|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//
	////	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|FeatureCallID] 
	// //		(
	// //			(
	// //			=>explicitOperationCall?='(' 
	//
	////				(
	// //				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')')?
	//
	////			
	// ////			|
	// //			(
	// //			=>indexedOperation?='[' 
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			']')?
	// //			
	// //		)
	//
	////		)*;
	// XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XMemberFeatureCall1.memberCallTarget=current} explicitOperationCall?="(")
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")"
	//	//	|=>({XMemberFeatureCall1.memberCallTarget=current} indexedOperation?='[')
	//
	//	//		 (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	// //		 ']'
	//
	//	//	|=>({XAssignment.assignable=current} 't=') value=XAssignment
	// | => ({XAssignment.assignable=current} ("." |
	//	explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? //			(
	//
	//	//			=>indexedOperation?='[' 
	// //				(
	//
	//	//				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			']')?
	//)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return (pXMemberFeatureCall != null) ? pXMemberFeatureCall : (pXMemberFeatureCall = new XMemberFeatureCallElements());
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	////XMemberFeatureCall1 returns XExpression:
	// //	XPrimaryExpression
	// //	(=>({XMemberFeatureCall.memberCallTarget=current}
	//
	////		(=>explicitOperationCall?="(")
	// //	) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	// //				(
	//
	////				  memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	// //				)? 
	// //			')'
	// //		)*
	// //	;
	//
	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XFeatureCall | XLiteral | XBlockExpression | XSwitchExpression | XIfExpression |
	//	XForLoopExpression | XForEachLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression |
	//	XReturnExpression | XTryCatchFinallyExpression | XBreakExpression | XContinueExpression | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	////	|
	// //	XKeyValuePair
	// XLiteral returns XExpression: //	XCollectionLiteral |
	// XObjectLiteral | XStructLiteral |
	//	XArrayLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////XCollectionLiteral:
	// //	XSetLiteral 
	// //	| 
	// //	XListLiteral
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XSetLiteral:
	//
	////	{XSetLiteral}  '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	// //;
	// //XListLiteral:
	//
	////	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	// //;
	// //XListLiteral:
	//
	////	{XListLiteral} '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	// //;
	//
	////XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'[') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpressionInClosure 
	// //	']';
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'lambda') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpressionInClosure 
	// //	']'
	// //	;
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	//
	////	'lambda' '{') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpression 
	// //	'}'
	// //	;
	// //XClosure returns XExpression:
	// //	=>({XClosure} 
	// //	'lambda' '{') 
	//
	////		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
	//
	////		expression=XExpression 
	// //	'}'
	// //	;
	// XClosure returns XExpression:
	//	{XClosure} "function" (name=ValidID | operator?="operator" name=OpMulti)? => ("("
	//	(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? ")" (":"
	//	returnType=JvmTypeReference)?) expression=XExpression;
	public XClosureElements getXClosureAccess() {
		return (pXClosure != null) ? pXClosure : (pXClosure = new XClosureElements());
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	////		(
	// //			{types::JvmOperation.annotationInfo = current} modifiers+=CommonModifier*
	//
	////			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	// //			( 
	//
	//////				=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  |
	//
	//////			   =>
	// //			   (returnType=JvmTypeReference =>(simpleName=ValidID | ('operator' simpleName= OpMulti))
	//
	////			   	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	// //			   	)
	//
	////			   	 '(')
	// ////			  | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	// ////			  | name=ValidID '('
	//
	////			)
	// //			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//
	//////			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	//
	////			(expression=XBlockExpression 
	// ////				| expression=RichString
	// //				 | ';'
	// //			)?
	// //		)
	//
	////	XFunctionDeclaration returns XExpression:
	// //	{XFunctionDeclaration}
	// //	'function' (name=ValidID |
	//
	////	('operator' name= OpMulti))?
	// //			   	 '('
	//
	////			(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
	// //	body = XBlockExpression
	//
	////;
	// //XExpressionInClosure returns XExpression: 
	// //	{XBlockExpression}
	//
	////	(expressions+=XExpressionInsideBlock ';'?)*
	// //;
	// //XShortClosure returns XExpression:
	//
	////	=>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	//
	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return (pXIfExpression != null) ? pXIfExpression : (pXIfExpression = new XIfExpressionElements());
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	////XSwitchExpression returns XExpression:
	// //	{XSwitchExpression}
	//
	////	'switch' (=>(localVarName=ValidID ':')? switch=XExpression
	//
	////		| =>('(' localVarName=ValidID ':') switch=XExpression ')') '{'
	// //	(cases+=XCasePart)+
	//
	////	('default' ':' default=XExpression )?
	// //	'}';
	// //
	// //XCasePart:
	//
	////	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
	// //		':' then=XExpression ;
	// XSwitchExpression returns
	//XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return (pXSwitchExpression != null) ? pXSwitchExpression : (pXSwitchExpression = new XSwitchExpressionElements());
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart: //	typeGuard=JvmTypeReference?
	// "case" case=XExpression ":" then=XExpression;
	public XCasePartElements getXCasePartAccess() {
		return (pXCasePart != null) ? pXCasePart : (pXCasePart = new XCasePartElements());
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	//
	////	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
	// //		eachExpression=XExpression;
	//
	////XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' declaredParam=JvmFormalParameter 
	//
	////		((':' forExpression=XExpression )|
	// //		(';' condition+= XExpression ';' loop+=XExpression))
	// //		
	// //	')'
	//
	////		eachExpression=XExpression;
	// //XForLoopExpression returns XExpression:
	// //	{XForLoopExpression}
	// //	'for' '(' 
	//
	////		((inits +=(XVariableDeclaration | XExpression) (',' inits +=(XVariableDeclaration | XExpression))*)?  
	//
	////		=>('of' forExpression=XExpression )
	// //		|
	// //		=>(';' (condition+= XExpression)? ';' (loop+=XExpression)?))
	//
	////		
	// //	')'
	// //		eachExpression=XExpression
	// //	;
	// XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" (=> (init=XExpressionInsideBlock)? ";") (=> (condition=XExpression)? ";")
	//	loop=XExpression? ")" eachExpression=XExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return (pXForLoopExpression != null) ? pXForLoopExpression : (pXForLoopExpression = new XForLoopExpressionElements());
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XForEachLoopExpression returns XExpression:
	//	{XForEachExpression} "foreach" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XForEachLoopExpressionElements getXForEachLoopExpressionAccess() {
		return (pXForEachLoopExpression != null) ? pXForEachLoopExpression : (pXForEachLoopExpression = new XForEachLoopExpressionElements());
	}
	
	public ParserRule getXForEachLoopExpressionRule() {
		return getXForEachLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return (pXWhileExpression != null) ? pXWhileExpression : (pXWhileExpression = new XWhileExpressionElements());
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return (pXDoWhileExpression != null) ? pXDoWhileExpression : (pXDoWhileExpression = new XDoWhileExpressionElements());
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	////XBlockExpression returns XExpression: 
	// //	{XBlockExpression}
	// //	'{'
	//
	////		(expressions+=XExpressionInsideBlock ';'?)*
	// //	'}';
	// XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* / * | ','* / "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return (pXBlockExpression != null) ? pXBlockExpression : (pXBlockExpression = new XBlockExpressionElements());
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	////XExpressionInsideBlock returns XExpression:
	// //	XVariableDeclaration | XExpression
	// //	;
	// XExpressionInsideBlock
	//returns XExpression:
	//	XVariableDeclarationList | XExpression;
	public XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return (pXExpressionInsideBlock != null) ? pXExpressionInsideBlock : (pXExpressionInsideBlock = new XExpressionInsideBlockElements());
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID) | name=ValidID))  ('=' right=XExpression)?
	// //		;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (=> array?= '[' size+= XExpression ']' ('[' size+= XExpression ']')*)?) | name=ValidID) ('=' right=XExpression)?
	//
	////		);
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) =>('=' right=XExpression)?;
	//
	////XVariableDeclarationList returns XExpression:
	// //	{XVariableDeclarationList}
	//
	////	(writeable?='var'|'val') declarations += XVariableDeclaration (',' declarations += XVariableDeclaration)*
	// //;
	//
	//XVariableDeclarationList returns XExpression:
	//	{XVariableDeclarationList} "var" declarations+=XVariableDeclaration ("," declarations+=XVariableDeclaration)*;
	public XVariableDeclarationListElements getXVariableDeclarationListAccess() {
		return (pXVariableDeclarationList != null) ? pXVariableDeclarationList : (pXVariableDeclarationList = new XVariableDeclarationListElements());
	}
	
	public ParserRule getXVariableDeclarationListRule() {
		return getXVariableDeclarationListAccess().getRule();
	}

	////XVariableDeclaration returns XExpression: 
	// //	{XVariableDeclaration}
	//
	////	type=JvmTypeReference name=ValidID =>('=' right=XExpression)?
	// //;
	// XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (=> (type=JvmTypeReference name=ValidID) | name=ValidID) => ("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return (pXVariableDeclaration != null) ? pXVariableDeclaration : (pXVariableDeclaration = new XVariableDeclarationElements());
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	////XVariableDeclaraPart returns XVariableDeclaraPart:
	//
	////	((type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?
	// //;
	//
	////XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	//
	////	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID =>(arrayParts += XArrayPart)* ) | name=ValidID)   ('=' right=XExpression)?
	//
	////		;
	// //XVariableDeclaration returns XExpression:
	// //	{XVariableDeclaration}
	// //	(writeable?='var'|'val') (=>(
	//
	////		(type=JvmTypeReference name=ValidID (arrayParts += XArrayPart)*) | name=ValidID) ('=' right=XExpression)?
	// //		);
	//
	////XArrayPart returns XArrayPart:
	// //	'[' size= XExpression ']'
	// //;
	//
	////JvmFormalParameter returns types::JvmFormalParameter:
	// //	(parameterType=JvmTypeReference)? name=ValidID;
	//
	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID ("=" defaultValue=XExpression)?;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return (pJvmFormalParameter != null) ? pJvmFormalParameter : (pJvmFormalParameter = new JvmFormalParameterElements());
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	////FullJvmFormalParameter returns types::JvmFormalParameter:
	// //	parameterType=JvmTypeReference name=ValidID;
	//
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID ("=" defaultValue=XExpression)?;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return (pFullJvmFormalParameter != null) ? pFullJvmFormalParameter : (pFullJvmFormalParameter = new FullJvmFormalParameterElements());
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	////XFeatureCall returns XExpression:
	// //	{XFeatureCall}
	//
	////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	//
	////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	// //	(=>explicitOperationCall?='(' 
	// //		(
	//
	////		    featureCallArguments+=XShortClosure
	//
	////		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //		)? 
	// //	')')?
	//
	////	featureCallArguments+=XClosure?;
	// XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
	//	("," featureCallArguments+=XExpression)*)? ")")? //		(=>indexedOperation?='[' 
	// //			(
	//
	//	//			  featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	// //			)? 
	//
	//	//		']' =>(OpSingleAssign value=XExpression)?)?
	//;
	public XFeatureCallElements getXFeatureCallAccess() {
		return (pXFeatureCall != null) ? pXFeatureCall : (pXFeatureCall = new XFeatureCallElements());
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	////	| 'extends' 
	// //	| 'static' 
	// //	| 'import' 
	// //	| 'extension'
	// FeatureCallID:
	//	ValidID;
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return (pFeatureCallID != null) ? pFeatureCallID : (pFeatureCallID = new FeatureCallIDElements());
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public IdOrSuperElements getIdOrSuperAccess() {
		return (pIdOrSuper != null) ? pIdOrSuper : (pIdOrSuper = new IdOrSuperElements());
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")")?;
	public XConstructorCallElements getXConstructorCallAccess() {
		return (pXConstructorCall != null) ? pXConstructorCall : (pXConstructorCall = new XConstructorCallElements());
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	////XObjectLiteral returns XExpression:
	// //	{XObjectLiteral}
	// //	'new' '{'
	//
	////		properties +=XObjectLiteralPart (',' properties +=XObjectLiteralPart)*
	// //	'}'
	// //;
	// //
	//
	////XObjectLiteralPart returns types::JvmMember:
	// //	{XObjectLiteralPart}
	// //	simpleName=ID ':' value=XExpression
	// //;
	//
	//XObjectLiteral returns XExpression:
	//	{XObjectLiteral} "new" "{" members+=XObjectLiteralPart ("," members+=XObjectLiteralPart)* "}";
	public XObjectLiteralElements getXObjectLiteralAccess() {
		return (pXObjectLiteral != null) ? pXObjectLiteral : (pXObjectLiteral = new XObjectLiteralElements());
	}
	
	public ParserRule getXObjectLiteralRule() {
		return getXObjectLiteralAccess().getRule();
	}

	//XObjectLiteralPart returns types::JvmMember:
	//	{XObjectLiteralPart} simpleName=ID ":" defaultValue=XExpression;
	public XObjectLiteralPartElements getXObjectLiteralPartAccess() {
		return (pXObjectLiteralPart != null) ? pXObjectLiteralPart : (pXObjectLiteralPart = new XObjectLiteralPartElements());
	}
	
	public ParserRule getXObjectLiteralPartRule() {
		return getXObjectLiteralPartAccess().getRule();
	}

	//XStructLiteral returns XExpression:
	//	{XStructLiteral} "new" type=[types::JvmStructType|QualifiedName] "{" properties+=XFieldLiteralPart (","
	//	properties+=XFieldLiteralPart)* "}";
	public XStructLiteralElements getXStructLiteralAccess() {
		return (pXStructLiteral != null) ? pXStructLiteral : (pXStructLiteral = new XStructLiteralElements());
	}
	
	public ParserRule getXStructLiteralRule() {
		return getXStructLiteralAccess().getRule();
	}

	//XFieldLiteralPart:
	//	{XFieldLiteralPart} field=[types::JvmField|QualifiedName] ":" value=XExpression;
	public XFieldLiteralPartElements getXFieldLiteralPartAccess() {
		return (pXFieldLiteralPart != null) ? pXFieldLiteralPart : (pXFieldLiteralPart = new XFieldLiteralPartElements());
	}
	
	public ParserRule getXFieldLiteralPartRule() {
		return getXFieldLiteralPartAccess().getRule();
	}

	//XArrayLiteral returns XExpression:
	//	{XArrayLiteral} "new" "[" elements+=XExpression ("," elements+=XExpression)* "]";
	public XArrayLiteralElements getXArrayLiteralAccess() {
		return (pXArrayLiteral != null) ? pXArrayLiteral : (pXArrayLiteral = new XArrayLiteralElements());
	}
	
	public ParserRule getXArrayLiteralRule() {
		return getXArrayLiteralAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return (pXBooleanLiteral != null) ? pXBooleanLiteral : (pXBooleanLiteral = new XBooleanLiteralElements());
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return (pXNullLiteral != null) ? pXNullLiteral : (pXNullLiteral = new XNullLiteralElements());
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XNumberLiteralElements getXNumberLiteralAccess() {
		return (pXNumberLiteral != null) ? pXNumberLiteral : (pXNumberLiteral = new XNumberLiteralElements());
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return (pXStringLiteral != null) ? pXStringLiteral : (pXStringLiteral = new XStringLiteralElements());
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XTypeLiteralElements getXTypeLiteralAccess() {
		return (pXTypeLiteral != null) ? pXTypeLiteral : (pXTypeLiteral = new XTypeLiteralElements());
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XThrowExpressionElements getXThrowExpressionAccess() {
		return (pXThrowExpression != null) ? pXThrowExpression : (pXThrowExpression = new XThrowExpressionElements());
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XReturnExpressionElements getXReturnExpressionAccess() {
		return (pXReturnExpression != null) ? pXReturnExpression : (pXReturnExpression = new XReturnExpressionElements());
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XBreakExpression returns XExpression:
	//	{XBreakExpression} "break";
	public XBreakExpressionElements getXBreakExpressionAccess() {
		return (pXBreakExpression != null) ? pXBreakExpression : (pXBreakExpression = new XBreakExpressionElements());
	}
	
	public ParserRule getXBreakExpressionRule() {
		return getXBreakExpressionAccess().getRule();
	}

	//XContinueExpression returns XExpression:
	//	{XContinueExpression} "continue";
	public XContinueExpressionElements getXContinueExpressionAccess() {
		return (pXContinueExpression != null) ? pXContinueExpression : (pXContinueExpression = new XContinueExpressionElements());
	}
	
	public ParserRule getXContinueExpressionRule() {
		return getXContinueExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return (pXTryCatchFinallyExpression != null) ? pXTryCatchFinallyExpression : (pXTryCatchFinallyExpression = new XTryCatchFinallyExpressionElements());
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XCatchClauseElements getXCatchClauseAccess() {
		return (pXCatchClause != null) ? pXCatchClause : (pXCatchClause = new XCatchClauseElements());
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return (pStaticQualifier != null) ? pStaticQualifier : (pStaticQualifier = new StaticQualifierElements());
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	////XImportSection:
	// //	importDeclarations+=XImportDeclaration+;
	// //
	// //XImportDeclaration: 
	// //	'import' (
	//
	////		(static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedName] '.' '*') 
	//
	////		| importedType=[JvmDeclaredType|QualifiedName] 
	// //		| importedNamespace=QualifiedNameWithWildcard) 
	// //		';'
	//
	////;
	// XImportSection1:
	//	(importDeclarations+=XImportDeclaration1 ";"?)+;
	public XtypeGrammarAccess.XImportSection1Elements getXImportSection1Access() {
		return gaXtype.getXImportSection1Access();
	}
	
	public ParserRule getXImportSection1Rule() {
		return getXImportSection1Access().getRule();
	}

	//XImportDeclaration1:
	//	"import" (("{" importItems+=XImportItem ("," importItems+=XImportItem)* "}" | importItems+=XImportItem) "from"
	//	importURI=STRING | "from" importURI=STRING "as" alias=ID);
	public XtypeGrammarAccess.XImportDeclaration1Elements getXImportDeclaration1Access() {
		return gaXtype.getXImportDeclaration1Access();
	}
	
	public ParserRule getXImportDeclaration1Rule() {
		return getXImportDeclaration1Access().getRule();
	}

	//XImportItem:
	//	{XImportItem} importedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XImportItemElements getXImportItemAccess() {
		return gaXtype.getXImportItemAccess();
	}
	
	public ParserRule getXImportItemRule() {
		return getXImportItemAccess().getRule();
	}

	////'import' {importId += [JvmIdentifiableElement|ID] (as name=ID)? (',' importId += [JvmIdentifiableElement|ID] (as name=ID)?)*  } from module1 
	//
	////import as name=ID from module
	// XExportSection:
	//	(exportDeclarations+=XExportDeclaration ";"?)+;
	public XtypeGrammarAccess.XExportSectionElements getXExportSectionAccess() {
		return gaXtype.getXExportSectionAccess();
	}
	
	public ParserRule getXExportSectionRule() {
		return getXExportSectionAccess().getRule();
	}

	//XExportDeclaration:
	//	"export" ("{" exportItems+=XExportItem ("," exportItems+=XExportItem)* "}" ("from" importURI=STRING)? //			|
	//
	//	//			(exportItems +=XExportItem)
	// //			|
	// //			wildcard?='*'
	// | "from" importURI=STRING "as" alias=ID);
	public XtypeGrammarAccess.XExportDeclarationElements getXExportDeclarationAccess() {
		return gaXtype.getXExportDeclarationAccess();
	}
	
	public ParserRule getXExportDeclarationRule() {
		return getXExportDeclarationAccess().getRule();
	}

	//XExportItem:
	//	exportedId=[JvmIdentifiableElement] ("as" alias=ID)?;
	public XtypeGrammarAccess.XExportItemElements getXExportItemAccess() {
		return gaXtype.getXExportItemAccess();
	}
	
	public ParserRule getXExportItemRule() {
		return getXExportItemAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
