/*
* generated by Xtext
*/ grammar DebugInternalXbase ;

// Rule XExpression

ruleXExpression :
	ruleXAssignment
;

// Rule XAssignment
 ruleXAssignment :
	ruleXMultiAssignment (
		( (
		ruleOpSingleAssign
		) => ruleOpSingleAssign ) ruleXMultiAssignment
	)?
;

// Rule OpSingleAssign
 ruleOpSingleAssign :
	'='
;

// Rule XMultiAssignment
 ruleXMultiAssignment :
	ruleXOrExpression (
		( (
		ruleOpMultiAssign
		) => ruleOpMultiAssign ) ruleXOrExpression
	)*
;

// Rule XOrExpression
 ruleXOrExpression :
	ruleXAndExpression (
		( (
		ruleOpOr
		) => ruleOpOr ) ruleXAndExpression
	)*
;

// Rule OpOr
 ruleOpOr :
	'||'
;

// Rule XAndExpression
 ruleXAndExpression :
	ruleXEqualityExpression (
		( (
		ruleOpAnd
		) => ruleOpAnd ) ruleXEqualityExpression
	)*
;

// Rule OpAnd
 ruleOpAnd :
	'&&'
;

// Rule XEqualityExpression
 ruleXEqualityExpression :
	ruleXRelationalExpression (
		( (
		ruleOpEquality
		) => ruleOpEquality ) ruleXRelationalExpression
	)*
;

// Rule OpEquality
 ruleOpEquality :
	'==' |
	'!=' |
	'===' |
	'!=='
;

// Rule XRelationalExpression
 ruleXRelationalExpression :
	ruleXBitwiseExpression (
		( (
		'instanceof'
		) => 'instanceof' ) ruleJvmTypeReference |
		( (
		ruleOpCompare
		) => ruleOpCompare ) ruleXBitwiseExpression
	)*
;

// Rule OpMultiAssign
 ruleOpMultiAssign :
	'*=' |
	'/=' |
	'%=' |
	'+=' |
	'-=' |
	'>' ( (
	'>='
	) => '>=' ) |
	'>' ( (
	'>' '>='
	) => (
		'>' '>='
	) ) |
	'<' ( (
	'<='
	) => '<=' ) |
	'&=' |
	'^=' |
	'|='
;

// Rule ShiftOp
 ruleShiftOp :
	'>' ( (
	'>' '>'
	) => (
		'>' '>'
	) ) |
	'>' ( (
	'>'
	) => '>' ) |
	'<' ( (
	'<'
	) => '<' )
;

// Rule OpCompare
 ruleOpCompare :
	'>=' |
	'<=' |
	'>' |
	'<'
;

// Rule XBitwiseExpression
 ruleXBitwiseExpression :
	ruleXShiftExpression (
		( (
		ruleBinaryBitwiseOp
		) => ruleBinaryBitwiseOp ) ruleXShiftExpression
	)*
;

// Rule BinaryBitwiseOp
 ruleBinaryBitwiseOp :
	'&' |
	'|' |
	'^'
;

// Rule XShiftExpression
 ruleXShiftExpression :
	ruleXAdditiveExpression (
		( (
		ruleShiftOp
		) => ruleShiftOp ) ruleXAdditiveExpression
	)*
;

// Rule XAdditiveExpression
 ruleXAdditiveExpression :
	ruleXTernaryOperation (
		( (
		ruleOpAdd
		) => ruleOpAdd ) ruleXMultiplicativeExpression
	)*
;

// Rule OpAdd
 ruleOpAdd :
	'+' |
	'-'
;

// Rule XTernaryOperation
 ruleXTernaryOperation :
	ruleXMultiplicativeExpression (
		( (
		'?'
		) => '?' ) ruleXExpression ':' ruleXExpression
	)*
;

// Rule XMultiplicativeExpression
 ruleXMultiplicativeExpression :
	ruleXPostfixOperation (
		( (
		ruleOpMulti
		) => ruleOpMulti ) ruleXPostfixOperation
	)*
;

// Rule OpMulti
 ruleOpMulti :
	'*' |
	'/' |
	'%'
;

// Rule XPostfixOperation
 ruleXPostfixOperation :
	ruleXUnaryOperation ( (
	rulePrefixOp
	) => rulePrefixOp )*
;

// Rule PrefixOp
 rulePrefixOp :
	'++' |
	'--'
;

// Rule XUnaryOperation
 ruleXUnaryOperation :
	ruleOpUnary ruleXUnaryOperation |
	ruleXCastedExpression
;

// Rule OpUnary
 ruleOpUnary :
	'!' |
	'-' |
	'+' |
	'~' |
	'++' |
	'--'
;

// Rule XCastedExpression
 ruleXCastedExpression :
	ruleXIndexOperation (
		( (
		'as'
		) => 'as' ) ruleJvmTypeReference
	)*
;

// Rule XIndexOperation
 ruleXIndexOperation :
	ruleXMemberFeatureCall (
		( (
		ruleIndexOp
		) => ruleIndexOp ) ruleXExpression ']'
	)*
;

// Rule IndexOp
 ruleIndexOp :
	'['
;

// Rule XMemberFeatureCall
 ruleXMemberFeatureCall :
	ruleXPrimaryExpression (
		( (
		'('
		) => '(' ) (
			ruleXExpression (
				',' ruleXExpression
			)*
		)? ')' |
		( (
		(
			'.' |
			'::'
		) ruleFeatureCallID ruleOpSingleAssign
		) => (
			(
				'.' |
				'::'
			) ruleFeatureCallID ruleOpSingleAssign
		) ) ruleXAssignment |
		( (
		'.' |
		'?.' |
		'::'
		) => (
			'.' |
			'?.' |
			'::'
		) ) (
			'<' ruleJvmArgumentTypeReference (
				',' ruleJvmArgumentTypeReference
			)* '>'
		)? ruleFeatureCallID (
			( (
			'('
			) => '(' ) (
				ruleXExpression (
					',' ruleXExpression
				)*
			)? ')'
		)?
	)*
;

// Rule XPrimaryExpression
 ruleXPrimaryExpression :
	ruleXConstructorCall |
	ruleXFeatureCall |
	ruleXLiteral |
	ruleXBlockExpression |
	ruleXSwitchExpression |
	ruleXIfExpression |
	ruleXForLoopExpression |
	ruleXForEachLoopExpression |
	ruleXWhileExpression |
	ruleXDoWhileExpression |
	ruleXThrowExpression |
	ruleXReturnExpression |
	ruleXTryCatchFinallyExpression |
	ruleXBreakExpression |
	ruleXContinueExpression |
	ruleXParenthesizedExpression
;

// Rule XLiteral
 ruleXLiteral :
	ruleXObjectLiteral |
	ruleXArrayLiteral |
	ruleXClosure |
	ruleXBooleanLiteral |
	ruleXNumberLiteral |
	ruleXNullLiteral |
	ruleXStringLiteral |
	ruleXTypeLiteral
;

// Rule XClosure
 ruleXClosure :
	'function' (
		ruleValidID |
		'operator' ruleOpMulti
	)? ( (
	'(' (
		ruleJvmFormalParameter (
			',' ruleJvmFormalParameter
		)*
	)? ')' (
		':' ruleJvmTypeReference
	)?
	) => (
		'(' (
			ruleJvmFormalParameter (
				',' ruleJvmFormalParameter
			)*
		)? ')' (
			':' ruleJvmTypeReference
		)?
	) ) ruleXExpression
;

// Rule XParenthesizedExpression
 ruleXParenthesizedExpression :
	'(' ruleXExpression ')'
;

// Rule XIfExpression
 ruleXIfExpression :
	'if' '(' ruleXExpression ')' ruleXExpression (
		( (
		'else'
		) => 'else' ) ruleXExpression
	)?
;

// Rule XSwitchExpression
 ruleXSwitchExpression :
	'switch' (
		( (
		ruleValidID ':'
		) => (
			ruleValidID ':'
		) )? ruleXExpression |
		( (
		'(' ruleValidID ':'
		) => (
			'(' ruleValidID ':'
		) ) ruleXExpression ')'
	) '{' ruleXCasePart+ (
		'default' ':' ruleXExpression
	)? '}'
;

// Rule XCasePart
 ruleXCasePart :
	'case' ruleXExpression ':' ruleXExpression
;

// Rule XForLoopExpression
 ruleXForLoopExpression :
	'for' '(' (
		( (
		ruleXExpressionInsideBlock
		) => ruleXExpressionInsideBlock )? ';'
	) (
		( (
		ruleXExpression
		) => ruleXExpression )? ';'
	) ruleXExpression? ')' ruleXExpression
;

// Rule XForEachLoopExpression
 ruleXForEachLoopExpression :
	'foreach' '(' ruleJvmFormalParameter ':' ruleXExpression ')' ruleXExpression
;

// Rule XWhileExpression
 ruleXWhileExpression :
	'while' '(' ruleXExpression ')' ruleXExpression
;

// Rule XDoWhileExpression
 ruleXDoWhileExpression :
	'do' ruleXExpression 'while' '(' ruleXExpression ')'
;

// Rule XBlockExpression
 ruleXBlockExpression :
	'{' (
		ruleXExpressionInsideBlock ';'?
	)* '}'
;

// Rule XExpressionInsideBlock
 ruleXExpressionInsideBlock :
	ruleXVariableDeclarationList |
	ruleXExpression
;

// Rule XVariableDeclarationList
 ruleXVariableDeclarationList :
	'var' ruleXVariableDeclaration (
		',' ruleXVariableDeclaration
	)*
;

// Rule XVariableDeclaration
 ruleXVariableDeclaration :
	(
		( (
		ruleJvmTypeReference ruleValidID
		) => (
			ruleJvmTypeReference ruleValidID
		) ) |
		ruleValidID
	) ( (
	'=' ruleXExpression
	) => (
		'=' ruleXExpression
	) )?
;

// Rule JvmFormalParameter
 ruleJvmFormalParameter :
	ruleJvmTypeReference? ruleValidID (
		( (
		'='
		) => '=' ) ruleXExpression
	)?
;

// Rule FullJvmFormalParameter
 ruleFullJvmFormalParameter :
	ruleJvmTypeReference ruleValidID (
		( (
		'='
		) => '=' ) ruleXExpression
	)?
;

// Rule XFeatureCall
 ruleXFeatureCall :
	(
		'<' ruleJvmArgumentTypeReference (
			',' ruleJvmArgumentTypeReference
		)* '>'
	)? ruleIdOrSuper (
		( (
		'('
		) => '(' ) (
			ruleXExpression (
				',' ruleXExpression
			)*
		)? ')'
	)?
;

// Rule FeatureCallID
 ruleFeatureCallID :
	ruleValidID
;

// Rule IdOrSuper
 ruleIdOrSuper :
	ruleFeatureCallID |
	'super'
;

// Rule XConstructorCall
 ruleXConstructorCall :
	'new' ruleQualifiedName (
		( (
		'<'
		) => '<' ) ruleJvmArgumentTypeReference (
			',' ruleJvmArgumentTypeReference
		)* '>'
	)? (
		( (
		'('
		) => '(' ) (
			ruleXExpression (
				',' ruleXExpression
			)*
		)? ')'
	)?
;

// Rule XObjectLiteral
 ruleXObjectLiteral :
	'new' '{' ruleXObjectLiteralPart (
		',' ruleXObjectLiteralPart
	)* '}'
;

// Rule XObjectLiteralPart
 ruleXObjectLiteralPart :
	RULE_ID ':' ruleXExpression
;

// Rule XArrayLiteral
 ruleXArrayLiteral :
	'new' '[' ruleXExpression (
		',' ruleXExpression
	)* ']'
;

// Rule XBooleanLiteral
 ruleXBooleanLiteral :
	'false' |
	'true'
;

// Rule XNullLiteral
 ruleXNullLiteral :
	'null'
;

// Rule XNumberLiteral
 ruleXNumberLiteral :
	ruleNumber
;

// Rule XStringLiteral
 ruleXStringLiteral :
	RULE_STRING
;

// Rule XTypeLiteral
 ruleXTypeLiteral :
	'typeof' '(' ruleQualifiedName ruleArrayBrackets* ')'
;

// Rule XThrowExpression
 ruleXThrowExpression :
	'throw' ruleXExpression
;

// Rule XReturnExpression
 ruleXReturnExpression :
	'return' ( (
	ruleXExpression
	) => ruleXExpression )?
;

// Rule XBreakExpression
 ruleXBreakExpression :
	'break'
;

// Rule XContinueExpression
 ruleXContinueExpression :
	'continue'
;

// Rule XTryCatchFinallyExpression
 ruleXTryCatchFinallyExpression :
	'try' ruleXExpression (
		( (
		'catch'
		) => ruleXCatchClause )+ (
			( (
			'finally'
			) => 'finally' ) ruleXExpression
		)? |
		'finally' ruleXExpression
	)
;

// Rule XCatchClause
 ruleXCatchClause :
	( (
	'catch'
	) => 'catch' ) '(' ruleFullJvmFormalParameter ')' ruleXExpression
;

// Rule QualifiedName
 ruleQualifiedName :
	ruleValidID (
		( (
		'.'
		) => '.' ) ruleValidID
	)*
;

// Rule Number
 ruleNumber :
	RULE_HEX |
	(
		RULE_INT |
		RULE_DECIMAL
	) (
		'.' (
			RULE_INT |
			RULE_DECIMAL
		)
	)?
;

// Rule JvmTypeReference
 ruleJvmTypeReference :
	ruleJvmParameterizedTypeReference ( (
	ruleArrayBrackets
	) => ruleArrayBrackets )* |
	ruleXFunctionTypeRef
;

// Rule ArrayBrackets
 ruleArrayBrackets :
	'[' ']'
;

// Rule XFunctionTypeRef
 ruleXFunctionTypeRef :
	(
		'(' (
			ruleJvmTypeReference (
				',' ruleJvmTypeReference
			)*
		)? ')'
	)? '=>' ruleJvmTypeReference
;

// Rule JvmParameterizedTypeReference
 ruleJvmParameterizedTypeReference :
	ruleQualifiedName (
		( (
		'<'
		) => '<' ) ruleJvmArgumentTypeReference (
			',' ruleJvmArgumentTypeReference
		)* '>'
	)?
;

// Rule JvmArgumentTypeReference
 ruleJvmArgumentTypeReference :
	ruleJvmTypeReference |
	ruleJvmWildcardTypeReference
;

// Rule JvmWildcardTypeReference
 ruleJvmWildcardTypeReference :
	'?' (
		ruleJvmUpperBound |
		ruleJvmLowerBound
	)?
;

// Rule JvmUpperBound
 ruleJvmUpperBound :
	'extends' ruleJvmTypeReference
;

// Rule JvmUpperBoundAnded
 ruleJvmUpperBoundAnded :
	'&' ruleJvmTypeReference
;

// Rule JvmLowerBound
 ruleJvmLowerBound :
	'super' ruleJvmTypeReference
;

// Rule ValidID
 ruleValidID :
	RULE_ID
;

// Rule XImportDeclaration1
 ruleXImportDeclaration1 :
	'import' (
		(
			'{' ruleXImportItem (
				',' ruleXImportItem
			)* '}' |
			ruleXImportItem
		) 'from' RULE_STRING |
		'from' RULE_STRING 'as' RULE_ID
	)
;

// Rule XImportItem
 ruleXImportItem :
	RULE_ID (
		'as' RULE_ID
	)?
;

// Rule XExportDeclaration
 ruleXExportDeclaration :
	'export' (
		'{' ruleXExportItem (
			',' ruleXExportItem
		)* '}' (
			'from' RULE_STRING
		)? |
		'from' RULE_STRING 'as' RULE_ID
	)
;

// Rule XExportItem
 ruleXExportItem :
	RULE_ID (
		'as' RULE_ID
	)?
;

RULE_HEX :
	(
		'0x' |
		'0X'
	) (
		'0' .. '9' |
		'a' .. 'f' |
		'A' .. 'F' |
		'_'
	)+ (
		'#' (
			(
				'b' |
				'B'
			) (
				'i' |
				'I'
			) |
			(
				'l' |
				'L'
			)
		)
	)?
;

RULE_INT :
	'0' .. '9' (
		'0' .. '9' |
		'_'
	)*
;

RULE_DECIMAL :
	RULE_INT (
		(
			'e' |
			'E'
		) (
			'+' |
			'-'
		)? RULE_INT
	)? (
		(
			'b' |
			'B'
		) (
			'i' |
			'I' |
			'd' |
			'D'
		) |
		(
			'l' |
			'L' |
			'd' |
			'D' |
			'f' |
			'F'
		)
	)?
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'$' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'$' |
		'_' |
		'0' .. '9'
	)*
;

RULE_STRING :
	'"' (
		'\\' (
			'b' |
			't' |
			'n' |
			'f' |
			'r' |
			'u' |
			'"' |
			'\'' |
			'\\'
		) |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' (
			'b' |
			't' |
			'n' |
			'f' |
			'r' |
			'u' |
			'"' |
			'\'' |
			'\\'
		) |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' {skip();}
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? {skip();}
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ {skip();}
;

RULE_ANY_OTHER :
	.
;