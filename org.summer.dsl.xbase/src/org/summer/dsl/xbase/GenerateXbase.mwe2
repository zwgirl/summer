/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.summer.dsl.xbase.GenerateXbase

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 


var grammarURI = "classpath:/org/summer/dsl/xbase/Xbase.xtext"
var file.extensions = "___xbase1"
var projectName = "org.summer.dsl.xbase"
var runtimeProject = "../${projectName}"
var uiProject = "${runtimeProject}.ui"
var backtrack = false
var memoize = false

Workflow {
	
//    bean = StandaloneSetup {
//    	scanClassPath = true
//    	platformUri = "${runtimeProject}/.."
//    	// The following two lines can be removed, if Xbase is not used.
//    	registerGeneratedEPackage = "org.summer.dsl.model.xbase.XbasePackage"
//    	registerGenModelFile = "platform:/resource/org.summer.dsl.model/model/DslModel.genmodel"
//    }
//    
//	bean = StandaloneSetup {
//		ignoreBrokenProjectFiles = true
//		scanClassPath = true
//		registerGenModelFile = "platform:/resource/org.summer.dsl.model/model/DslModel.genmodel"
//	}
	
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		scanClassPath = true
		registerGenModelFile = "platform:/resource/org.summer.dsl.model/model/DslModel.genmodel"
	}
	
	bean = StandaloneSetup {
		resourceSet = XtextResourceSet : resourceSet {}
		registerEcoreFile = "platform:/resource/org.summer.dsl.model/model/DslModel.ecore"
	}

	component = DirectoryCleaner {
		directory="${uiProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory="${runtimeProject}/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"

		language = {
			forcedResourceSet = resourceSet
			uri = grammarURI
			fileExtensions = file.extensions
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = serializer.SerializerFragment {
				// generateDebugData = true
			}
			
//			uri = "classpath:/org/summer/dsl/xbase/Xbase.xtext" 	
//			fileExtensions = "___xbase1"
//			fragment = grammarAccess.GrammarAccessFragment {}
//			fragment = serializer.SerializerFragment {
//				// generateDebugData = true
//			}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = "___xbase1"
			}
			fragment = XtextAntlrGeneratorFragment {
				options = auto-inject {}
				antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			}
			fragment = DebugAntlrGeneratorFragment {
				options = auto-inject {}
			}
//			fragment = validation.JavaValidatorFragment {
//				inheritImplementation = false
//			}
//			fragment = scoping.ImportNamespacesScopingFragment {}
//			fragment = types.TypesGeneratorFragment {}
//			fragment = xbase.XbaseGeneratorFragment {
//				generateXtendInferrer = false
//				useInferredJvmModel = false
//				jdtTypeHierarchy = false
//			}
//			fragment = builder.BuilderIntegrationFragment {}
//			fragment = formatting.FormatterFragment {}
//			fragment = quickfix.QuickfixProviderFragment {}
//			fragment = labeling.LabelProviderFragment {
//				generateStub = false
//			}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = XtextAntlrUiGeneratorFragment {
				options = auto-inject {}
				antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			}
		}
	}
}